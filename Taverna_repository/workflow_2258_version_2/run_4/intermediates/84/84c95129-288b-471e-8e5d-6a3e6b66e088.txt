<ns2:getResultResponse xmlns:ns2="http://soap.jdispatcher.ebi.ac.uk"><output>BLASTP 2.2.26 [Sep-21-2011]


Reference: Altschul, Stephen F., Thomas L. Madden, Alejandro A. Schaffer, 
Jinghui Zhang, Zheng Zhang, Webb Miller, and David J. Lipman (1997), 
"Gapped BLAST and PSI-BLAST: a new generation of protein database search
programs",  Nucleic Acids Res. 25:3389-3402.

Query= sp|P18275|ARCD_PSEAE Arginine/ornithine antiporter
OS=Pseudomonas aeruginosa (strain ATCC 15692 / PAO1 / 1C / PRS 101 /
LMG 12228) GN=arcD PE=1 SV=1
         (482 letters)

Database: uniprotkb 
           23,734,728 sequences; 7,785,494,668 total letters

Searching..................................................done



                                                                 Score    E
Sequences producing significant alignments:                      (bits) Value

SP:ARCD_PSEAE P18275 Arginine/ornithine antiporter OS=Pseudomona...   944   0.0  
TR:B7V3R5_PSEA8 B7V3R5 Arginine/ornithine antiporter OS=Pseudomo...   944   0.0  
TR:G2L203_PSEAI G2L203 Arginine/ornithine antiporter OS=Pseudomo...   944   0.0  
TR:A3L291_PSEAI A3L291 Arginine/ornithine antiporter OS=Pseudomo...   944   0.0  
TR:Q02EJ5_PSEAB Q02EJ5 Arginine/ornithine antiporter OS=Pseudomo...   942   0.0  
TR:A3LIV9_PSEAI A3LIV9 Arginine/ornithine antiporter OS=Pseudomo...   942   0.0  
TR:G5FSD6_9PSED G5FSD6 Arginine/ornithine antiporter OS=Pseudomo...   941   0.0  
TR:A6VDU2_PSEA7 A6VDU2 Arginine/ornithine antiporter OS=Pseudomo...   940   0.0  
TR:I1AB59_PSEAI I1AB59 Arginine/ornithine antiporter OS=Pseudomo...   908   0.0  
TR:H3THE1_PSEAE H3THE1 Arginine/ornithine antiporter OS=Pseudomo...   908   0.0  
TR:H3T0K1_PSEAE H3T0K1 Arginine/ornithine antiporter OS=Pseudomo...   908   0.0  
TR:F5K1D3_PSEAI F5K1D3 Arginine/ornithine antiporter OS=Pseudomo...   908   0.0  
TR:G4LIK7_PSEAI G4LIK7 Arginine/ornithine antiporter OS=Pseudomo...   906   0.0  
TR:F5KVF1_PSEAI F5KVF1 Arginine/ornithine antiporter OS=Pseudomo...   906   0.0  
TR:G2U651_PSEAI G2U651 Arginine/ornithine antiporter OS=Pseudomo...   884   0.0  
TR:E3A1E6_PSEAI E3A1E6 Arginine/ornithine antiporter OS=Pseudomo...   882   0.0  
TR:B1JDK5_PSEPW B1JDK5 Arginine/ornithine antiporter (Precursor)...   813   0.0  
TR:E2XX06_PSEFL E2XX06 Arginine/ornithine antiporter OS=Pseudomo...   810   0.0  
TR:F0E4A3_9PSED F0E4A3 Arginine/ornithine antiporter OS=Pseudomo...   808   0.0  
TR:I2BQY9_PSEFL I2BQY9 Arginine/ornithine antiporter OS=Pseudomo...   806   0.0  
TR:Q4K7R5_PSEF5 Q4K7R5 Arginine/ornithine antiporter OS=Pseudomo...   805   0.0  
TR:E4R6E1_PSEPB E4R6E1 Arginine/ornithine antiporter OS=Pseudomo...   805   0.0  
TR:B0KQM3_PSEPG B0KQM3 Arginine/ornithine antiporter (Precursor)...   805   0.0  
TR:Q3K7Y2_PSEPF Q3K7Y2 Arginine:ornithine antiporter, APA family...   804   0.0  
TR:F2KCT8_PSEBN F2KCT8 Arginine/ornithine antiporter; putative m...   804   0.0  
TR:Q88P51_PSEPK Q88P51 Arginine/ornithine antiporter OS=Pseudomo...   803   0.0  
TR:C3JYQ4_PSEFS C3JYQ4 Arginine/ornithine antiporter OS=Pseudomo...   802   0.0  
TR:G8PWB2_PSEFL G8PWB2 ArcD OS=Pseudomonas fluorescens F113 GN=a...   801   0.0  
TR:Q1I5H5_PSEE4 Q1I5H5 Arginine/ornithine antiporter OS=Pseudomo...   800   0.0  
TR:A5VZ90_PSEP1 A5VZ90 Arginine:ornithine antiporter, APA family...   800   0.0  
TR:F8FXA0_PSEPU F8FXA0 Arginine/ornithine antiporter OS=Pseudomo...   786   0.0  
TR:Q4ZT00_PSEU2 Q4ZT00 Arginine:ornithine antiporter, APA family...   774   0.0  
TR:Q2SVZ5_BURTA Q2SVZ5 Arginine/ornithine antiporter OS=Burkhold...   765   0.0  
TR:Q63U74_BURPS Q63U74 Arginine/ornithine antiporter OS=Burkhold...   764   0.0  
TR:Q62KE0_BURMA Q62KE0 Arginine/ornithine antiporter OS=Burkhold...   764   0.0  
TR:A3NV82_BURP0 A3NV82 Arginine/ornithine antiporter OS=Burkhold...   764   0.0  
TR:A3N9I3_BURP6 A3N9I3 Arginine/ornithine antiporter OS=Burkhold...   764   0.0  
TR:A3MJP3_BURM7 A3MJP3 Arginine/ornithine antiporter OS=Burkhold...   764   0.0  
TR:A2S2S6_BURM9 A2S2S6 Arginine/ornithine antiporter OS=Burkhold...   764   0.0  
TR:I2MN73_BURPE I2MN73 Arginine/ornithine antiporter OS=Burkhold...   764   0.0  
TR:I2MAZ0_BURPE I2MAZ0 Arginine/ornithine antiporter OS=Burkhold...   764   0.0  
TR:I2LK17_BURPE I2LK17 Arginine/ornithine antiporter OS=Burkhold...   764   0.0  
TR:I2LD81_BURPE I2LD81 Arginine/ornithine antiporter OS=Burkhold...   764   0.0  
TR:C5ZGC6_BURPE C5ZGC6 Arginine/ornithine antiporter OS=Burkhold...   764   0.0  
TR:C5NHG6_BURML C5NHG6 Arginine/ornithine antiporter OS=Burkhold...   764   0.0  
TR:C0Y7E0_BURPE C0Y7E0 Arginine/ornithine antiporter OS=Burkhold...   764   0.0  
TR:B7CPI3_BURPE B7CPI3 Arginine/ornithine antiporter OS=Burkhold...   764   0.0  
TR:B2GY78_BURPE B2GY78 Arginine/ornithine antiporter OS=Burkhold...   764   0.0  
TR:B1HJ22_BURPE B1HJ22 Arginine/ornithine antiporter OS=Burkhold...   764   0.0  
TR:A9K8A6_BURML A9K8A6 Arginine/ornithine antiporter OS=Burkhold...   764   0.0  
TR:A8KND7_BURPE A8KND7 Arginine/ornithine antiporter OS=Burkhold...   764   0.0  
TR:A8EDQ3_BURPE A8EDQ3 Arginine/ornithine antiporter OS=Burkhold...   764   0.0  
TR:A5XPF8_BURML A5XPF8 Arginine/ornithine antiporter OS=Burkhold...   764   0.0  
TR:A5XG16_BURML A5XG16 Arginine/ornithine antiporter OS=Burkhold...   764   0.0  
TR:A5TL47_BURML A5TL47 Arginine/ornithine antiporter OS=Burkhold...   764   0.0  
TR:A4LBH5_BURPE A4LBH5 Arginine/ornithine antiporter OS=Burkhold...   764   0.0  
TR:I2LF51_BURPE I2LF51 Arginine/ornithine antiporter OS=Burkhold...   763   0.0  
TR:I1WJ80_BURPE I1WJ80 Arginine/ornithine antiporter OS=Burkhold...   763   0.0  
TR:Q3JSC9_BURP1 Q3JSC9 Arginine/ornithine antiporter OS=Burkhold...   764   0.0  
TR:A1V3V7_BURMS A1V3V7 Arginine/ornithine antiporter OS=Burkhold...   764   0.0  
TR:C6TPW1_BURPE C6TPW1 Arginine/ornithine antiporter OS=Burkhold...   764   0.0  
TR:C4AZK0_BURML C4AZK0 Arginine/ornithine antiporter OS=Burkhold...   764   0.0  
TR:C4KY12_BURPE C4KY12 Arginine/ornithine antiporter OS=Burkhold...   762   0.0  
TR:A4XRB0_PSEMY A4XRB0 Arginine:ornithine antiporter, APA family...   753   0.0  
TR:Q4K7R6_PSEF5 Q4K7R6 Arginine/ornithine antiporter OS=Pseudomo...   744   0.0  
TR:F4DTU5_PSEMN F4DTU5 Arginine/ornithine antiporter OS=Pseudomo...   743   0.0  
TR:A4VHD2_PSEU5 A4VHD2 Arginine/ornithine antiporter OS=Pseudomo...   739   0.0  
TR:Q3K7Y3_PSEPF Q3K7Y3 Arginine:ornithine antiporter, APA family...   734   0.0  
TR:B1YXD0_BURA4 B1YXD0 Arginine/ornithine antiporter OS=Burkhold...   728   0.0  
TR:B2JH40_BURP8 B2JH40 Arginine/ornithine antiporter OS=Burkhold...   726   0.0  
TR:F2N6C0_PSEU6 F2N6C0 Arginine/ornithine antiporter OS=Pseudomo...   725   0.0  
TR:A4VRJ9_PSEU5 A4VRJ9 Arginine/ornithine antiporter OS=Pseudomo...   725   0.0  
TR:A5VZ91_PSEP1 A5VZ91 Arginine:ornithine antiporter, APA family...   722   0.0  
TR:Q88P50_PSEPK Q88P50 Arginine/ornithine antiporter OS=Pseudomo...   721   0.0  
TR:E4R6E2_PSEPB E4R6E2 Arginine/ornithine antiporter OS=Pseudomo...   721   0.0  
TR:B0KQM4_PSEPG B0KQM4 Arginine/ornithine antiporter (Precursor)...   721   0.0  
TR:Q1I5H6_PSEE4 Q1I5H6 Arginine/ornithine antiporter OS=Pseudomo...   719   0.0  
TR:F0E4A4_9PSED F0E4A4 Arginine/ornithine antiporter OS=Pseudomo...   718   0.0  
TR:F8FXA1_PSEPU F8FXA1 Arginine/ornithine antiporter OS=Pseudomo...   717   0.0  
TR:H7EV95_PSEST H7EV95 Arginine/ornithine antiporter OS=Pseudomo...   717   0.0  
TR:B1JDK4_PSEPW B1JDK4 Arginine/ornithine antiporter (Precursor)...   717   0.0  
TR:G8PWB3_PSEFL G8PWB3 ArcD OS=Pseudomonas fluorescens F113 GN=a...   715   0.0  
TR:E2XX05_PSEFL E2XX05 Arginine/ornithine antiporter OS=Pseudomo...   714   0.0  
TR:C3JYQ3_PSEFS C3JYQ3 Putative amino acid transport system, int...   714   0.0  
TR:I2BPB7_PSEFL I2BPB7 Arginine/ornithine antiporter OS=Pseudomo...   713   0.0  
TR:F2KCT9_PSEBN F2KCT9 Putative amino acid (Arginine/ornithine) ...   709   0.0  
TR:E1V382_HALED E1V382 APC family transporter (Probable arginine...   701   0.0  
TR:F4DPM0_PSEMN F4DPM0 Arginine/ornithine antiporter OS=Pseudomo...   694   0.0  
TR:A4XVP9_PSEMY A4XVP9 Arginine:ornithine antiporter, APA family...   694   0.0  
TR:F7QAB7_9GAMM F7QAB7 Arginine/ornithine antiporter; membrane p...   681   0.0  
TR:A0AEG9_9PSED A0AEG9 Arginine/ornithine antiporter OS=Pseudomo...   657   0.0  
TR:Q2SB20_HAHCH Q2SB20 Amino acid transporters OS=Hahella chejue...   624   0.0  
TR:C4GEP1_9NEIS C4GEP1 Putative uncharacterized protein OS=Kinge...   622   0.0  
TR:F0RPM0_DEIPM F0RPM0 Arginine/ornithine antiporter (Precursor)...   568   0.0  
TR:C1DD80_LARHH C1DD80 ArcD OS=Laribacter hongkongensis (strain ...   562   0.0  
TR:B2TG51_BURPP B2TG51 Arginine/ornithine antiporter OS=Burkhold...   551   0.0  
TR:B4SRE0_STRM5 B4SRE0 Arginine/ornithine antiporter (Precursor)...   549   0.0  
TR:Q7NRJ8_CHRVO Q7NRJ8 Arginine/ornithine antiporter OS=Chromoba...   548   0.0  
TR:I2IJC0_9BURK I2IJC0 Arginine/ornithine antiporter (Precursor)...   548   0.0  
TR:Q13XV1_BURXL Q13XV1 Arginine:ornithine antiporter, APA family...   547   0.0  
TR:F3GB48_PSESJ F3GB48 Arginine/ornithine antiporter (Fragment) ...   540   0.0  
TR:B8L6S5_9GAMM B8L6S5 Arginine/ornithine antiporter OS=Stenotro...   543   0.0  
TR:E1T8P7_BURSG E1T8P7 Arginine/ornithine antiporter OS=Burkhold...   541   0.0  
TR:C1DAV8_LARHH C1DAV8 ArcD OS=Laribacter hongkongensis (strain ...   541   0.0  
TR:B2FPR1_STRMK B2FPR1 Putative arginine/ornithine antiporter (P...   540   0.0  
TR:B1G449_9BURK B1G449 Arginine/ornithine antiporter OS=Burkhold...   539   0.0  
TR:I0KR90_STEMA I0KR90 Arginine/ornithine antiporter ArcD OS=Ste...   537   0.0  
TR:A1T4X6_MYCVP A1T4X6 Arginine:ornithine antiporter, APA family...   537   0.0  
TR:C1DD79_LARHH C1DD79 ArcD OS=Laribacter hongkongensis (strain ...   534   0.0  
TR:I2KUQ0_BURPE I2KUQ0 Amino acid permease OS=Burkholderia pseud...   533   0.0  
TR:I2KTK6_BURPE I2KTK6 Amino acid permease OS=Burkholderia pseud...   533   0.0  
TR:A3P5A8_BURP0 A3P5A8 Transporter, basic amino acid/polyamine a...   533   0.0  
TR:I2KYI7_BURPE I2KYI7 Amino acid permease OS=Burkholderia pseud...   533   0.0  
TR:I1WT28_BURPE I1WT28 Amino acid permease OS=Burkholderia pseud...   533   0.0  
TR:C5ZL87_BURPE C5ZL87 Transporter, basic amino acid/polyamine a...   533   0.0  
TR:I2MCW7_BURPE I2MCW7 Amino acid permease OS=Burkholderia pseud...   532   0.0  
TR:I2M122_BURPE I2M122 Amino acid permease OS=Burkholderia pseud...   532   0.0  
TR:Q63L96_BURPS Q63L96 Putative amino acid permease OS=Burkholde...   532   0.0  
TR:A4MHC5_BURPE A4MHC5 Transporter, basic amino acid/polyamine a...   532   0.0  
TR:B7CER4_BURPE B7CER4 Transporter, basic amino acid/polyamine a...   531   0.0  
TR:C0YAY2_BURPE C0YAY2 Transporter, basic amino acid/polyamine a...   531   0.0  
TR:F2KFR4_PSEBN F2KFR4 Arginine/ornithine antiporter OS=Pseudomo...   531   0.0  
TR:Q988H8_RHILO Q988H8 Arginine/ornithine antiporter OS=Rhizobiu...   529   0.0  
TR:C7LPM9_DESBD C7LPM9 Arginine/ornithine antiporter OS=Desulfom...   526   0.0  
TR:C4I394_BURPE C4I394 Transporter, basic amino acid/polyamine a...   533   0.0  
TR:B1H6U3_BURPE B1H6U3 Transporter, basic amino acid/polyamine a...   533   0.0  
TR:A8ELQ4_BURPE A8ELQ4 Transporter, basic amino acid/polyamine a...   533   0.0  
TR:Q01UC7_SOLUE Q01UC7 Arginine/ornithine antiporter (Precursor)...   525   0.0  
TR:Q3JMH2_BURP1 Q3JMH2 Amino acid permease OS=Burkholderia pseud...   532   0.0  
TR:C6U355_BURPE C6U355 Transporter, basic amino acid/polyamine a...   532   0.0  
TR:A3NJP6_BURP6 A3NJP6 Transporter, basic amino acid/polyamine a...   530   0.0  
TR:A9IMZ2_BORPD A9IMZ2 Arginine/ornithine antiporter OS=Bordetel...   520   e-180
TR:G6Y6L9_9RHIZ G6Y6L9 Arginine/ornithine antiporter OS=Mesorhiz...   520   e-180
TR:H0F6X2_9BURK H0F6X2 Arginine/ornithine antiporter OS=Achromob...   513   e-177
TR:A1SJE3_NOCSJ A1SJE3 Arginine:ornithine antiporter, APA family...   511   e-176
TR:Q0SWK4_CLOPS Q0SWK4 Arginine/ornithine antiporter OS=Clostrid...   510   e-176
TR:G8AGS8_AZOBR G8AGS8 Putative arginine/ornithine antiporter tr...   510   e-176
TR:B1V191_CLOPF B1V191 Arginine/ornithine antiporter OS=Clostrid...   509   e-176
TR:H7CRW8_CLOPF H7CRW8 Arginine/ornithine antiporter OS=Clostrid...   508   e-175
TR:H1CW31_CLOPF H1CW31 Arginine/ornithine antiporter OS=Clostrid...   508   e-175
TR:B1RQY3_CLOPF B1RQY3 Arginine/ornithine antiporter OS=Clostrid...   508   e-175
TR:B1R7A7_CLOPF B1R7A7 Arginine/ornithine antiporter OS=Clostrid...   508   e-175
TR:B1BS27_CLOPF B1BS27 Arginine/ornithine antiporter OS=Clostrid...   508   e-175
TR:C4U894_YERAL C4U894 Arginine/ornithine antiporter OS=Yersinia...   508   e-175
TR:C4ULF1_YERRU C4ULF1 Arginine/ornithine antiporter OS=Yersinia...   508   e-175
SP:ARCD_CLOPE Q46170 Arginine/ornithine antiporter OS=Clostridiu...   506   e-175
TR:Q0TUR3_CLOP1 Q0TUR3 Arginine/ornithine antiporter OS=Clostrid...   506   e-175
TR:B1RFC1_CLOPF B1RFC1 Arginine/ornithine antiporter OS=Clostrid...   506   e-175
TR:C4UQ95_YERRO C4UQ95 Arginine/ornithine antiporter OS=Yersinia...   507   e-175
TR:D1B6P7_THEAS D1B6P7 Arginine/ornithine antiporter (Precursor)...   506   e-175
TR:I2QQ17_9BRAD I2QQ17 Transporter, basic amino acid/polyamine a...   504   e-174
TR:E7B548_YERE1 E7B548 Arginine/ornithine antiporter ArcD OS=Yer...   504   e-173
TR:A1JJ60_YERE8 A1JJ60 Arginine/ornithine antiporter (Precursor)...   504   e-173
TR:G4KBR7_YEREN G4KBR7 Arginine/ornithine antiporter OS=Yersinia...   504   e-173
TR:F4MW91_YEREN F4MW91 Arginine/ornithine antiporter OS=Yersinia...   504   e-173
TR:A1JM03_YERE8 A1JM03 Probable amino acid permease (Precursor) ...   504   e-173
TR:G8VN41_PROAA G8VN41 Arginine/ornithine antiporter ArcD OS=Pro...   503   e-173
TR:G7UAA4_PROAA G7UAA4 Arginine/ornithine antiporter ArcD OS=Pro...   504   e-173
TR:F1U5T1_PROAA F1U5T1 Arginine/ornithine antiporter OS=Propioni...   504   e-173
TR:E6DAD3_PROAA E6DAD3 Arginine/ornithine antiporter OS=Propioni...   504   e-173
TR:E6D1B9_PROAA E6D1B9 Arginine/ornithine antiporter OS=Propioni...   504   e-173
TR:E6CNE8_PROAA E6CNE8 Arginine/ornithine antiporter OS=Propioni...   504   e-173
TR:E4GXX4_PROAA E4GXX4 Arginine/ornithine antiporter OS=Propioni...   504   e-173
TR:E4BD25_PROAA E4BD25 Arginine/ornithine antiporter OS=Propioni...   504   e-173
TR:D1YBM9_PROAA D1YBM9 Arginine/ornithine antiporter OS=Propioni...   504   e-173
TR:C4SY29_YERIN C4SY29 Arginine/ornithine antiporter OS=Yersinia...   503   e-173
TR:D4HCA1_PROAS D4HCA1 Arginine/ornithine antiporter ArcD OS=Pro...   503   e-173
TR:G8VJ81_PROAA G8VJ81 Arginine/ornithine antiporter ArcD OS=Pro...   503   e-173
TR:G8VAP1_PROAA G8VAP1 Arginine/ornithine antiporter ArcD OS=Pro...   503   e-173
TR:F3D0Q2_PROAA F3D0Q2 Arginine/ornithine antiporter OS=Propioni...   503   e-173
TR:F3CSK2_PROAA F3CSK2 Arginine/ornithine antiporter OS=Propioni...   503   e-173
TR:F3BW59_PROAA F3BW59 Arginine/ornithine antiporter OS=Propioni...   503   e-173
TR:F1VEX4_PROAA F1VEX4 Arginine/ornithine antiporter OS=Propioni...   503   e-173
TR:F1V8T7_PROAA F1V8T7 Arginine/ornithine antiporter OS=Propioni...   503   e-173
TR:F1UXD3_PROAA F1UXD3 Arginine/ornithine antiporter OS=Propioni...   503   e-173
TR:F1ULH4_PROAA F1ULH4 Arginine/ornithine antiporter OS=Propioni...   503   e-173
TR:F1TX73_PROAA F1TX73 Arginine/ornithine antiporter OS=Propioni...   503   e-173
TR:E6EIL9_PROAA E6EIL9 Arginine/ornithine antiporter OS=Propioni...   503   e-173
TR:E6EBU9_PROAA E6EBU9 Arginine/ornithine antiporter OS=Propioni...   503   e-173
TR:E6CSF8_PROAA E6CSF8 Arginine/ornithine antiporter OS=Propioni...   503   e-173
TR:E6C908_PROAA E6C908 Arginine/ornithine antiporter OS=Propioni...   503   e-173
TR:E6BYL3_PROAA E6BYL3 Arginine/ornithine antiporter OS=Propioni...   503   e-173
TR:E4I2E7_PROAA E4I2E7 Arginine/ornithine antiporter OS=Propioni...   503   e-173
TR:E4HA02_PROAA E4HA02 Arginine/ornithine antiporter OS=Propioni...   503   e-173
TR:E4GUK0_PROAA E4GUK0 Arginine/ornithine antiporter OS=Propioni...   503   e-173
TR:E4G280_PROAA E4G280 Arginine/ornithine antiporter OS=Propioni...   503   e-173
TR:E4FX60_PROAA E4FX60 Arginine/ornithine antiporter OS=Propioni...   503   e-173
TR:E4FSW5_PROAA E4FSW5 Arginine/ornithine antiporter OS=Propioni...   503   e-173
TR:E4FHZ3_PROAA E4FHZ3 Arginine/ornithine antiporter OS=Propioni...   503   e-173
TR:E4FAY4_PROAA E4FAY4 Arginine/ornithine antiporter OS=Propioni...   503   e-173
TR:E4F5U3_PROAA E4F5U3 Arginine/ornithine antiporter OS=Propioni...   503   e-173
TR:E4EVK4_PROAA E4EVK4 Arginine/ornithine antiporter OS=Propioni...   503   e-173
TR:E4ELB4_PROAA E4ELB4 Arginine/ornithine antiporter OS=Propioni...   503   e-173
TR:E4EFS7_PROAA E4EFS7 Arginine/ornithine antiporter OS=Propioni...   503   e-173
TR:E4EA09_PROAA E4EA09 Arginine/ornithine antiporter OS=Propioni...   503   e-173
TR:E4DZY7_PROAA E4DZY7 Arginine/ornithine antiporter OS=Propioni...   503   e-173
TR:E4D010_PROAA E4D010 Arginine/ornithine antiporter OS=Propioni...   503   e-173
TR:E4BY80_PROAA E4BY80 Arginine/ornithine antiporter OS=Propioni...   503   e-173
TR:E4BRA5_PROAA E4BRA5 Arginine/ornithine antiporter OS=Propioni...   503   e-173
TR:E4AXW7_PROAA E4AXW7 Arginine/ornithine antiporter OS=Propioni...   503   e-173
TR:E4AM65_PROAA E4AM65 Arginine/ornithine antiporter OS=Propioni...   503   e-173
TR:D3MMD3_PROAA D3MMD3 Arginine/ornithine antiporter OS=Propioni...   503   e-173
TR:F0KVZ9_YERE3 F0KVZ9 Amino acid permease OS=Yersinia enterocol...   503   e-173
TR:Q6AA79_PROAC Q6AA79 Arginine/ornithine antiporter OS=Propioni...   502   e-173
TR:H7GBW8_PROAA H7GBW8 Arginine/ornithine antiporter OS=Propioni...   502   e-173
TR:G5EYG2_9ACTO G5EYG2 Putative uncharacterized protein OS=Propi...   502   e-173
TR:F1UQP7_PROAA F1UQP7 Arginine/ornithine antiporter OS=Propioni...   503   e-173
TR:E4CJG4_PROAA E4CJG4 Arginine/ornithine antiporter OS=Propioni...   503   e-173
TR:D8GPT8_CLOLD D8GPT8 Predicted arginine/ornithine antiporter O...   501   e-173
TR:E4HUK2_PROAA E4HUK2 Arginine/ornithine antiporter OS=Propioni...   503   e-173
TR:A4SM71_AERS4 A4SM71 Arginine/ornithine antiporter OS=Aeromona...   501   e-173
TR:G7CV42_AERSA G7CV42 Arginine/ornithine antiporter OS=Aeromona...   501   e-173
TR:F0L0C7_YERE3 F0L0C7 Arginine/ornithine antiporter OS=Yersinia...   502   e-172
TR:H0UNX0_9BACT H0UNX0 Arginine/ornithine antiporter (Precursor)...   501   e-172
TR:Q92YG7_RHIME Q92YG7 ArcD1 arginine/ornithine antiporter OS=Rh...   501   e-172
TR:F6C0I1_SINMB F6C0I1 Arginine/ornithine antiporter (Precursor)...   501   e-172
TR:G0DUY5_PROAA G0DUY5 Arginine/ornithine antiporter ArcD OS=Pro...   502   e-172
TR:F9N928_9ACTO F9N928 Arginine/ornithine antiporter OS=Propioni...   502   e-172
TR:F5TXQ2_9ACTO F5TXQ2 Arginine/ornithine antiporter OS=Propioni...   502   e-172
TR:F5TNN7_9ACTO F5TNN7 Arginine/ornithine antiporter OS=Propioni...   502   e-172
TR:F1VIR5_PROAA F1VIR5 Arginine/ornithine antiporter OS=Propioni...   502   e-172
TR:F1UBX7_PROAA F1UBX7 Arginine/ornithine antiporter OS=Propioni...   502   e-172
TR:E6DX55_PROAA E6DX55 Arginine/ornithine antiporter OS=Propioni...   502   e-172
TR:E6CB81_PROAA E6CB81 Arginine/ornithine antiporter OS=Propioni...   502   e-172
TR:E4DR09_PROAA E4DR09 Arginine/ornithine antiporter OS=Propioni...   502   e-172
TR:E4C5G8_PROAA E4C5G8 Arginine/ornithine antiporter OS=Propioni...   502   e-172
TR:E7B9W5_YERE1 E7B9W5 Arginine/ornithine antiporter ArcD OS=Yer...   501   e-172
TR:G4KAM6_YEREN G4KAM6 Amino acid permease OS=Yersinia enterocol...   501   e-172
TR:E4DNL1_PROAA E4DNL1 Arginine/ornithine antiporter OS=Propioni...   502   e-172
TR:F9YZB2_PROAA F9YZB2 Arginine/ornithine antiporter OS=Propioni...   501   e-172
TR:F1TPM2_PROAA F1TPM2 Arginine/ornithine antiporter OS=Propioni...   501   e-172
TR:D7A1Q0_STAND D7A1Q0 Arginine/ornithine antiporter OS=Starkeya...   501   e-172
TR:C4TU11_YERKR C4TU11 Arginine/ornithine antiporter OS=Yersinia...   501   e-172
TR:C4SQN0_YERFR C4SQN0 Arginine/ornithine antiporter OS=Yersinia...   501   e-172
TR:F4DCC0_AERVB F4DCC0 Arginine/ornithine antiporter OS=Aeromona...   499   e-172
TR:F6EAH3_SINMK F6EAH3 Arginine/ornithine antiporter (Precursor)...   499   e-172
TR:E4DBX4_PROAA E4DBX4 Arginine/ornithine antiporter OS=Propioni...   501   e-172
TR:E4D9G1_PROAA E4D9G1 Arginine/ornithine antiporter OS=Propioni...   501   e-172
TR:E4CCI9_PROAA E4CCI9 Arginine/ornithine antiporter OS=Propioni...   501   e-172
TR:E4B2R1_PROAA E4B2R1 Arginine/ornithine antiporter OS=Propioni...   501   e-172
TR:C4SGS2_YERMO C4SGS2 Arginine/ornithine antiporter OS=Yersinia...   500   e-172
TR:Q89DX6_BRAJA Q89DX6 Bll7311 protein OS=Bradyrhizobium japonic...   499   e-172
TR:E6E0J6_PROAA E6E0J6 Arginine/ornithine antiporter OS=Propioni...   500   e-172
TR:E4A7P7_PROAA E4A7P7 Arginine/ornithine antiporter OS=Propioni...   500   e-172
TR:D3MB46_PROAA D3MB46 Arginine/ornithine antiporter OS=Propioni...   500   e-172
TR:F3CZM0_PROAA F3CZM0 Arginine/ornithine antiporter OS=Propioni...   500   e-171
TR:E6DKQ0_PROAA E6DKQ0 Arginine/ornithine antiporter OS=Propioni...   500   e-171
TR:E4GJT9_PROAA E4GJT9 Arginine/ornithine antiporter OS=Propioni...   500   e-171
TR:E4GC86_PROAA E4GC86 Arginine/ornithine antiporter OS=Propioni...   500   e-171
TR:E4CU58_PROAA E4CU58 Arginine/ornithine antiporter OS=Propioni...   500   e-171
TR:C4S5N9_YERBE C4S5N9 Arginine/ornithine antiporter OS=Yersinia...   499   e-171
TR:F7XE38_SINMM F7XE38 Probabable ArcD1 arginine/ornithine antip...   498   e-171
TR:E6DHP4_PROAA E6DHP4 Arginine/ornithine antiporter OS=Propioni...   499   e-171
TR:E4H923_PROAA E4H923 Arginine/ornithine antiporter OS=Propioni...   499   e-171
TR:F7XE37_SINMM F7XE37 ArcD2 arginine/ornithine antiporter OS=Si...   498   e-171
TR:C3MIN6_RHISN C3MIN6 Arginine/ornithine antiporter OS=Rhizobiu...   498   e-171
TR:C4RWP6_YERBE C4RWP6 Arginine/ornithine antiporter OS=Yersinia...   498   e-171
TR:F9NVI1_PROAA F9NVI1 Arginine/ornithine antiporter OS=Propioni...   498   e-171
TR:Q92YG6_RHIME Q92YG6 ArcD2 arginine/ornithine antiporter OS=Rh...   497   e-171
TR:F6EAH4_SINMK F6EAH4 Arginine/ornithine antiporter OS=Sinorhiz...   497   e-171
TR:H0G1W6_RHIML H0G1W6 Arginine/ornithine antiporter OS=Sinorhiz...   497   e-171
TR:E3CX96_9BACT E3CX96 Arginine:ornithine antiporter, APA family...   497   e-171
TR:F7NE10_9FIRM F7NE10 Putative arginine/ornithine antiporter OS...   497   e-171
TR:A0KK14_AERHH A0KK14 Arginine/ornithine antiporter OS=Aeromona...   496   e-171
TR:F6C0I2_SINMB F6C0I2 Arginine/ornithine antiporter OS=Sinorhiz...   496   e-171
TR:G9A0F9_RHIFH G9A0F9 Arginine/ornithine antiporter OS=Rhizobiu...   496   e-171
TR:G4DVK5_9GAMM G4DVK5 Arginine/ornithine antiporter OS=Thiocyst...   496   e-170
TR:F3P1E7_9ACTO F3P1E7 Arginine/ornithine antiporter OS=Propioni...   496   e-170
TR:E4BG91_PROAA E4BG91 Arginine/ornithine antiporter OS=Propioni...   496   e-170
TR:E4AER7_PROAA E4AER7 Arginine/ornithine antiporter OS=Propioni...   496   e-170
TR:E3GCH0_ENTCS E3GCH0 Arginine/ornithine antiporter OS=Enteroba...   494   e-170
TR:C4U809_YERAL C4U809 Arginine/ornithine antiporter OS=Yersinia...   494   e-170
TR:B5WJG7_9BURK B5WJG7 Spore germination protein (Precursor) OS=...   493   e-169
TR:G9A0G0_RHIFH G9A0G0 Amino acid/polyamine transporter I OS=Rhi...   493   e-169
TR:E4HHS4_PROAA E4HHS4 Arginine/ornithine antiporter OS=Propioni...   492   e-169
TR:C4SEW4_YERMO C4SEW4 Arginine/ornithine antiporter OS=Yersinia...   493   e-169
TR:D5WLP0_BURSC D5WLP0 Spore germination protein OS=Burkholderia...   492   e-169
TR:G9ZV36_9PROT G9ZV36 Arginine/ornithine antiporter OS=Acetobac...   491   e-169
TR:D8GNJ0_CLOLD D8GNJ0 Predicted arginine/ornithine antiporter O...   491   e-168
TR:C2V6M7_BACCE C2V6M7 Arginine/ornithine antiporter OS=Bacillus...   490   e-168
TR:H0G1W7_RHIML H0G1W7 ArcD1 arginine/ornithine antiporter OS=Si...   490   e-168
TR:C2ZYC3_BACCE C2ZYC3 Arginine/ornithine antiporter OS=Bacillus...   489   e-168
TR:C2Z2J3_BACCE C2Z2J3 Arginine/ornithine antiporter OS=Bacillus...   489   e-168
TR:C3MIN7_RHISN C3MIN7 Amino acid/polyamine transporter I OS=Rhi...   488   e-167
TR:Q73E85_BACC1 Q73E85 Arginine/ornithine antiporter OS=Bacillus...   488   e-167
TR:C2Q4P2_BACCE C2Q4P2 Arginine/ornithine antiporter OS=Bacillus...   488   e-167
TR:A0R971_BACAH A0R971 Arginine:ornithine antiporter, APA family...   488   e-167
TR:C3EWF2_BACTU C3EWF2 Arginine/ornithine antiporter OS=Bacillus...   487   e-167
TR:Q6HP27_BACHK Q6HP27 Arginine-ornithine antiporter OS=Bacillus...   487   e-167
TR:C2UQA3_BACCE C2UQA3 Arginine/ornithine antiporter OS=Bacillus...   487   e-167
TR:C2TS48_BACCE C2TS48 Arginine/ornithine antiporter OS=Bacillus...   487   e-167
TR:G9QEE1_9BACI G9QEE1 Arginine/ornithine antiporter OS=Bacillus...   487   e-167
TR:C3EFJ5_BACTK C3EFJ5 Arginine/ornithine antiporter OS=Bacillus...   487   e-167
TR:C2SEU5_BACCE C2SEU5 Arginine/ornithine antiporter OS=Bacillus...   487   e-167
TR:F3PAN2_9ACTO F3PAN2 Arginine/ornithine antiporter OS=Actinomy...   487   e-167
TR:C3GVV8_BACTU C3GVV8 Arginine/ornithine antiporter OS=Bacillus...   486   e-167
TR:C3BX45_BACTU C3BX45 Arginine/ornithine antiporter OS=Bacillus...   486   e-167
TR:C2QMM5_BACCE C2QMM5 Arginine/ornithine antiporter OS=Bacillus...   486   e-167
TR:H4F4J8_9RHIZ H4F4J8 Arginine/ornithine antiporter OS=Rhizobiu...   487   e-167
TR:G9PKK3_9ACTO G9PKK3 Putative uncharacterized protein OS=Actin...   486   e-167
TR:E7N5T0_9ACTO E7N5T0 Arginine/ornithine antiporter OS=Actinomy...   486   e-167
TR:Q81IH9_BACCR Q81IH9 Arginine/ornithine antiporter OS=Bacillus...   486   e-167
TR:D5TMH5_BACT1 D5TMH5 Arginine/ornithine antiporter OS=Bacillus...   486   e-167
TR:B7IV34_BACC2 B7IV34 Arginine/ornithine antiporter OS=Bacillus...   486   e-167
TR:B7H7F8_BACC4 B7H7F8 Arginine/ornithine antiporter OS=Bacillus...   486   e-167
TR:F2H4Z2_BACTU F2H4Z2 Arginine/ornithine antiporter OS=Bacillus...   486   e-167
TR:C3FEX4_BACTB C3FEX4 Arginine/ornithine antiporter OS=Bacillus...   486   e-167
TR:C3DEI6_BACTS C3DEI6 Arginine/ornithine antiporter OS=Bacillus...   486   e-167
TR:C2Y5D8_BACCE C2Y5D8 Arginine/ornithine antiporter OS=Bacillus...   486   e-167
TR:C2U8Q0_BACCE C2U8Q0 Arginine/ornithine antiporter OS=Bacillus...   486   e-167
TR:C2R2W1_BACCE C2R2W1 Arginine/ornithine antiporter OS=Bacillus...   486   e-167
TR:Q3EXL7_BACTI Q3EXL7 Arginine/ornithine antiporter OS=Bacillus...   486   e-167
TR:C3IE41_BACTU C3IE41 Arginine/ornithine antiporter OS=Bacillus...   486   e-167
TR:C3CWD9_BACTU C3CWD9 Arginine/ornithine antiporter OS=Bacillus...   486   e-167
TR:C3CDE6_BACTU C3CDE6 Arginine/ornithine antiporter OS=Bacillus...   486   e-167
TR:C2SVN7_BACCE C2SVN7 Arginine/ornithine antiporter OS=Bacillus...   486   e-167
TR:C2RHU4_BACCE C2RHU4 Arginine/ornithine antiporter OS=Bacillus...   486   e-167
TR:A7GKQ0_BACCN A7GKQ0 Arginine/ornithine antiporter (Precursor)...   485   e-166
TR:C3HV17_BACTU C3HV17 Arginine/ornithine antiporter OS=Bacillus...   485   e-166
TR:C2NTL9_BACCE C2NTL9 Arginine/ornithine antiporter OS=Bacillus...   485   e-166
TR:C2MVW7_BACCE C2MVW7 Arginine/ornithine antiporter OS=Bacillus...   485   e-166
TR:B5UIK8_BACCE B5UIK8 Arginine/ornithine antiporter OS=Bacillus...   485   e-166
TR:C4KZ88_EXISA C4KZ88 Arginine/ornithine antiporter OS=Exiguoba...   486   e-166
TR:C3HD58_BACTU C3HD58 Arginine/ornithine antiporter OS=Bacillus...   485   e-166
TR:C2WH76_BACCE C2WH76 Arginine/ornithine antiporter OS=Bacillus...   485   e-166
TR:C3DYD0_BACTU C3DYD0 Arginine/ornithine antiporter OS=Bacillus...   484   e-166
TR:C2W3I2_BACCE C2W3I2 Arginine/ornithine antiporter OS=Bacillus...   484   e-166
TR:B7JN61_BACC0 B7JN61 Arginine/ornithine antiporter OS=Bacillus...   484   e-166
TR:C3FXK6_BACTU C3FXK6 Arginine/ornithine antiporter OS=Bacillus...   484   e-166
TR:C2TB29_BACCE C2TB29 Arginine/ornithine antiporter OS=Bacillus...   484   e-166
TR:B3YV01_BACCE B3YV01 Arginine/ornithine antiporter OS=Bacillus...   484   e-166
TR:C2X6K8_BACCE C2X6K8 Arginine/ornithine antiporter OS=Bacillus...   484   e-166
TR:C4UZC9_YERRO C4UZC9 Arginine/ornithine antiporter OS=Yersinia...   484   e-166
TR:C3BF90_9BACI C3BF90 Arginine/ornithine antiporter OS=Bacillus...   483   e-166
TR:C3AYJ8_BACMY C3AYJ8 Arginine/ornithine antiporter OS=Bacillus...   483   e-165
TR:C3AGW9_BACMY C3AGW9 Arginine/ornithine antiporter OS=Bacillus...   483   e-165
TR:A8U5U1_9LACT A8U5U1 Arginine-ornithine antiporter OS=Carnobac...   482   e-165
TR:Q65D86_BACLD Q65D86 Amino acid/polyamine transporter permease...   482   e-165
TR:O86133_BACLI O86133 Permease OS=Bacillus licheniformis GN=arc...   482   e-165
TR:E5W9L9_9BACI E5W9L9 Permease OS=Bacillus sp. BT1B_CT2 GN=HMPR...   482   e-165
TR:C3GDN0_BACTU C3GDN0 Arginine/ornithine antiporter OS=Bacillus...   481   e-165
TR:I0UMB6_BACLI I0UMB6 Amino acid/polyamine transporter permease...   480   e-164
TR:H0UNX3_9BACT H0UNX3 Arginine/ornithine antiporter (Precursor)...   479   e-164
TR:C7NKP8_KYTSD C7NKP8 Amino acid transporter OS=Kytococcus sede...   479   e-164
TR:C2W7R4_BACCE C2W7R4 Amino acid permease OS=Bacillus cereus Ro...   478   e-163
TR:D5CBB3_ENTCC D5CBB3 Arginine/ornithine antiporter OS=Enteroba...   476   e-163
TR:I2QQ11_9BRAD I2QQ11 Transporter, basic amino acid/polyamine a...   477   e-163
TR:Q6HJ83_BACHK Q6HJ83 Arginine/ornithine antiporter OS=Bacillus...   476   e-163
TR:C3GII2_BACTU C3GII2 Amino acid permease OS=Bacillus thuringie...   476   e-163
TR:Q81QY3_BACAN Q81QY3 Arginine/ornithine antiporter OS=Bacillus...   475   e-162
TR:Q63BR4_BACCZ Q63BR4 Arginine/ornithine antiporter OS=Bacillus...   475   e-162
TR:D8GWU0_BACAI D8GWU0 Arginine/ornithine antiporter OS=Bacillus...   475   e-162
TR:C3P8Z4_BACAA C3P8Z4 Arginine/ornithine antiporter OS=Bacillus...   475   e-162
TR:C3LJI3_BACAC C3LJI3 Arginine/ornithine antiporter OS=Bacillus...   475   e-162
TR:B7JMK9_BACC0 B7JMK9 Arginine/ornithine antiporter OS=Bacillus...   475   e-162
TR:A0RDQ9_BACAH A0RDQ9 Arginine:ornithine antiporter, APA family...   475   e-162
TR:I0D1S4_BACAN I0D1S4 Arginine/ornithine antiporter OS=Bacillus...   475   e-162
TR:G8U7N2_BACCE G8U7N2 Arginine/ornithine antiporter OS=Bacillus...   475   e-162
TR:C3HI49_BACTU C3HI49 Amino acid permease OS=Bacillus thuringie...   475   e-162
TR:C3G2L3_BACTU C3G2L3 Amino acid permease OS=Bacillus thuringie...   475   e-162
TR:C3F198_BACTU C3F198 Amino acid permease OS=Bacillus thuringie...   475   e-162
TR:C2WZW3_BACCE C2WZW3 Amino acid permease OS=Bacillus cereus Ro...   475   e-162
TR:C2VTC6_BACCE C2VTC6 Amino acid permease OS=Bacillus cereus Ro...   475   e-162
TR:C2UUY2_BACCE C2UUY2 Amino acid permease OS=Bacillus cereus Ro...   475   e-162
TR:C2TX04_BACCE C2TX04 Amino acid permease OS=Bacillus cereus Ro...   475   e-162
TR:C2NHA8_BACCE C2NHA8 Amino acid permease OS=Bacillus cereus GN...   475   e-162
TR:B3ZUR3_BACCE B3ZUR3 Arginine/ornithine antiporter OS=Bacillus...   475   e-162
TR:B3ZA44_BACCE B3ZA44 Arginine/ornithine antiporter OS=Bacillus...   475   e-162
TR:B3YT19_BACCE B3YT19 Arginine/ornithine antiporter OS=Bacillus...   475   e-162
TR:B3J2E5_BACAN B3J2E5 Arginine/ornithine antiporter OS=Bacillus...   475   e-162
TR:B1UIZ0_BACAN B1UIZ0 Arginine/ornithine antiporter OS=Bacillus...   475   e-162
TR:B1GIG1_BACAN B1GIG1 Arginine/ornithine antiporter OS=Bacillus...   475   e-162
TR:B1EZ23_BACAN B1EZ23 Arginine/ornithine antiporter OS=Bacillus...   475   e-162
TR:B0QER5_BACAN B0QER5 Arginine/ornithine antiporter OS=Bacillus...   475   e-162
TR:B0Q3K3_BACAN B0Q3K3 Arginine/ornithine antiporter OS=Bacillus...   475   e-162
TR:B0AQQ3_BACAN B0AQQ3 Arginine/ornithine antiporter OS=Bacillus...   475   e-162
TR:C2QSN6_BACCE C2QSN6 Amino acid permease OS=Bacillus cereus AT...   474   e-162
TR:C2VBF3_BACCE C2VBF3 Amino acid permease OS=Bacillus cereus Ro...   474   e-162
TR:C2QBM9_BACCE C2QBM9 Amino acid permease OS=Bacillus cereus R3...   474   e-162
TR:Q89DW4_BRAJA Q89DW4 Blr7323 protein OS=Bradyrhizobium japonic...   473   e-161
TR:C3C1Z0_BACTU C3C1Z0 Amino acid permease OS=Bacillus thuringie...   473   e-161
TR:C2YRB7_BACCE C2YRB7 Amino acid permease OS=Bacillus cereus AH...   473   e-161
TR:C2PEP3_BACCE C2PEP3 Amino acid permease OS=Bacillus cereus MM...   473   e-161
TR:F4BNN3_CARS1 F4BNN3 Arginine/ornithine antiporter OS=Carnobac...   472   e-161
TR:C3I0D9_BACTU C3I0D9 Amino acid permease OS=Bacillus thuringie...   472   e-161
TR:H0UNX2_9BACT H0UNX2 Arginine/ornithine antiporter (Precursor)...   471   e-161
TR:F0PNA8_BACT0 F0PNA8 Arginine/ornithine antiporter OS=Bacillus...   471   e-161
TR:B7HQ75_BACC7 B7HQ75 Arginine/ornithine antiporter OS=Bacillus...   471   e-161
TR:H0NH12_BACCE H0NH12 Arginine/ornithine antiporter OS=Bacillus...   471   e-161
TR:C3H0M5_BACTU C3H0M5 Amino acid permease OS=Bacillus thuringie...   471   e-161
TR:C3EKD4_BACTK C3EKD4 Amino acid permease OS=Bacillus thuringie...   471   e-161
TR:C2S3B9_BACCE C2S3B9 Amino acid permease OS=Bacillus cereus BD...   471   e-161
TR:C2MKF7_BACCE C2MKF7 Amino acid permease OS=Bacillus cereus m1...   471   e-161
TR:B5V052_BACCE B5V052 Arginine/ornithine antiporter OS=Bacillus...   471   e-161
TR:Q81DW4_BACCR Q81DW4 Arginine/ornithine antiporter OS=Bacillus...   471   e-161
TR:C2YA89_BACCE C2YA89 Amino acid permease OS=Bacillus cereus AH...   471   e-161
TR:C2N0G1_BACCE C2N0G1 Amino acid permease OS=Bacillus cereus AT...   471   e-161
TR:G9Q6G9_9BACI G9Q6G9 Arginine/ornithine antiporter OS=Bacillus...   471   e-161
TR:F2HBX1_BACTU F2HBX1 Arginine/ornithine antiporter OS=Bacillus...   471   e-161
TR:C3FJW1_BACTB C3FJW1 Amino acid permease OS=Bacillus thuringie...   471   e-161
TR:C3E2Z4_BACTU C3E2Z4 Amino acid permease OS=Bacillus thuringie...   471   e-161
TR:C3CIF6_BACTU C3CIF6 Amino acid permease OS=Bacillus thuringie...   471   e-161
TR:C2ZP75_BACCE C2ZP75 Amino acid permease OS=Bacillus cereus AH...   471   e-161
TR:C2Z7K8_BACCE C2Z7K8 Amino acid permease OS=Bacillus cereus AH...   471   e-161
TR:C2XBC9_BACCE C2XBC9 Amino acid permease OS=Bacillus cereus F6...   471   e-161
TR:C2UDF0_BACCE C2UDF0 Amino acid permease OS=Bacillus cereus Ro...   471   e-161
TR:C2T0J2_BACCE C2T0J2 Amino acid permease OS=Bacillus cereus BD...   471   e-161
TR:C2RMN2_BACCE C2RMN2 Amino acid permease OS=Bacillus cereus BD...   471   e-161
TR:C2NYD6_BACCE C2NYD6 Amino acid permease OS=Bacillus cereus 17...   471   e-161
TR:B5UU52_BACCE B5UU52 Arginine/ornithine antiporter OS=Bacillus...   471   e-161
TR:Q738S8_BACC1 Q738S8 Arginine/ornithine antiporter OS=Bacillus...   470   e-161
TR:B7H541_BACC4 B7H541 Arginine/ornithine antiporter OS=Bacillus...   470   e-160
TR:A9VU10_BACWK A9VU10 Arginine/ornithine antiporter OS=Bacillus...   470   e-160
TR:C3BK42_9BACI C3BK42 Amino acid permease OS=Bacillus pseudomyc...   470   e-160
TR:C3B374_BACMY C3B374 Amino acid permease OS=Bacillus mycoides ...   470   e-160
TR:G6XYU7_RHIRD G6XYU7 Arginine/ornithine antiporter OS=Agrobact...   470   e-160
TR:C1ETE6_BACC3 C1ETE6 Arginine/ornithine antiporter OS=Bacillus...   470   e-160
TR:A7GPC0_BACCN A7GPC0 Arginine/ornithine antiporter OS=Bacillus...   470   e-160
TR:C2XTN3_BACCE C2XTN3 Amino acid permease OS=Bacillus cereus AH...   470   e-160
TR:C2SJM9_BACCE C2SJM9 Amino acid permease OS=Bacillus cereus BD...   470   e-160
TR:Q8E2J7_STRA3 Q8E2J7 Putative uncharacterized protein gbs2125 ...   469   e-160
TR:Q8DWP9_STRA5 Q8DWP9 Arginine/ornithine antiporter OS=Streptoc...   469   e-160
TR:Q3DSJ5_STRAG Q3DSJ5 Permease OS=Streptococcus agalactiae 18RS...   469   e-160
TR:Q3DLV8_STRAG Q3DLV8 Arginine/ornithine antiporter OS=Streptoc...   469   e-160
TR:Q3DE03_STRAG Q3DE03 Arginine/ornithine antiporter OS=Streptoc...   469   e-160
TR:G5KGC9_9STRE G5KGC9 Arginine/ornithine antiporter OS=Streptoc...   469   e-160
TR:C3A5H8_BACMY C3A5H8 Amino acid permease OS=Bacillus mycoides ...   469   e-160
TR:C2WM04_BACCE C2WM04 Amino acid permease OS=Bacillus cereus Ro...   469   e-160
TR:C2PVJ4_BACCE C2PVJ4 Amino acid permease OS=Bacillus cereus AH...   469   e-160
TR:G6XYU8_RHIRD G6XYU8 Arginine/ornithine antiporter OS=Agrobact...   469   e-160
TR:F8Y3Z0_STRAG F8Y3Z0 Arginine/ornithine antiporter OS=Streptoc...   469   e-160
TR:C2R7R9_BACCE C2R7R9 Amino acid permease OS=Bacillus cereus m1...   470   e-160
TR:E7S180_STRAG E7S180 APC family arginine/ornithine antiporter ...   469   e-160
TR:F2P8D3_PHOMO F2P8D3 Transporter, basic amino acid/polyamine a...   468   e-160
TR:Q3JYD9_STRA1 Q3JYD9 Arginine/ornithine antiporter OS=Streptoc...   468   e-160
TR:Q3D2U0_STRAG Q3D2U0 Arginine/ornithine antiporter OS=Streptoc...   468   e-160
TR:F9UD11_9GAMM F9UD11 Arginine/ornithine antiporter OS=Thiocaps...   468   e-160
TR:G7VRR7_PAETH G7VRR7 Arginine/ornithine antiporter OS=Paenibac...   468   e-159
TR:H6CLE3_9BACL H6CLE3 Arginine-ornithine antiporter OS=Paenibac...   467   e-159
TR:B7IVB6_BACC2 B7IVB6 Arginine/ornithine antiporter OS=Bacillus...   467   e-159
TR:Q3DBG4_STRAG Q3DBG4 Arginine/ornithine antiporter OS=Streptoc...   467   e-159
TR:C3IJ32_BACTU C3IJ32 Amino acid permease OS=Bacillus thuringie...   467   e-159
TR:C4T4P1_YERIN C4T4P1 Arginine/ornithine antiporter OS=Yersinia...   466   e-159
TR:C3DJC1_BACTS C3DJC1 Amino acid permease OS=Bacillus thuringie...   466   e-159
TR:G9ZV34_9PROT G9ZV34 Arginine/ornithine antiporter OS=Acetobac...   462   e-158
TR:F4FRI9_LACBN F4FRI9 Arginine/ornithine antiporter OS=Lactobac...   464   e-158
TR:Q1Z8U7_PHOPR Q1Z8U7 Putative arginine/ornithine antiporter OS...   463   e-158
TR:D0Z1Z6_LISDA D0Z1Z6 Arginine/ornithine antiporter ArcD OS=Pho...   463   e-158
TR:G9YYR5_9ENTR G9YYR5 Putative arginine/ornithine antiporter OS...   464   e-158
TR:Q1ZR48_PHOAS Q1ZR48 Putative arginine/ornithine antiporter OS...   463   e-158
TR:D5TJF0_BACT1 D5TJF0 Arginine/ornithine antiporter OS=Bacillus...   459   e-156
TR:A9IMZ8_BORPD A9IMZ8 Arginine/ornithine antiporter OS=Bordetel...   459   e-156
TR:C2CZT3_LACBR C2CZT3 APC family amino acid-polyamine-organocat...   458   e-156
TR:C0WNP1_LACBU C0WNP1 APC family amino acid-polyamine-organocat...   458   e-156
TR:Q1ZB11_PHOPR Q1ZB11 Probable amino acid permease OS=Photobact...   457   e-155
TR:H1LKP4_9LACO H1LKP4 Arginine/ornithine antiporter OS=Lactobac...   457   e-155
TR:G4HX25_MYCRH G4HX25 Amino acid permease-associated region OS=...   456   e-155
TR:C4W7K4_STAWA C4W7K4 Arginine/ornithine antiporter OS=Staphylo...   456   e-155
TR:Q4L9J8_STAHJ Q4L9J8 Arginine/oirnithine antiporter OS=Staphyl...   455   e-155
TR:H1M1N9_9BACT H1M1N9 Arginine:ornithine antiporter, APA family...   455   e-155
TR:F3SSN3_STAWA F3SSN3 Arginine/ornithine antiporter OS=Staphylo...   455   e-155
TR:H0F6X4_9BURK H0F6X4 Arginine/ornithine antiporter OS=Achromob...   455   e-155
TR:D3LAQ0_OENOE D3LAQ0 Putative uncharacterized protein OS=Oenoc...   455   e-154
TR:Q6LRT8_PHOPR Q6LRT8 Putative arginine/ornithine antiporter OS...   454   e-154
TR:B8D2J7_HALOH B8D2J7 Arginine/ornithine antiporter OS=Halother...   455   e-154
TR:D7A0X8_STAND D7A0X8 Amino acid permease-associated region OS=...   454   e-154
TR:C1D4N9_LARHH C1D4N9 Probable amino acid permease OS=Laribacte...   452   e-154
TR:Q84DL6_OENOE Q84DL6 Arginine/ornithine antiporter ArcD1 OS=Oe...   452   e-153
TR:Q8CQG6_STAES Q8CQG6 Arginine/oirnithine antiporter OS=Staphyl...   451   e-153
TR:Q2FKJ5_STAA3 Q2FKJ5 Arginine/oirnithine antiporter OS=Staphyl...   451   e-153
TR:A8YYZ0_STAAT A8YYZ0 Arginine/ornithine APC family amino acid-...   451   e-153
TR:I0XJK1_STAAU I0XJK1 Arginine/ornithine antiporter OS=Staphylo...   451   e-153
TR:I0TYV4_STAAU I0TYV4 Arginine/ornithine antiporter OS=Staphylo...   451   e-153
TR:I0TKC2_STAAU I0TKC2 Arginine/ornithine antiporter OS=Staphylo...   451   e-153
TR:H3YMR1_STAAU H3YMR1 Arginine/ornithine antiporter OS=Staphylo...   451   e-153
TR:H3Y577_STAAU H3Y577 Arginine/ornithine antiporter OS=Staphylo...   451   e-153
TR:H3XDG9_STAAU H3XDG9 Arginine/ornithine antiporter OS=Staphylo...   451   e-153
TR:H3WF17_STAEP H3WF17 Arginine/ornithine antiporter OS=Staphylo...   451   e-153
TR:H3VX87_STAEP H3VX87 Arginine/ornithine antiporter OS=Staphylo...   451   e-153
TR:H3VUS4_STAEP H3VUS4 Arginine/ornithine antiporter OS=Staphylo...   451   e-153
TR:H3VEM0_STAEP H3VEM0 Arginine/ornithine antiporter OS=Staphylo...   451   e-153
TR:H3US15_STAEP H3US15 Arginine/ornithine antiporter OS=Staphylo...   451   e-153
TR:H3UNN5_STAEP H3UNN5 Arginine/ornithine antiporter OS=Staphylo...   451   e-153
TR:H3UHR5_STAEP H3UHR5 Arginine/ornithine antiporter OS=Staphylo...   451   e-153
TR:F9LA80_STAEP F9LA80 Arginine/ornithine antiporter OS=Staphylo...   451   e-153
TR:F3TXP5_STAEP F3TXP5 Arginine/ornithine antiporter OS=Staphylo...   451   e-153
TR:F3SV18_STAEP F3SV18 Arginine/ornithine antiporter OS=Staphylo...   451   e-153
TR:E9KNS3_STAAU E9KNS3 Arginine/ornithine antiporter OS=Staphylo...   451   e-153
TR:E5TQT6_STAAU E5TQT6 Arginine/ornithine APC family amino acid-...   451   e-153
TR:D4UA25_STAAU D4UA25 Arginine:ornithine antiporter OS=Staphylo...   451   e-153
TR:C5QAW0_STAEP C5QAW0 Arginine/ornithine APC family amino acid-...   451   e-153
TR:E5CPZ6_9STAP E5CPZ6 Arginine/ornithine antiporter OS=Staphylo...   450   e-152
TR:B5WJH8_9BURK B5WJH8 Spore germination protein OS=Burkholderia...   449   e-152
TR:G5JK32_9STAP G5JK32 Arginine/oirnithine antiporter OS=Staphyl...   449   e-152
TR:A6FHU0_9GAMM A6FHU0 Arginine/ornithine antiporter OS=Moritell...   449   e-152
TR:C5QNI4_STAEP C5QNI4 APC family amino acid-polyamine-organocat...   449   e-152
TR:Q988I0_RHILO Q988I0 Arginine/ornithine antiporter OS=Rhizobiu...   448   e-152
TR:D5WLM7_BURSC D5WLM7 Amino acid permease-associated region OS=...   448   e-152
TR:E5CUH6_9STAP E5CUH6 Arginine/ornithine antiporter OS=Staphylo...   447   e-151
TR:F9L5N1_STACP F9L5N1 Arginine/ornithine antiporter OS=Staphylo...   446   e-151

>SP:ARCD_PSEAE P18275 Arginine/ornithine antiporter OS=Pseudomonas aeruginosa
           (strain ATCC 15692 / PAO1 / 1C / PRS 101 / LMG 12228)
           GN=arcD PE=1 SV=1
          Length = 482

 Score =  944 bits (2441), Expect = 0.0
 Identities = 482/482 (100%), Positives = 482/482 (100%)

Query: 1   MSQESSQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFV 60
           MSQESSQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFV
Sbjct: 1   MSQESSQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFV 60

Query: 61  FQTLANRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPI 120
           FQTLANRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPI
Sbjct: 61  FQTLANRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPI 120

Query: 121 FGKGDTVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLD 180
           FGKGDTVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLD
Sbjct: 121 FGKGDTVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLD 180

Query: 181 IFTADIWGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFI 240
           IFTADIWGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFI
Sbjct: 181 IFTADIWGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFI 240

Query: 241 TVLLLLVLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLS 300
           TVLLLLVLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLS
Sbjct: 241 TVLLLLVLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLS 300

Query: 301 WVLLCAEIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMD 360
           WVLLCAEIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMD
Sbjct: 301 WVLLCAEIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMD 360

Query: 361 PYTKMLLLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLY 420
           PYTKMLLLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLY
Sbjct: 361 PYTKMLLLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLY 420

Query: 421 AGGLKYLLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFL 480
           AGGLKYLLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFL
Sbjct: 421 AGGLKYLLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFL 480

Query: 481 TL 482
           TL
Sbjct: 481 TL 482


>TR:B7V3R5_PSEA8 B7V3R5 Arginine/ornithine antiporter OS=Pseudomonas aeruginosa
           (strain LESB58) GN=arcD PE=4 SV=1
          Length = 482

 Score =  944 bits (2441), Expect = 0.0
 Identities = 482/482 (100%), Positives = 482/482 (100%)

Query: 1   MSQESSQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFV 60
           MSQESSQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFV
Sbjct: 1   MSQESSQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFV 60

Query: 61  FQTLANRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPI 120
           FQTLANRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPI
Sbjct: 61  FQTLANRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPI 120

Query: 121 FGKGDTVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLD 180
           FGKGDTVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLD
Sbjct: 121 FGKGDTVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLD 180

Query: 181 IFTADIWGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFI 240
           IFTADIWGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFI
Sbjct: 181 IFTADIWGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFI 240

Query: 241 TVLLLLVLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLS 300
           TVLLLLVLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLS
Sbjct: 241 TVLLLLVLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLS 300

Query: 301 WVLLCAEIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMD 360
           WVLLCAEIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMD
Sbjct: 301 WVLLCAEIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMD 360

Query: 361 PYTKMLLLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLY 420
           PYTKMLLLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLY
Sbjct: 361 PYTKMLLLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLY 420

Query: 421 AGGLKYLLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFL 480
           AGGLKYLLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFL
Sbjct: 421 AGGLKYLLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFL 480

Query: 481 TL 482
           TL
Sbjct: 481 TL 482


>TR:G2L203_PSEAI G2L203 Arginine/ornithine antiporter OS=Pseudomonas aeruginosa M18
           GN=arcD PE=4 SV=1
          Length = 482

 Score =  944 bits (2441), Expect = 0.0
 Identities = 482/482 (100%), Positives = 482/482 (100%)

Query: 1   MSQESSQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFV 60
           MSQESSQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFV
Sbjct: 1   MSQESSQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFV 60

Query: 61  FQTLANRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPI 120
           FQTLANRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPI
Sbjct: 61  FQTLANRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPI 120

Query: 121 FGKGDTVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLD 180
           FGKGDTVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLD
Sbjct: 121 FGKGDTVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLD 180

Query: 181 IFTADIWGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFI 240
           IFTADIWGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFI
Sbjct: 181 IFTADIWGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFI 240

Query: 241 TVLLLLVLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLS 300
           TVLLLLVLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLS
Sbjct: 241 TVLLLLVLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLS 300

Query: 301 WVLLCAEIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMD 360
           WVLLCAEIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMD
Sbjct: 301 WVLLCAEIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMD 360

Query: 361 PYTKMLLLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLY 420
           PYTKMLLLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLY
Sbjct: 361 PYTKMLLLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLY 420

Query: 421 AGGLKYLLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFL 480
           AGGLKYLLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFL
Sbjct: 421 AGGLKYLLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFL 480

Query: 481 TL 482
           TL
Sbjct: 481 TL 482


>TR:A3L291_PSEAI A3L291 Arginine/ornithine antiporter OS=Pseudomonas aeruginosa
           C3719 GN=PACG_04249 PE=4 SV=1
          Length = 482

 Score =  944 bits (2441), Expect = 0.0
 Identities = 482/482 (100%), Positives = 482/482 (100%)

Query: 1   MSQESSQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFV 60
           MSQESSQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFV
Sbjct: 1   MSQESSQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFV 60

Query: 61  FQTLANRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPI 120
           FQTLANRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPI
Sbjct: 61  FQTLANRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPI 120

Query: 121 FGKGDTVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLD 180
           FGKGDTVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLD
Sbjct: 121 FGKGDTVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLD 180

Query: 181 IFTADIWGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFI 240
           IFTADIWGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFI
Sbjct: 181 IFTADIWGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFI 240

Query: 241 TVLLLLVLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLS 300
           TVLLLLVLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLS
Sbjct: 241 TVLLLLVLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLS 300

Query: 301 WVLLCAEIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMD 360
           WVLLCAEIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMD
Sbjct: 301 WVLLCAEIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMD 360

Query: 361 PYTKMLLLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLY 420
           PYTKMLLLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLY
Sbjct: 361 PYTKMLLLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLY 420

Query: 421 AGGLKYLLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFL 480
           AGGLKYLLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFL
Sbjct: 421 AGGLKYLLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFL 480

Query: 481 TL 482
           TL
Sbjct: 481 TL 482


>TR:Q02EJ5_PSEAB Q02EJ5 Arginine/ornithine antiporter OS=Pseudomonas aeruginosa
           (strain UCBPP-PA14) GN=arcD PE=4 SV=1
          Length = 482

 Score =  942 bits (2436), Expect = 0.0
 Identities = 480/482 (99%), Positives = 481/482 (99%)

Query: 1   MSQESSQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFV 60
           MSQESSQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFV
Sbjct: 1   MSQESSQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFV 60

Query: 61  FQTLANRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPI 120
           FQTLANRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPI
Sbjct: 61  FQTLANRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPI 120

Query: 121 FGKGDTVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLD 180
           FGKGDTVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAK+VPLFLFILICLFAFKLD
Sbjct: 121 FGKGDTVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKIVPLFLFILICLFAFKLD 180

Query: 181 IFTADIWGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFI 240
           IFTADIWGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFI
Sbjct: 181 IFTADIWGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFI 240

Query: 241 TVLLLLVLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLS 300
           TVLLLLVLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLS
Sbjct: 241 TVLLLLVLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLS 300

Query: 301 WVLLCAEIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMD 360
           WVLLCAEIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMD
Sbjct: 301 WVLLCAEIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMD 360

Query: 361 PYTKMLLLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLY 420
           PYTKMLLLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAV YAVWLLY
Sbjct: 361 PYTKMLLLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVVYAVWLLY 420

Query: 421 AGGLKYLLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFL 480
           AGGLKYLLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFL
Sbjct: 421 AGGLKYLLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFL 480

Query: 481 TL 482
           TL
Sbjct: 481 TL 482


>TR:A3LIV9_PSEAI A3LIV9 Arginine/ornithine antiporter OS=Pseudomonas aeruginosa 2192
           GN=PA2G_04779 PE=4 SV=1
          Length = 482

 Score =  942 bits (2436), Expect = 0.0
 Identities = 480/482 (99%), Positives = 481/482 (99%)

Query: 1   MSQESSQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFV 60
           MSQESSQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFV
Sbjct: 1   MSQESSQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFV 60

Query: 61  FQTLANRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPI 120
           FQTLANRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPI
Sbjct: 61  FQTLANRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPI 120

Query: 121 FGKGDTVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLD 180
           FGKGDTVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAK+VPLFLFILICLFAFKLD
Sbjct: 121 FGKGDTVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKIVPLFLFILICLFAFKLD 180

Query: 181 IFTADIWGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFI 240
           IFTADIWGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFI
Sbjct: 181 IFTADIWGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFI 240

Query: 241 TVLLLLVLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLS 300
           TVLLLLVLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLS
Sbjct: 241 TVLLLLVLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLS 300

Query: 301 WVLLCAEIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMD 360
           WVLLCAEIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMD
Sbjct: 301 WVLLCAEIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMD 360

Query: 361 PYTKMLLLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLY 420
           PYTKMLLLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAV YAVWLLY
Sbjct: 361 PYTKMLLLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVVYAVWLLY 420

Query: 421 AGGLKYLLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFL 480
           AGGLKYLLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFL
Sbjct: 421 AGGLKYLLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFL 480

Query: 481 TL 482
           TL
Sbjct: 481 TL 482


>TR:G5FSD6_9PSED G5FSD6 Arginine/ornithine antiporter OS=Pseudomonas sp. 2_1_26
           GN=HMPREF1030_02389 PE=4 SV=1
          Length = 482

 Score =  941 bits (2432), Expect = 0.0
 Identities = 479/482 (99%), Positives = 480/482 (99%)

Query: 1   MSQESSQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFV 60
           MSQESSQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFV
Sbjct: 1   MSQESSQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFV 60

Query: 61  FQTLANRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPI 120
           FQTLANRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPI
Sbjct: 61  FQTLANRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPI 120

Query: 121 FGKGDTVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLD 180
           FGKGDTVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAK+VPLFLFILICLFAFKLD
Sbjct: 121 FGKGDTVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKIVPLFLFILICLFAFKLD 180

Query: 181 IFTADIWGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFI 240
           IFTADIWGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFI
Sbjct: 181 IFTADIWGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFI 240

Query: 241 TVLLLLVLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLS 300
           TVLLLLVLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLS
Sbjct: 241 TVLLLLVLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLS 300

Query: 301 WVLLCAEIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMD 360
           WVLLCAEIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMD
Sbjct: 301 WVLLCAEIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMD 360

Query: 361 PYTKMLLLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLY 420
           PYTKMLLLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAV YAVWLLY
Sbjct: 361 PYTKMLLLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVVYAVWLLY 420

Query: 421 AGGLKYLLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFL 480
           AGGLKYLLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALV AYGLYDGFL
Sbjct: 421 AGGLKYLLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVGAYGLYDGFL 480

Query: 481 TL 482
           TL
Sbjct: 481 TL 482


>TR:A6VDU2_PSEA7 A6VDU2 Arginine/ornithine antiporter OS=Pseudomonas aeruginosa
           (strain PA7) GN=arcD PE=4 SV=1
          Length = 482

 Score =  940 bits (2429), Expect = 0.0
 Identities = 477/482 (98%), Positives = 481/482 (99%)

Query: 1   MSQESSQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFV 60
           MSQE+SQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFV
Sbjct: 1   MSQEASQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFV 60

Query: 61  FQTLANRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPI 120
           FQTLANRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPI
Sbjct: 61  FQTLANRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPI 120

Query: 121 FGKGDTVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLD 180
           FGKGDTVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLD
Sbjct: 121 FGKGDTVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLD 180

Query: 181 IFTADIWGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFI 240
           IFTADIWGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFI
Sbjct: 181 IFTADIWGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFI 240

Query: 241 TVLLLLVLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLS 300
           TVLLLLVLVNVLSMGVMTQPELAKLQNPSMALVLEH+VGHWGAVLISVGLL+SLLGALLS
Sbjct: 241 TVLLLLVLVNVLSMGVMTQPELAKLQNPSMALVLEHIVGHWGAVLISVGLLVSLLGALLS 300

Query: 301 WVLLCAEIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMD 360
           WVLLCAEIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMD
Sbjct: 301 WVLLCAEIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMD 360

Query: 361 PYTKMLLLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLY 420
           PYTKMLLLATSMILIPYFWSAAYGLLLTLKGETYEND+RER KDLVIAGIAVAYAVWLLY
Sbjct: 361 PYTKMLLLATSMILIPYFWSAAYGLLLTLKGETYENDSRERGKDLVIAGIAVAYAVWLLY 420

Query: 421 AGGLKYLLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFL 480
           AGGLKYLLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFL
Sbjct: 421 AGGLKYLLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFL 480

Query: 481 TL 482
           TL
Sbjct: 481 TL 482


>TR:I1AB59_PSEAI I1AB59 Arginine/ornithine antiporter OS=Pseudomonas aeruginosa
           PADK2_CF510 GN=CF510_24854 PE=4 SV=1
          Length = 461

 Score =  908 bits (2346), Expect = 0.0
 Identities = 461/461 (100%), Positives = 461/461 (100%)

Query: 22  MIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLANRKPELDGGVYAYAKA 81
           MIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLANRKPELDGGVYAYAKA
Sbjct: 1   MIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLANRKPELDGGVYAYAKA 60

Query: 82  GFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDTVAAIVCASVLLWALH 141
           GFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDTVAAIVCASVLLWALH
Sbjct: 61  GFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDTVAAIVCASVLLWALH 120

Query: 142 FLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTADIWGKSNPDLGSVMNQV 201
           FLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTADIWGKSNPDLGSVMNQV
Sbjct: 121 FLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTADIWGKSNPDLGSVMNQV 180

Query: 202 RNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLLLVLVNVLSMGVMTQPE 261
           RNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLLLVLVNVLSMGVMTQPE
Sbjct: 181 RNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLLLVLVNVLSMGVMTQPE 240

Query: 262 LAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLCAEIMFAAAKDHTMPEF 321
           LAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLCAEIMFAAAKDHTMPEF
Sbjct: 241 LAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLCAEIMFAAAKDHTMPEF 300

Query: 322 LRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKMLLLATSMILIPYFWSA 381
           LRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKMLLLATSMILIPYFWSA
Sbjct: 301 LRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKMLLLATSMILIPYFWSA 360

Query: 382 AYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYAGGLKYLLLSALLYAPGAILF 441
           AYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYAGGLKYLLLSALLYAPGAILF
Sbjct: 361 AYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYAGGLKYLLLSALLYAPGAILF 420

Query: 442 AKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           AKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL
Sbjct: 421 AKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 461


>TR:H3THE1_PSEAE H3THE1 Arginine/ornithine antiporter OS=Pseudomonas aeruginosa
           MPAO1/P2 GN=O1Q_18692 PE=4 SV=1
          Length = 461

 Score =  908 bits (2346), Expect = 0.0
 Identities = 461/461 (100%), Positives = 461/461 (100%)

Query: 22  MIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLANRKPELDGGVYAYAKA 81
           MIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLANRKPELDGGVYAYAKA
Sbjct: 1   MIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLANRKPELDGGVYAYAKA 60

Query: 82  GFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDTVAAIVCASVLLWALH 141
           GFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDTVAAIVCASVLLWALH
Sbjct: 61  GFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDTVAAIVCASVLLWALH 120

Query: 142 FLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTADIWGKSNPDLGSVMNQV 201
           FLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTADIWGKSNPDLGSVMNQV
Sbjct: 121 FLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTADIWGKSNPDLGSVMNQV 180

Query: 202 RNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLLLVLVNVLSMGVMTQPE 261
           RNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLLLVLVNVLSMGVMTQPE
Sbjct: 181 RNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLLLVLVNVLSMGVMTQPE 240

Query: 262 LAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLCAEIMFAAAKDHTMPEF 321
           LAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLCAEIMFAAAKDHTMPEF
Sbjct: 241 LAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLCAEIMFAAAKDHTMPEF 300

Query: 322 LRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKMLLLATSMILIPYFWSA 381
           LRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKMLLLATSMILIPYFWSA
Sbjct: 301 LRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKMLLLATSMILIPYFWSA 360

Query: 382 AYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYAGGLKYLLLSALLYAPGAILF 441
           AYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYAGGLKYLLLSALLYAPGAILF
Sbjct: 361 AYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYAGGLKYLLLSALLYAPGAILF 420

Query: 442 AKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           AKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL
Sbjct: 421 AKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 461


>TR:H3T0K1_PSEAE H3T0K1 Arginine/ornithine antiporter OS=Pseudomonas aeruginosa
           MPAO1/P1 GN=O1O_18174 PE=4 SV=1
          Length = 461

 Score =  908 bits (2346), Expect = 0.0
 Identities = 461/461 (100%), Positives = 461/461 (100%)

Query: 22  MIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLANRKPELDGGVYAYAKA 81
           MIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLANRKPELDGGVYAYAKA
Sbjct: 1   MIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLANRKPELDGGVYAYAKA 60

Query: 82  GFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDTVAAIVCASVLLWALH 141
           GFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDTVAAIVCASVLLWALH
Sbjct: 61  GFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDTVAAIVCASVLLWALH 120

Query: 142 FLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTADIWGKSNPDLGSVMNQV 201
           FLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTADIWGKSNPDLGSVMNQV
Sbjct: 121 FLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTADIWGKSNPDLGSVMNQV 180

Query: 202 RNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLLLVLVNVLSMGVMTQPE 261
           RNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLLLVLVNVLSMGVMTQPE
Sbjct: 181 RNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLLLVLVNVLSMGVMTQPE 240

Query: 262 LAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLCAEIMFAAAKDHTMPEF 321
           LAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLCAEIMFAAAKDHTMPEF
Sbjct: 241 LAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLCAEIMFAAAKDHTMPEF 300

Query: 322 LRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKMLLLATSMILIPYFWSA 381
           LRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKMLLLATSMILIPYFWSA
Sbjct: 301 LRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKMLLLATSMILIPYFWSA 360

Query: 382 AYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYAGGLKYLLLSALLYAPGAILF 441
           AYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYAGGLKYLLLSALLYAPGAILF
Sbjct: 361 AYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYAGGLKYLLLSALLYAPGAILF 420

Query: 442 AKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           AKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL
Sbjct: 421 AKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 461


>TR:F5K1D3_PSEAI F5K1D3 Arginine/ornithine antiporter OS=Pseudomonas aeruginosa
           138244 GN=PA13_09374 PE=4 SV=1
          Length = 461

 Score =  908 bits (2346), Expect = 0.0
 Identities = 461/461 (100%), Positives = 461/461 (100%)

Query: 22  MIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLANRKPELDGGVYAYAKA 81
           MIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLANRKPELDGGVYAYAKA
Sbjct: 1   MIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLANRKPELDGGVYAYAKA 60

Query: 82  GFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDTVAAIVCASVLLWALH 141
           GFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDTVAAIVCASVLLWALH
Sbjct: 61  GFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDTVAAIVCASVLLWALH 120

Query: 142 FLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTADIWGKSNPDLGSVMNQV 201
           FLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTADIWGKSNPDLGSVMNQV
Sbjct: 121 FLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTADIWGKSNPDLGSVMNQV 180

Query: 202 RNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLLLVLVNVLSMGVMTQPE 261
           RNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLLLVLVNVLSMGVMTQPE
Sbjct: 181 RNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLLLVLVNVLSMGVMTQPE 240

Query: 262 LAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLCAEIMFAAAKDHTMPEF 321
           LAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLCAEIMFAAAKDHTMPEF
Sbjct: 241 LAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLCAEIMFAAAKDHTMPEF 300

Query: 322 LRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKMLLLATSMILIPYFWSA 381
           LRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKMLLLATSMILIPYFWSA
Sbjct: 301 LRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKMLLLATSMILIPYFWSA 360

Query: 382 AYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYAGGLKYLLLSALLYAPGAILF 441
           AYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYAGGLKYLLLSALLYAPGAILF
Sbjct: 361 AYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYAGGLKYLLLSALLYAPGAILF 420

Query: 442 AKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           AKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL
Sbjct: 421 AKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 461


>TR:G4LIK7_PSEAI G4LIK7 Arginine/ornithine antiporter OS=Pseudomonas aeruginosa
           NCGM2.S1 GN=arcD PE=4 SV=1
          Length = 461

 Score =  906 bits (2341), Expect = 0.0
 Identities = 459/461 (99%), Positives = 460/461 (99%)

Query: 22  MIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLANRKPELDGGVYAYAKA 81
           MIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLANRKPELDGGVYAYAKA
Sbjct: 1   MIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLANRKPELDGGVYAYAKA 60

Query: 82  GFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDTVAAIVCASVLLWALH 141
           GFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDTVAAIVCASVLLWALH
Sbjct: 61  GFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDTVAAIVCASVLLWALH 120

Query: 142 FLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTADIWGKSNPDLGSVMNQV 201
           FLVLRGIKEAAFINTVTTVAK+VPLFLFILICLFAFKLDIFTADIWGKSNPDLGSVMNQV
Sbjct: 121 FLVLRGIKEAAFINTVTTVAKIVPLFLFILICLFAFKLDIFTADIWGKSNPDLGSVMNQV 180

Query: 202 RNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLLLVLVNVLSMGVMTQPE 261
           RNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLLLVLVNVLSMGVMTQPE
Sbjct: 181 RNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLLLVLVNVLSMGVMTQPE 240

Query: 262 LAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLCAEIMFAAAKDHTMPEF 321
           LAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLCAEIMFAAAKDHTMPEF
Sbjct: 241 LAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLCAEIMFAAAKDHTMPEF 300

Query: 322 LRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKMLLLATSMILIPYFWSA 381
           LRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKMLLLATSMILIPYFWSA
Sbjct: 301 LRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKMLLLATSMILIPYFWSA 360

Query: 382 AYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYAGGLKYLLLSALLYAPGAILF 441
           AYGLLLTLKGETYENDARERSKDLVIAGIAV YAVWLLYAGGLKYLLLSALLYAPGAILF
Sbjct: 361 AYGLLLTLKGETYENDARERSKDLVIAGIAVVYAVWLLYAGGLKYLLLSALLYAPGAILF 420

Query: 442 AKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           AKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL
Sbjct: 421 AKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 461


>TR:F5KVF1_PSEAI F5KVF1 Arginine/ornithine antiporter OS=Pseudomonas aeruginosa
           152504 GN=PA15_29156 PE=4 SV=1
          Length = 461

 Score =  906 bits (2341), Expect = 0.0
 Identities = 459/461 (99%), Positives = 460/461 (99%)

Query: 22  MIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLANRKPELDGGVYAYAKA 81
           MIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLANRKPELDGGVYAYAKA
Sbjct: 1   MIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLANRKPELDGGVYAYAKA 60

Query: 82  GFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDTVAAIVCASVLLWALH 141
           GFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDTVAAIVCASVLLWALH
Sbjct: 61  GFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDTVAAIVCASVLLWALH 120

Query: 142 FLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTADIWGKSNPDLGSVMNQV 201
           FLVLRGIKEAAFINTVTTVAK+VPLFLFILICLFAFKLDIFTADIWGKSNPDLGSVMNQV
Sbjct: 121 FLVLRGIKEAAFINTVTTVAKIVPLFLFILICLFAFKLDIFTADIWGKSNPDLGSVMNQV 180

Query: 202 RNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLLLVLVNVLSMGVMTQPE 261
           RNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLLLVLVNVLSMGVMTQPE
Sbjct: 181 RNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLLLVLVNVLSMGVMTQPE 240

Query: 262 LAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLCAEIMFAAAKDHTMPEF 321
           LAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLCAEIMFAAAKDHTMPEF
Sbjct: 241 LAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLCAEIMFAAAKDHTMPEF 300

Query: 322 LRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKMLLLATSMILIPYFWSA 381
           LRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKMLLLATSMILIPYFWSA
Sbjct: 301 LRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKMLLLATSMILIPYFWSA 360

Query: 382 AYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYAGGLKYLLLSALLYAPGAILF 441
           AYGLLLTLKGETYENDARERSKDLVIAGIAV YAVWLLYAGGLKYLLLSALLYAPGAILF
Sbjct: 361 AYGLLLTLKGETYENDARERSKDLVIAGIAVVYAVWLLYAGGLKYLLLSALLYAPGAILF 420

Query: 442 AKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           AKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL
Sbjct: 421 AKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 461


>TR:G2U651_PSEAI G2U651 Arginine/ornithine antiporter OS=Pseudomonas aeruginosa
           NCMG1179 GN=arcD PE=4 SV=1
          Length = 449

 Score =  884 bits (2283), Expect = 0.0
 Identities = 449/449 (100%), Positives = 449/449 (100%)

Query: 34  MAASADVGAVLIGWAITAVGMLTLAFVFQTLANRKPELDGGVYAYAKAGFGDYMGFSSAW 93
           MAASADVGAVLIGWAITAVGMLTLAFVFQTLANRKPELDGGVYAYAKAGFGDYMGFSSAW
Sbjct: 1   MAASADVGAVLIGWAITAVGMLTLAFVFQTLANRKPELDGGVYAYAKAGFGDYMGFSSAW 60

Query: 94  GYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDTVAAIVCASVLLWALHFLVLRGIKEAAF 153
           GYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDTVAAIVCASVLLWALHFLVLRGIKEAAF
Sbjct: 61  GYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDTVAAIVCASVLLWALHFLVLRGIKEAAF 120

Query: 154 INTVTTVAKVVPLFLFILICLFAFKLDIFTADIWGKSNPDLGSVMNQVRNMMLVTVWVFI 213
           INTVTTVAKVVPLFLFILICLFAFKLDIFTADIWGKSNPDLGSVMNQVRNMMLVTVWVFI
Sbjct: 121 INTVTTVAKVVPLFLFILICLFAFKLDIFTADIWGKSNPDLGSVMNQVRNMMLVTVWVFI 180

Query: 214 GIEGASIFSSRAEKRSDVGKATVIGFITVLLLLVLVNVLSMGVMTQPELAKLQNPSMALV 273
           GIEGASIFSSRAEKRSDVGKATVIGFITVLLLLVLVNVLSMGVMTQPELAKLQNPSMALV
Sbjct: 181 GIEGASIFSSRAEKRSDVGKATVIGFITVLLLLVLVNVLSMGVMTQPELAKLQNPSMALV 240

Query: 274 LEHVVGHWGAVLISVGLLISLLGALLSWVLLCAEIMFAAAKDHTMPEFLRRENANQVPAN 333
           LEHVVGHWGAVLISVGLLISLLGALLSWVLLCAEIMFAAAKDHTMPEFLRRENANQVPAN
Sbjct: 241 LEHVVGHWGAVLISVGLLISLLGALLSWVLLCAEIMFAAAKDHTMPEFLRRENANQVPAN 300

Query: 334 ALWLTNICVQVFLVVVFFTSGDPDGMDPYTKMLLLATSMILIPYFWSAAYGLLLTLKGET 393
           ALWLTNICVQVFLVVVFFTSGDPDGMDPYTKMLLLATSMILIPYFWSAAYGLLLTLKGET
Sbjct: 301 ALWLTNICVQVFLVVVFFTSGDPDGMDPYTKMLLLATSMILIPYFWSAAYGLLLTLKGET 360

Query: 394 YENDARERSKDLVIAGIAVAYAVWLLYAGGLKYLLLSALLYAPGAILFAKAKHEVGQPIF 453
           YENDARERSKDLVIAGIAVAYAVWLLYAGGLKYLLLSALLYAPGAILFAKAKHEVGQPIF
Sbjct: 361 YENDARERSKDLVIAGIAVAYAVWLLYAGGLKYLLLSALLYAPGAILFAKAKHEVGQPIF 420

Query: 454 TGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           TGIEKLIFAAVVIGALVAAYGLYDGFLTL
Sbjct: 421 TGIEKLIFAAVVIGALVAAYGLYDGFLTL 449


>TR:E3A1E6_PSEAI E3A1E6 Arginine/ornithine antiporter OS=Pseudomonas aeruginosa
           39016 GN=PA39016_002290013 PE=4 SV=1
          Length = 449

 Score =  882 bits (2278), Expect = 0.0
 Identities = 447/449 (99%), Positives = 448/449 (99%)

Query: 34  MAASADVGAVLIGWAITAVGMLTLAFVFQTLANRKPELDGGVYAYAKAGFGDYMGFSSAW 93
           MAASADVGAVLIGWAITAVGMLTLAFVFQTLANRKPELDGGVYAYAKAGFGDYMGFSSAW
Sbjct: 1   MAASADVGAVLIGWAITAVGMLTLAFVFQTLANRKPELDGGVYAYAKAGFGDYMGFSSAW 60

Query: 94  GYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDTVAAIVCASVLLWALHFLVLRGIKEAAF 153
           GYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDTVAAIVCASVLLWALHFLVLRGIKEAAF
Sbjct: 61  GYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDTVAAIVCASVLLWALHFLVLRGIKEAAF 120

Query: 154 INTVTTVAKVVPLFLFILICLFAFKLDIFTADIWGKSNPDLGSVMNQVRNMMLVTVWVFI 213
           INTVTTVAK+VPLFLFILICLFAFKLDIFTADIWGKSNPDLGSVMNQVRNMMLVTVWVFI
Sbjct: 121 INTVTTVAKIVPLFLFILICLFAFKLDIFTADIWGKSNPDLGSVMNQVRNMMLVTVWVFI 180

Query: 214 GIEGASIFSSRAEKRSDVGKATVIGFITVLLLLVLVNVLSMGVMTQPELAKLQNPSMALV 273
           GIEGASIFSSRAEKRSDVGKATVIGFITVLLLLVLVNVLSMGVMTQPELAKLQNPSMALV
Sbjct: 181 GIEGASIFSSRAEKRSDVGKATVIGFITVLLLLVLVNVLSMGVMTQPELAKLQNPSMALV 240

Query: 274 LEHVVGHWGAVLISVGLLISLLGALLSWVLLCAEIMFAAAKDHTMPEFLRRENANQVPAN 333
           LEHVVGHWGAVLISVGLLISLLGALLSWVLLCAEIMFAAAKDHTMPEFLRRENANQVPAN
Sbjct: 241 LEHVVGHWGAVLISVGLLISLLGALLSWVLLCAEIMFAAAKDHTMPEFLRRENANQVPAN 300

Query: 334 ALWLTNICVQVFLVVVFFTSGDPDGMDPYTKMLLLATSMILIPYFWSAAYGLLLTLKGET 393
           ALWLTNICVQVFLVVVFFTSGDPDGMDPYTKMLLLATSMILIPYFWSAAYGLLLTLKGET
Sbjct: 301 ALWLTNICVQVFLVVVFFTSGDPDGMDPYTKMLLLATSMILIPYFWSAAYGLLLTLKGET 360

Query: 394 YENDARERSKDLVIAGIAVAYAVWLLYAGGLKYLLLSALLYAPGAILFAKAKHEVGQPIF 453
           YENDARERSKDLVIAGIAV YAVWLLYAGGLKYLLLSALLYAPGAILFAKAKHEVGQPIF
Sbjct: 361 YENDARERSKDLVIAGIAVVYAVWLLYAGGLKYLLLSALLYAPGAILFAKAKHEVGQPIF 420

Query: 454 TGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           TGIEKLIFAAVVIGALVAAYGLYDGFLTL
Sbjct: 421 TGIEKLIFAAVVIGALVAAYGLYDGFLTL 449


>TR:B1JDK5_PSEPW B1JDK5 Arginine/ornithine antiporter (Precursor) OS=Pseudomonas
           putida (strain W619) GN=PputW619_4222 PE=4 SV=1
          Length = 475

 Score =  813 bits (2100), Expect = 0.0
 Identities = 411/479 (85%), Positives = 439/479 (91%), Gaps = 6/479 (1%)

Query: 4   ESSQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQT 63
           +SS KL+LGAL ALVVGSMIGGGIFSLPQNMAASA VGAVLIGWAITAVGMLTLAFVFQT
Sbjct: 3   DSSGKLKLGALVALVVGSMIGGGIFSLPQNMAASAGVGAVLIGWAITAVGMLTLAFVFQT 62

Query: 64  LANRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGK 123
           LANRKP+LDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFG+
Sbjct: 63  LANRKPDLDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGE 122

Query: 124 GDTVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFT 183
           G+T AAI+ ASVLLWA+HFLVLRGIKEAAFIN VTTVAKVVPL LF LIC+FAF+LDIFT
Sbjct: 123 GNTPAAIIGASVLLWAVHFLVLRGIKEAAFINLVTTVAKVVPLVLFALICVFAFRLDIFT 182

Query: 184 ADIWGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVL 243
           ADIW    P+LGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKR+DVGKATVIGFITVL
Sbjct: 183 ADIWATGTPELGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRADVGKATVIGFITVL 242

Query: 244 LLLVLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVL 303
           L LVLVNVLS+GVMTQPELAKLQNPSMA VLEHVVGHWGAVLISVGL+ISLLGALLSWVL
Sbjct: 243 LFLVLVNVLSLGVMTQPELAKLQNPSMAAVLEHVVGHWGAVLISVGLIISLLGALLSWVL 302

Query: 304 LCAEIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYT 363
           LCAEIMFAAAKDHTMPEFLRRENANQVPANALWLTN  VQ+FLV+  F++        Y 
Sbjct: 303 LCAEIMFAAAKDHTMPEFLRRENANQVPANALWLTNAMVQIFLVITLFSA------STYL 356

Query: 364 KMLLLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYAGG 423
            ++ LATSMIL+PY WSAAYG LL ++GETYE  ARERSKDL+I  IA+ YA+WLLYAGG
Sbjct: 357 SLIYLATSMILVPYLWSAAYGFLLAMRGETYEQAARERSKDLLIGAIALIYAIWLLYAGG 416

Query: 424 LKYLLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           +KYLLLSALLYAPG ILFAKAK E+GQPIFT +EKLIFAAVVIGALVAAYGLYDGFLTL
Sbjct: 417 MKYLLLSALLYAPGVILFAKAKREIGQPIFTNVEKLIFAAVVIGALVAAYGLYDGFLTL 475


>TR:E2XX06_PSEFL E2XX06 Arginine/ornithine antiporter OS=Pseudomonas fluorescens WH6
           GN=arcD PE=4 SV=1
          Length = 475

 Score =  810 bits (2091), Expect = 0.0
 Identities = 408/479 (85%), Positives = 438/479 (91%), Gaps = 6/479 (1%)

Query: 4   ESSQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQT 63
           ES  KLRLGAL ALVVGSMIGGGIFSLPQNMAASADVGAVLIGW ITAVGMLTLAFVFQT
Sbjct: 3   ESCGKLRLGALVALVVGSMIGGGIFSLPQNMAASADVGAVLIGWVITAVGMLTLAFVFQT 62

Query: 64  LANRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGK 123
           LANRKP+LDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFG+
Sbjct: 63  LANRKPDLDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGE 122

Query: 124 GDTVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFT 183
           G+T AA++ ASVLLWA+HFLVLRGIKEAAFIN VTTVAKVVPL LF+LI +FAFKL+IFT
Sbjct: 123 GNTPAAVIGASVLLWAVHFLVLRGIKEAAFINLVTTVAKVVPLVLFVLIAVFAFKLEIFT 182

Query: 184 ADIWGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVL 243
           ADIWG  NPDLGSVMNQVRNMMLVTVWVFIGIEGASIFS+RAEKRSDVGKATVIGFITVL
Sbjct: 183 ADIWGVKNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSARAEKRSDVGKATVIGFITVL 242

Query: 244 LLLVLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVL 303
           L L+LVNVLS+G+MTQPELAKLQNPSMA VLEHVVGHWGAVLISVGL++SLLGALLSWVL
Sbjct: 243 LFLMLVNVLSLGIMTQPELAKLQNPSMAAVLEHVVGHWGAVLISVGLIVSLLGALLSWVL 302

Query: 304 LCAEIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYT 363
           LCAEIMFAAAKDHTMPEFLR+ENAN VPANALWLTN  VQVFLV+  F++        Y 
Sbjct: 303 LCAEIMFAAAKDHTMPEFLRKENANHVPANALWLTNAMVQVFLVITLFSA------STYL 356

Query: 364 KMLLLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYAGG 423
            ++ LATSMIL+PY WSAAY LLL ++GETYEN  +ER KDL I  +A+ YAVWLLYAGG
Sbjct: 357 SLIYLATSMILVPYLWSAAYALLLAVRGETYENALKERRKDLFIGAVALIYAVWLLYAGG 416

Query: 424 LKYLLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
            KYLLLSALLYAPGAILFAKAKHE+G+PIFT +EKLIFAAVVIGALVAAYGLYDGFLTL
Sbjct: 417 TKYLLLSALLYAPGAILFAKAKHELGKPIFTNVEKLIFAAVVIGALVAAYGLYDGFLTL 475


>TR:F0E4A3_9PSED F0E4A3 Arginine/ornithine antiporter OS=Pseudomonas sp. TJI-51
           GN=G1E_11725 PE=4 SV=1
          Length = 475

 Score =  808 bits (2088), Expect = 0.0
 Identities = 409/479 (85%), Positives = 436/479 (91%), Gaps = 6/479 (1%)

Query: 4   ESSQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQT 63
           +SS KL+LGAL ALVVGSMIGGGIFSLPQNMAASA VGAVLIGWAITAVGMLTLAFVFQT
Sbjct: 3   DSSGKLKLGALVALVVGSMIGGGIFSLPQNMAASAGVGAVLIGWAITAVGMLTLAFVFQT 62

Query: 64  LANRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGK 123
           LANRKP+LDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFP+FG+
Sbjct: 63  LANRKPDLDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPVFGE 122

Query: 124 GDTVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFT 183
           G+T AAI+ AS+LLWA+HFLVLRGIKEAAFIN VTTVAKVVPL LF LICLFAFKLDIFT
Sbjct: 123 GNTPAAIIGASLLLWAVHFLVLRGIKEAAFINLVTTVAKVVPLVLFALICLFAFKLDIFT 182

Query: 184 ADIWGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVL 243
           ADIWG+  P+LGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKR+DVGKATVIGF+TVL
Sbjct: 183 ADIWGRGTPELGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRADVGKATVIGFVTVL 242

Query: 244 LLLVLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVL 303
           L LVLVNVLS+G+MTQPELAKLQNPSMA VLEHVVGHWGAVLISVGL+ISLLGALLSWVL
Sbjct: 243 LFLVLVNVLSLGIMTQPELAKLQNPSMAAVLEHVVGHWGAVLISVGLIISLLGALLSWVL 302

Query: 304 LCAEIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYT 363
           LCAEIMFAAAKDHTMP FLRRENANQVPANALWLTN  VQVFLV+  F+S        Y 
Sbjct: 303 LCAEIMFAAAKDHTMPAFLRRENANQVPANALWLTNAMVQVFLVITLFSS------STYL 356

Query: 364 KMLLLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYAGG 423
            ++ LATSMIL+PY WSAAY  LL L+ ETYE    ER KDL+I  IA+ YA+WLLYAGG
Sbjct: 357 SLIYLATSMILVPYLWSAAYAFLLALRSETYEQALAERKKDLIIGAIALLYAIWLLYAGG 416

Query: 424 LKYLLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           +KYLLLSALLYAPGAILFAKAK EVGQPIFT +EKLIFAAVVIGALVAAYGLYDGFLTL
Sbjct: 417 VKYLLLSALLYAPGAILFAKAKREVGQPIFTNVEKLIFAAVVIGALVAAYGLYDGFLTL 475


>TR:I2BQY9_PSEFL I2BQY9 Arginine/ornithine antiporter OS=Pseudomonas fluorescens
           A506 GN=arcD PE=4 SV=1
          Length = 475

 Score =  806 bits (2082), Expect = 0.0
 Identities = 405/479 (84%), Positives = 435/479 (90%), Gaps = 6/479 (1%)

Query: 4   ESSQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQT 63
           E+  KLRLGAL ALVVGSMIGGGIFSLPQNMAASADVGAVLIGW ITA+GMLTLAFVFQT
Sbjct: 3   ETPGKLRLGALVALVVGSMIGGGIFSLPQNMAASADVGAVLIGWVITAIGMLTLAFVFQT 62

Query: 64  LANRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGK 123
           LANRKP+LDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFP+FG+
Sbjct: 63  LANRKPDLDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPVFGE 122

Query: 124 GDTVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFT 183
           G+T  A++ ASVLLWA+HFLVLRGIKEAAFIN VTTVAKVVPL LF+LI LFAFKLDIFT
Sbjct: 123 GNTPTAVIAASVLLWAVHFLVLRGIKEAAFINLVTTVAKVVPLLLFVLIALFAFKLDIFT 182

Query: 184 ADIWGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVL 243
           ADIWG  NPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVL
Sbjct: 183 ADIWGVKNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVL 242

Query: 244 LLLVLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVL 303
           L L+LVNVLS+G+MTQPELAKLQNPSMA VLEHVVGHWGAVLISVGL+ISLLGALLSWVL
Sbjct: 243 LFLMLVNVLSLGIMTQPELAKLQNPSMAAVLEHVVGHWGAVLISVGLIISLLGALLSWVL 302

Query: 304 LCAEIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYT 363
           LCAEIMFAAAKDHTMPEFLR+ENAN VP NALWLTN  VQ+FLV+  F++        Y 
Sbjct: 303 LCAEIMFAAAKDHTMPEFLRKENANHVPVNALWLTNAMVQIFLVITLFSA------STYL 356

Query: 364 KMLLLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYAGG 423
            ++ LATSMIL+PY WSAAY LLL ++GETYEN  +ER KDL I  IA+ YA+WLLYAGG
Sbjct: 357 SLIYLATSMILVPYLWSAAYALLLAVRGETYENALKERRKDLFIGAIALIYAIWLLYAGG 416

Query: 424 LKYLLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
            KYLLLSALLYAPGAILFAKAK E+G+PIFT +EKLIFAAVVIGALVAAYGLYDGFLTL
Sbjct: 417 TKYLLLSALLYAPGAILFAKAKRELGKPIFTPVEKLIFAAVVIGALVAAYGLYDGFLTL 475


>TR:Q4K7R5_PSEF5 Q4K7R5 Arginine/ornithine antiporter OS=Pseudomonas fluorescens
           (strain Pf-5 / ATCC BAA-477) GN=arcD PE=4 SV=1
          Length = 475

 Score =  805 bits (2080), Expect = 0.0
 Identities = 407/479 (84%), Positives = 436/479 (91%), Gaps = 6/479 (1%)

Query: 4   ESSQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQT 63
           ES  KLRLGAL ALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQT
Sbjct: 3   ESPGKLRLGALVALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQT 62

Query: 64  LANRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGK 123
           LANRKP+LDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFG+
Sbjct: 63  LANRKPDLDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGE 122

Query: 124 GDTVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFT 183
           G+T AA++ ASVLLWA+HFLVLRGIKEAAFIN VTTVAKVVPL LF+LI LFAFKLDIFT
Sbjct: 123 GNTPAAVIGASVLLWAVHFLVLRGIKEAAFINLVTTVAKVVPLLLFVLIALFAFKLDIFT 182

Query: 184 ADIWGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVL 243
           ADIWG  NPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVL
Sbjct: 183 ADIWGVKNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVL 242

Query: 244 LLLVLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVL 303
           L LVLVNVLS+G+MTQPELAKLQNPSMA VLEHVVGHWGAVLISVGL+ISLLGALLSWVL
Sbjct: 243 LFLVLVNVLSLGIMTQPELAKLQNPSMAAVLEHVVGHWGAVLISVGLIISLLGALLSWVL 302

Query: 304 LCAEIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYT 363
           LCAEIMFAAAKDHTMPEFLRRENAN VPANALWLTN  VQ+FLV+  F++        Y 
Sbjct: 303 LCAEIMFAAAKDHTMPEFLRRENANHVPANALWLTNAMVQIFLVITLFSA------STYL 356

Query: 364 KMLLLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYAGG 423
            ++ LATSMIL+PY WSAAY +LL ++GE+YE    ER KDL+I  IA+ YA+WLLYAGG
Sbjct: 357 SLIYLATSMILVPYLWSAAYAVLLAVRGESYEQALAERKKDLIIGSIALLYAIWLLYAGG 416

Query: 424 LKYLLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           +KYLLLSALLYAPG +LFAKAK E+ +PIFT +EKLIFAAVVIGALVAAYGLYDGFLTL
Sbjct: 417 VKYLLLSALLYAPGVVLFAKAKMELHKPIFTNVEKLIFAAVVIGALVAAYGLYDGFLTL 475


>TR:E4R6E1_PSEPB E4R6E1 Arginine/ornithine antiporter OS=Pseudomonas putida (strain
           BIRD-1) GN=PPUBIRD1_1052 PE=4 SV=1
          Length = 475

 Score =  805 bits (2080), Expect = 0.0
 Identities = 407/479 (84%), Positives = 435/479 (90%), Gaps = 6/479 (1%)

Query: 4   ESSQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQT 63
           +SS KL+LGAL ALVVGSMIGGGIFSLPQNMAASA VGAVLIGW ITAVGMLTLAFVFQT
Sbjct: 3   DSSGKLKLGALVALVVGSMIGGGIFSLPQNMAASAGVGAVLIGWGITAVGMLTLAFVFQT 62

Query: 64  LANRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGK 123
           LANRKP+LDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFG+
Sbjct: 63  LANRKPDLDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGE 122

Query: 124 GDTVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFT 183
           G+T AAI+ AS+LLWA+HFLVLRGIKEAAFIN VTTVAKVVPL LF LICLFAF+LDIFT
Sbjct: 123 GNTPAAIIGASILLWAVHFLVLRGIKEAAFINLVTTVAKVVPLVLFALICLFAFRLDIFT 182

Query: 184 ADIWGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVL 243
           ADIW    P+LGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVL
Sbjct: 183 ADIWAVGTPELGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVL 242

Query: 244 LLLVLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVL 303
           L LVLVNVLS+G+MTQPELAKLQNPSMA VLEHVVGHWGAVLISVGL+ISLLGALLSWVL
Sbjct: 243 LFLVLVNVLSLGIMTQPELAKLQNPSMAAVLEHVVGHWGAVLISVGLIISLLGALLSWVL 302

Query: 304 LCAEIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYT 363
           LCAEIMFAAAKDHTMPEFLRRENANQVPANALWLTN  VQ+FLV+  F+S        Y 
Sbjct: 303 LCAEIMFAAAKDHTMPEFLRRENANQVPANALWLTNAMVQIFLVITLFSS------STYL 356

Query: 364 KMLLLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYAGG 423
            ++ LATSMIL+PY WSAAY  LL L+ ETYE    ER KDL+I GIA+ YA+WLLYAGG
Sbjct: 357 SLIYLATSMILVPYLWSAAYAFLLALRSETYEQALAERKKDLIIGGIALLYAIWLLYAGG 416

Query: 424 LKYLLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           +KYLLLSALLYAPGAILFAKAK EVG+P+FT +EKLIFAAVVIGALVAA+GLYDGFLTL
Sbjct: 417 VKYLLLSALLYAPGAILFAKAKREVGKPVFTNVEKLIFAAVVIGALVAAFGLYDGFLTL 475


>TR:B0KQM3_PSEPG B0KQM3 Arginine/ornithine antiporter (Precursor) OS=Pseudomonas
           putida (strain GB-1) GN=PputGB1_1001 PE=4 SV=1
          Length = 475

 Score =  805 bits (2080), Expect = 0.0
 Identities = 406/479 (84%), Positives = 435/479 (90%), Gaps = 6/479 (1%)

Query: 4   ESSQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQT 63
           +SS KL+LGAL ALVVGSMIGGGIFSLPQNMAASA VGAVLIGW ITAVGMLTLAFVFQT
Sbjct: 3   DSSGKLKLGALVALVVGSMIGGGIFSLPQNMAASAGVGAVLIGWGITAVGMLTLAFVFQT 62

Query: 64  LANRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGK 123
           LANRKP+LDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFG+
Sbjct: 63  LANRKPDLDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGE 122

Query: 124 GDTVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFT 183
           G+T AAI+ AS+LLWA+HFLVLRGIKEAAFIN VTTVAKVVPL LF LICLFAF+LDIFT
Sbjct: 123 GNTPAAIIGASILLWAVHFLVLRGIKEAAFINLVTTVAKVVPLVLFALICLFAFRLDIFT 182

Query: 184 ADIWGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVL 243
           ADIW    P+LGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGF+TVL
Sbjct: 183 ADIWAVGTPELGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFVTVL 242

Query: 244 LLLVLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVL 303
           L LVLVNVLS+G+MTQPELAKLQNPSMA VLEHVVGHWGAVLISVGL+ISLLGALLSWVL
Sbjct: 243 LFLVLVNVLSLGIMTQPELAKLQNPSMAAVLEHVVGHWGAVLISVGLIISLLGALLSWVL 302

Query: 304 LCAEIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYT 363
           LCAEIMFAAAKDHTMPEFLRRENANQVPANALWLTN  VQ+FLV+  F++        Y 
Sbjct: 303 LCAEIMFAAAKDHTMPEFLRRENANQVPANALWLTNAMVQIFLVITLFSN------STYL 356

Query: 364 KMLLLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYAGG 423
            ++ LATSMIL+PY WSAAY  LL L+ ETYE    ER KDL+I GIA+ YAVWLLYAGG
Sbjct: 357 SLIYLATSMILVPYLWSAAYAFLLALRSETYEQALAERKKDLIIGGIALLYAVWLLYAGG 416

Query: 424 LKYLLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           +KYLLLSALLYAPGAILFAKAK EVGQP+FT +EKLIFAAVV+GALVAA+GLYDGFLTL
Sbjct: 417 VKYLLLSALLYAPGAILFAKAKREVGQPVFTNVEKLIFAAVVVGALVAAFGLYDGFLTL 475


>TR:Q3K7Y2_PSEPF Q3K7Y2 Arginine:ornithine antiporter, APA family (Precursor)
           OS=Pseudomonas fluorescens (strain Pf0-1) GN=arcD PE=4
           SV=1
          Length = 475

 Score =  804 bits (2077), Expect = 0.0
 Identities = 405/479 (84%), Positives = 437/479 (91%), Gaps = 6/479 (1%)

Query: 4   ESSQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQT 63
           E+  KLRLGAL ALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQT
Sbjct: 3   EAPGKLRLGALVALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQT 62

Query: 64  LANRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGK 123
           LANRKP+LDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFG+
Sbjct: 63  LANRKPDLDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGE 122

Query: 124 GDTVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFT 183
           G+TVAA++ ASVLLW +HFLVLRGIKEAAFIN VTTVAKVVPL LF+LI +FAFKLDIFT
Sbjct: 123 GNTVAAVIGASVLLWGVHFLVLRGIKEAAFINLVTTVAKVVPLLLFVLIAIFAFKLDIFT 182

Query: 184 ADIWGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVL 243
           ADIWG  NPDLGSVMNQVRNMMLVTVWVFIGIEGASIFS+RAEKRSDVGKATVIGFITVL
Sbjct: 183 ADIWGVKNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSARAEKRSDVGKATVIGFITVL 242

Query: 244 LLLVLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVL 303
           L LVLVNVLS+G+MTQPELAKLQNPSMA VLEHVVGHWGAVLISVGL+ISLLGALLSWVL
Sbjct: 243 LFLVLVNVLSLGIMTQPELAKLQNPSMAAVLEHVVGHWGAVLISVGLIISLLGALLSWVL 302

Query: 304 LCAEIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYT 363
           LCAEIMFAAAKDHTMPEFLR+ENAN VP NALWLTN  VQ+FL++  F++        Y 
Sbjct: 303 LCAEIMFAAAKDHTMPEFLRKENANHVPVNALWLTNAMVQLFLIITLFSA------STYL 356

Query: 364 KMLLLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYAGG 423
            ++ LATSMIL+PY WSAAY LLL ++GE+YE  A ER KDL+I  IA+ YAVWLLYAGG
Sbjct: 357 SLIYLATSMILVPYLWSAAYALLLAVRGESYEGFAAERRKDLIIGAIALIYAVWLLYAGG 416

Query: 424 LKYLLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           +KYLLLSALLYAPGAILFAKAK E+ QP+FT +EKLIFAAVV+GALVAAYGLYDGFLTL
Sbjct: 417 VKYLLLSALLYAPGAILFAKAKLELKQPVFTNVEKLIFAAVVVGALVAAYGLYDGFLTL 475


>TR:F2KCT8_PSEBN F2KCT8 Arginine/ornithine antiporter; putative membrane protein
           OS=Pseudomonas brassicacearum (strain NFM421)
           GN=PSEBR_a1199 PE=4 SV=1
          Length = 475

 Score =  804 bits (2077), Expect = 0.0
 Identities = 403/475 (84%), Positives = 436/475 (91%), Gaps = 6/475 (1%)

Query: 8   KLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLANR 67
           KLRLGAL ALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLANR
Sbjct: 7   KLRLGALVALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLANR 66

Query: 68  KPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDTV 127
           KP+LDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFP+FG+G+TV
Sbjct: 67  KPDLDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPVFGEGNTV 126

Query: 128 AAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTADIW 187
           AA++ +SVLLWA+HFLVLRGIKEAAFIN VTT+AKVVPL LF+LI +FAFKLDIFTADIW
Sbjct: 127 AAVIGSSVLLWAVHFLVLRGIKEAAFINLVTTIAKVVPLVLFVLIAVFAFKLDIFTADIW 186

Query: 188 GKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLLLV 247
           G  NPDLGSV+NQVRNMMLVTVWVFIGIEGASIFS+RAEKR+DVGKATVIGFITVLL LV
Sbjct: 187 GLKNPDLGSVLNQVRNMMLVTVWVFIGIEGASIFSARAEKRTDVGKATVIGFITVLLFLV 246

Query: 248 LVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLCAE 307
           LVNVLS+G+MTQPELAKLQNPSMA VLEHVVGHWGAVLISVGL+ISLLGALLSWVLLCAE
Sbjct: 247 LVNVLSLGIMTQPELAKLQNPSMAAVLEHVVGHWGAVLISVGLIISLLGALLSWVLLCAE 306

Query: 308 IMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKMLL 367
           IMFAAAKDHTMPEFLRRENAN VPANALWLTN  VQ+FLV+  F++        Y  ++ 
Sbjct: 307 IMFAAAKDHTMPEFLRRENANHVPANALWLTNAMVQLFLVITLFSA------STYLSLIY 360

Query: 368 LATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYAGGLKYL 427
           LATSMIL+PY WSAAY +LL ++GETYEN   ER KDL I  IA+ YAVWLLYAGG+KYL
Sbjct: 361 LATSMILVPYLWSAAYAVLLAVRGETYENALAERRKDLAIGAIALIYAVWLLYAGGIKYL 420

Query: 428 LLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           LLSALLYAPGAILFAKAK E+G+PIFT +EKLIFAAV+ GALVAAYGLYDGFLTL
Sbjct: 421 LLSALLYAPGAILFAKAKRELGKPIFTSVEKLIFAAVIAGALVAAYGLYDGFLTL 475


>TR:Q88P51_PSEPK Q88P51 Arginine/ornithine antiporter OS=Pseudomonas putida (strain
           KT2440) GN=arcD PE=4 SV=1
          Length = 475

 Score =  803 bits (2075), Expect = 0.0
 Identities = 405/479 (84%), Positives = 435/479 (90%), Gaps = 6/479 (1%)

Query: 4   ESSQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQT 63
           +SS KL+LGAL ALVVGSMIGGGIFSLPQNMAASA VGAVLIGWAITAVGMLTLAFVFQT
Sbjct: 3   DSSGKLKLGALVALVVGSMIGGGIFSLPQNMAASAGVGAVLIGWAITAVGMLTLAFVFQT 62

Query: 64  LANRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGK 123
           LANRKP+LDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFG+
Sbjct: 63  LANRKPDLDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGE 122

Query: 124 GDTVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFT 183
           G+T AAI+ AS+LLWA+HFLVLRGIKEAAFIN VTTVAKVVPL LF LICLFAF+LDIFT
Sbjct: 123 GNTPAAIIGASILLWAVHFLVLRGIKEAAFINLVTTVAKVVPLVLFALICLFAFRLDIFT 182

Query: 184 ADIWGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVL 243
           ADIW    P+LGSVMNQVRNMMLVTVWVFIGIEGASIFS+RAEKR+DVGKATVIGF+TVL
Sbjct: 183 ADIWAMGTPELGSVMNQVRNMMLVTVWVFIGIEGASIFSARAEKRTDVGKATVIGFVTVL 242

Query: 244 LLLVLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVL 303
           L LVLVNVLS+G+MTQPELAKLQNPSMA VLEHVVGHWGAVLISVGL+ISLLGALLSWVL
Sbjct: 243 LFLVLVNVLSLGIMTQPELAKLQNPSMAAVLEHVVGHWGAVLISVGLVISLLGALLSWVL 302

Query: 304 LCAEIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYT 363
           LCAEIMFAAAKDHTMPEFLRRENA QVPANALWLTN  VQ+FLV+  F+S        Y 
Sbjct: 303 LCAEIMFAAAKDHTMPEFLRRENAKQVPANALWLTNAMVQIFLVITLFSS------STYL 356

Query: 364 KMLLLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYAGG 423
            ++ LATSMIL+PY WSAAY  LL L+ ETYE    ER KDL+I GIA+ YA+WLLYAGG
Sbjct: 357 SLIYLATSMILVPYLWSAAYAFLLALRSETYEQALAERKKDLIIGGIALLYAIWLLYAGG 416

Query: 424 LKYLLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           +KYLLLSALLYAPGAILFAKAK EVG+P+FT +EKLIFAAVVIGALVAAYGLYDGFLTL
Sbjct: 417 VKYLLLSALLYAPGAILFAKAKREVGKPVFTNVEKLIFAAVVIGALVAAYGLYDGFLTL 475


>TR:C3JYQ4_PSEFS C3JYQ4 Arginine/ornithine antiporter OS=Pseudomonas fluorescens
           (strain SBW25) GN=PFLU_4890 PE=4 SV=1
          Length = 486

 Score =  802 bits (2072), Expect = 0.0
 Identities = 405/479 (84%), Positives = 433/479 (90%), Gaps = 6/479 (1%)

Query: 4   ESSQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQT 63
           ES  KLRLGAL ALVVGSMIGGGIFSLPQNMAASADVGAVLIGW ITA+GMLTLAFVFQT
Sbjct: 14  ESPGKLRLGALVALVVGSMIGGGIFSLPQNMAASADVGAVLIGWVITAIGMLTLAFVFQT 73

Query: 64  LANRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGK 123
           LANRKP+LDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFG+
Sbjct: 74  LANRKPDLDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGE 133

Query: 124 GDTVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFT 183
           G+T AA++ ASVLLWA+HFLVLRGIKEAAFIN VTTVAKVVPL LF+LI +FAFKLDIFT
Sbjct: 134 GNTPAAVIGASVLLWAVHFLVLRGIKEAAFINLVTTVAKVVPLVLFVLIAVFAFKLDIFT 193

Query: 184 ADIWGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVL 243
           ADIWG  NPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVL
Sbjct: 194 ADIWGVKNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVL 253

Query: 244 LLLVLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVL 303
           L L+LVNVLS+G+MTQPELAKLQNPSMA VLEHVVGHWGAVLISVGL+ISLLGALLSWVL
Sbjct: 254 LFLMLVNVLSLGIMTQPELAKLQNPSMAAVLEHVVGHWGAVLISVGLIISLLGALLSWVL 313

Query: 304 LCAEIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYT 363
           LCAEIMFAAAKDHTMPEFLR+ENAN VP NALWLTN  VQ+FLV+  F++        Y 
Sbjct: 314 LCAEIMFAAAKDHTMPEFLRKENANHVPVNALWLTNAMVQIFLVITLFSA------STYL 367

Query: 364 KMLLLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYAGG 423
            ++ LATSMIL+PY WSAAY LLL ++GETYE    ER KDL I  +A+ YAVWLLYAGG
Sbjct: 368 SLIYLATSMILVPYLWSAAYALLLAVRGETYETALAERKKDLFIGAVALIYAVWLLYAGG 427

Query: 424 LKYLLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
            KYLLLSALLYAPGAILFAKAK E+G+PIFT +EKLIFAAVV GALVAAYGLYDGFLTL
Sbjct: 428 TKYLLLSALLYAPGAILFAKAKRELGKPIFTNVEKLIFAAVVAGALVAAYGLYDGFLTL 486


>TR:G8PWB2_PSEFL G8PWB2 ArcD OS=Pseudomonas fluorescens F113 GN=arcD PE=4 SV=1
          Length = 475

 Score =  801 bits (2069), Expect = 0.0
 Identities = 405/475 (85%), Positives = 434/475 (91%), Gaps = 6/475 (1%)

Query: 8   KLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLANR 67
           KLRLGAL ALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLANR
Sbjct: 7   KLRLGALVALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLANR 66

Query: 68  KPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDTV 127
           KP+LDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFG+G+TV
Sbjct: 67  KPDLDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGEGNTV 126

Query: 128 AAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTADIW 187
           AA++ ASVLLWA+H+LVLRGIKEAAFIN VTTVAKVVPL LF+LI +FAFKL+IFT DIW
Sbjct: 127 AAVIGASVLLWAVHWLVLRGIKEAAFINLVTTVAKVVPLVLFVLIAVFAFKLEIFTRDIW 186

Query: 188 GKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLLLV 247
           G  NPDLGSVMNQVR MMLVTVWVFIGIEGASIFS+RAEKR+DVGKATVIGFITVLL LV
Sbjct: 187 GTMNPDLGSVMNQVRKMMLVTVWVFIGIEGASIFSARAEKRTDVGKATVIGFITVLLFLV 246

Query: 248 LVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLCAE 307
           LVNVLS+G+MTQPELAKLQNPSMA VLEHVVGHWGAVLISVGL+ISLLGALLSWVLLCAE
Sbjct: 247 LVNVLSLGIMTQPELAKLQNPSMAAVLEHVVGHWGAVLISVGLIISLLGALLSWVLLCAE 306

Query: 308 IMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKMLL 367
           IMFAAAKDHTMPEFLRRENAN VPANALWLTN  VQVFLV+  F++        Y  ++ 
Sbjct: 307 IMFAAAKDHTMPEFLRRENANHVPANALWLTNAMVQVFLVITLFSA------STYLSLIY 360

Query: 368 LATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYAGGLKYL 427
           LATSMIL+PY WSAAY +LL ++GETYEN   ER KDL I  IA+ YAVWLLYAGG+KYL
Sbjct: 361 LATSMILVPYLWSAAYAVLLAVRGETYENALAERRKDLTIGAIALIYAVWLLYAGGIKYL 420

Query: 428 LLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           LLSALLYAPGAILFAKAK E+G+PIFT +EKLIFAAVV GALVAAYGLYDGFLTL
Sbjct: 421 LLSALLYAPGAILFAKAKRELGKPIFTSVEKLIFAAVVAGALVAAYGLYDGFLTL 475


>TR:Q1I5H5_PSEE4 Q1I5H5 Arginine/ornithine antiporter OS=Pseudomonas entomophila
           (strain L48) GN=arcD PE=4 SV=1
          Length = 475

 Score =  800 bits (2067), Expect = 0.0
 Identities = 403/479 (84%), Positives = 433/479 (90%), Gaps = 6/479 (1%)

Query: 4   ESSQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQT 63
           +S  KL+LGAL ALVVGSMIGGGIFSLPQNMAASA VGAVLIGWAITAVGMLTLAFVFQT
Sbjct: 3   DSPGKLKLGALVALVVGSMIGGGIFSLPQNMAASAGVGAVLIGWAITAVGMLTLAFVFQT 62

Query: 64  LANRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGK 123
           LANRKP+LDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFP+FG+
Sbjct: 63  LANRKPDLDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPVFGE 122

Query: 124 GDTVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFT 183
           G+T AA++ AS+LLWA+HFLVLRGIKEAAFIN VTTVAKVVPL LF LICLFAFKLD+FT
Sbjct: 123 GNTPAAVIGASILLWAVHFLVLRGIKEAAFINLVTTVAKVVPLALFALICLFAFKLDVFT 182

Query: 184 ADIWGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVL 243
           ADIW    P+LGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGF+TVL
Sbjct: 183 ADIWALGTPELGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFVTVL 242

Query: 244 LLLVLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVL 303
           L LVLVNVLS+GVMTQPELAKLQNPSMA VLEHVVGHWGAVLISVGL+ISLLGALLSWVL
Sbjct: 243 LFLVLVNVLSLGVMTQPELAKLQNPSMAAVLEHVVGHWGAVLISVGLIISLLGALLSWVL 302

Query: 304 LCAEIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYT 363
           LCAEIMFAAAKDHTMPEFLRREN N VPANALWLTN  VQ+FLV+  F++        Y 
Sbjct: 303 LCAEIMFAAAKDHTMPEFLRRENQNHVPANALWLTNAMVQIFLVITLFSN------STYL 356

Query: 364 KMLLLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYAGG 423
            ++ LATSMIL+PY WSAAY +LL ++ ETYE    ER KDL+I GIA+ YA+WLLYAGG
Sbjct: 357 SLIYLATSMILVPYLWSAAYAVLLAVRSETYEQALAERQKDLIIGGIALLYAIWLLYAGG 416

Query: 424 LKYLLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           +KYLLLSALLYAPGAILFAKAK EVGQPIFT +EKLIFAAVV GALVAAYGLYDGFLTL
Sbjct: 417 VKYLLLSALLYAPGAILFAKAKREVGQPIFTNVEKLIFAAVVAGALVAAYGLYDGFLTL 475


>TR:A5VZ90_PSEP1 A5VZ90 Arginine:ornithine antiporter, APA family (Precursor)
           OS=Pseudomonas putida (strain F1 / ATCC 700007)
           GN=Pput_1039 PE=4 SV=1
          Length = 475

 Score =  800 bits (2066), Expect = 0.0
 Identities = 403/479 (84%), Positives = 434/479 (90%), Gaps = 6/479 (1%)

Query: 4   ESSQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQT 63
           +SS KL+LGAL ALVVGSMIGGGIFSLPQNMAASA VGAVLIGW ITAVGMLTLAFVFQT
Sbjct: 3   DSSGKLKLGALVALVVGSMIGGGIFSLPQNMAASAGVGAVLIGWGITAVGMLTLAFVFQT 62

Query: 64  LANRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGK 123
           LANRKP+LDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFG+
Sbjct: 63  LANRKPDLDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGE 122

Query: 124 GDTVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFT 183
           G+T AAI+ AS+LLWA+HFLVLRGIKEAAFIN VTTVAKVVPL LF LICLFAF+LDIFT
Sbjct: 123 GNTPAAIIGASILLWAVHFLVLRGIKEAAFINLVTTVAKVVPLVLFALICLFAFRLDIFT 182

Query: 184 ADIWGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVL 243
           ADIW    P+LGSVMNQVRNMMLVTVWVFIGIEGASIFS+RAEKR+DVGKATVIGF+TVL
Sbjct: 183 ADIWAVGTPELGSVMNQVRNMMLVTVWVFIGIEGASIFSARAEKRTDVGKATVIGFVTVL 242

Query: 244 LLLVLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVL 303
           L LVLVNVLS+G+MTQPELAKLQNPSMA VLEHVVGHWGAVLISVGL+ISLLGALLSWVL
Sbjct: 243 LFLVLVNVLSLGIMTQPELAKLQNPSMAAVLEHVVGHWGAVLISVGLVISLLGALLSWVL 302

Query: 304 LCAEIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYT 363
           LCAEIMFAAAKDHTMPEFLRRENA QVPANALWLTN  VQ+FLV+  F+S        Y 
Sbjct: 303 LCAEIMFAAAKDHTMPEFLRRENAKQVPANALWLTNAMVQIFLVITLFSS------STYL 356

Query: 364 KMLLLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYAGG 423
            ++ LATSMIL+PY WSAAY  LL L+ ETYE    ER KDL+I GIA+ YA+WLLYAGG
Sbjct: 357 SLIYLATSMILVPYLWSAAYAFLLALRSETYEQALAERKKDLIIGGIALLYAIWLLYAGG 416

Query: 424 LKYLLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           +KYLLLSALLYAPGAILFAKAK EVG+P+FT +EKLIFAAVVIGALVAA+GLYDGFLTL
Sbjct: 417 VKYLLLSALLYAPGAILFAKAKREVGKPVFTNVEKLIFAAVVIGALVAAFGLYDGFLTL 475


>TR:F8FXA0_PSEPU F8FXA0 Arginine/ornithine antiporter OS=Pseudomonas putida S16
           GN=PPS_1029 PE=4 SV=1
          Length = 455

 Score =  786 bits (2030), Expect = 0.0
 Identities = 397/461 (86%), Positives = 420/461 (91%), Gaps = 6/461 (1%)

Query: 22  MIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLANRKPELDGGVYAYAKA 81
           MIGGGIFSLPQNMAASA VGAVLIGWAITAVGMLTLAFVFQTLANRKP+LDGGVYAYAKA
Sbjct: 1   MIGGGIFSLPQNMAASAGVGAVLIGWAITAVGMLTLAFVFQTLANRKPDLDGGVYAYAKA 60

Query: 82  GFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDTVAAIVCASVLLWALH 141
           GFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFG+G+T AAI+ ASVLLWA+H
Sbjct: 61  GFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGEGNTPAAIIGASVLLWAVH 120

Query: 142 FLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTADIWGKSNPDLGSVMNQV 201
           FLVLRGIKEAAFIN +TTVAKVVPL LF LICLFAFKLDIFTADIW    P+LGSVMNQV
Sbjct: 121 FLVLRGIKEAAFINLITTVAKVVPLLLFALICLFAFKLDIFTADIWAVGTPELGSVMNQV 180

Query: 202 RNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLLLVLVNVLSMGVMTQPE 261
           RNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGF+TVLL LVLVNVLS+G+MTQPE
Sbjct: 181 RNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFVTVLLFLVLVNVLSLGIMTQPE 240

Query: 262 LAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLCAEIMFAAAKDHTMPEF 321
           LAKLQNPSMA VLEHVVGHWGAVLISVGL+ISLLGALLSWVLLCAEIMFAAAKDHTMPEF
Sbjct: 241 LAKLQNPSMAAVLEHVVGHWGAVLISVGLIISLLGALLSWVLLCAEIMFAAAKDHTMPEF 300

Query: 322 LRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKMLLLATSMILIPYFWSA 381
           LRRENANQVPANALWLTN  VQ+FLV+  F+S        Y  ++ LATSMIL+PY WSA
Sbjct: 301 LRRENANQVPANALWLTNAMVQIFLVITLFSS------STYLSLIYLATSMILVPYLWSA 354

Query: 382 AYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYAGGLKYLLLSALLYAPGAILF 441
           AY  LL L+ ETYE    ER KDLVI GIA+ YAVWLLYAGG+KYLLLSALLYAPGAILF
Sbjct: 355 AYAFLLALRSETYEQALAERQKDLVIGGIALLYAVWLLYAGGVKYLLLSALLYAPGAILF 414

Query: 442 AKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           AKAK EVGQP+FT +EKLIFAAVVIGALVAA+GLYDGFLTL
Sbjct: 415 AKAKREVGQPVFTNVEKLIFAAVVIGALVAAFGLYDGFLTL 455


>TR:Q4ZT00_PSEU2 Q4ZT00 Arginine:ornithine antiporter, APA family (Precursor)
           OS=Pseudomonas syringae pv. syringae (strain B728a)
           GN=Psyr_2683 PE=4 SV=1
          Length = 475

 Score =  774 bits (1998), Expect = 0.0
 Identities = 388/475 (81%), Positives = 424/475 (89%), Gaps = 6/475 (1%)

Query: 8   KLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLANR 67
           KLRLGAL ALVVGSMIGGGIFSLPQNMAASA+VGAVL+GWAITA+GMLTLAFVFQTLANR
Sbjct: 7   KLRLGALVALVVGSMIGGGIFSLPQNMAASAEVGAVLVGWAITAIGMLTLAFVFQTLANR 66

Query: 68  KPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDTV 127
           KP+LDGGVY YAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFP+FG+G+TV
Sbjct: 67  KPDLDGGVYVYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPVFGEGNTV 126

Query: 128 AAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTADIW 187
           AA++ ASVLLW +HFLVLRGI+EAAFIN VTTVAKVVPL LF+LI +FAFKLDIFT DIW
Sbjct: 127 AAVIGASVLLWGVHFLVLRGIQEAAFINLVTTVAKVVPLILFVLIAVFAFKLDIFTTDIW 186

Query: 188 GKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLLLV 247
           G   PD+GSVMNQVR+MMLVTVWVFIGIEGASIFS+RA KRSDVGKATVIGFITVLLLLV
Sbjct: 187 GLEKPDMGSVMNQVRHMMLVTVWVFIGIEGASIFSARASKRSDVGKATVIGFITVLLLLV 246

Query: 248 LVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLCAE 307
           LVNVLS+GVMTQPELAKLQNPSMA VLEH+VG WGA LISVGL+ISLLGALLSWVLLCAE
Sbjct: 247 LVNVLSLGVMTQPELAKLQNPSMAAVLEHIVGPWGAALISVGLIISLLGALLSWVLLCAE 306

Query: 308 IMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKMLL 367
           IMFAAAKDHTMPEFL RENAN VPANALWLTN  VQVFLV+  F+S        Y  ++ 
Sbjct: 307 IMFAAAKDHTMPEFLSRENANHVPANALWLTNAMVQVFLVITLFSS------STYLSLIY 360

Query: 368 LATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYAGGLKYL 427
           LATSMILIPY WSAAY L L + GE YEN  RER KDL IA +A+ YA+WL+YAGG+KYL
Sbjct: 361 LATSMILIPYLWSAAYALRLAIGGEGYENARRERRKDLFIAAVALLYAIWLIYAGGVKYL 420

Query: 428 LLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           LLSALLYAPG ILFAKAK E  +P+FT +E ++F AV+IGAL+AAYGLYDGFLTL
Sbjct: 421 LLSALLYAPGVILFAKAKLEAKKPVFTHLENMMFVAVLIGALIAAYGLYDGFLTL 475


>TR:Q2SVZ5_BURTA Q2SVZ5 Arginine/ornithine antiporter OS=Burkholderia thailandensis
           (strain E264 / ATCC 700388 / DSM 13276 / CIP 106301)
           GN=BTH_I2383 PE=4 SV=1
          Length = 486

 Score =  765 bits (1976), Expect = 0.0
 Identities = 377/478 (78%), Positives = 425/478 (88%), Gaps = 6/478 (1%)

Query: 5   SSQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTL 64
           ++ KL+LGALTALVVGSMIGGGIFSLPQNMAA+AD GA+LIGWAITAVGMLTLAFVFQTL
Sbjct: 15  ATNKLQLGALTALVVGSMIGGGIFSLPQNMAATADAGAILIGWAITAVGMLTLAFVFQTL 74

Query: 65  ANRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKG 124
           ANRKP+LDGGVYAYA+AGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFP+FG+G
Sbjct: 75  ANRKPQLDGGVYAYAQAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPVFGEG 134

Query: 125 DTVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTA 184
           +T A+I  ASVLLWA+HFLVLRGIKEAAF+N VTTVAK+VPL +FILIC FAF+LD+F  
Sbjct: 135 NTPASIAGASVLLWAVHFLVLRGIKEAAFVNLVTTVAKIVPLAVFILICFFAFRLDVFRT 194

Query: 185 DIWGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLL 244
           DIWG++NP LGSVMNQVRNMMLVTVWVFIGIEGASIFS+RA++RSDVG+ATVIGF  VLL
Sbjct: 195 DIWGRANPSLGSVMNQVRNMMLVTVWVFIGIEGASIFSARAQRRSDVGRATVIGFAGVLL 254

Query: 245 LLVLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLL 304
           +LVLVNVLS+G+MTQP+LAKLQNPSMA VLEHVVGHWGAVLISVGL++SL GALLSWVLL
Sbjct: 255 VLVLVNVLSLGIMTQPQLAKLQNPSMAAVLEHVVGHWGAVLISVGLVVSLAGALLSWVLL 314

Query: 305 CAEIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTK 364
           CAEIMF+AAKDHTMP FLR+ENAN VPANALWLTN  VQVFL++  F+         Y  
Sbjct: 315 CAEIMFSAAKDHTMPAFLRKENANHVPANALWLTNAMVQVFLLITLFS------QSTYLS 368

Query: 365 MLLLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYAGGL 424
           ++ LATSMILIPYFWSAAY LL+ ++GETYE DAR R KDL +A +AV YAVWLLYAGG+
Sbjct: 369 LIYLATSMILIPYFWSAAYALLIAVRGETYEGDARARRKDLFVAALAVLYAVWLLYAGGV 428

Query: 425 KYLLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           KYLLLSALLYAPGA+ FAKAK E+G+P+FT  EKLIFAA    AL AAY L+ G +TL
Sbjct: 429 KYLLLSALLYAPGALFFAKAKRELGKPVFTAAEKLIFAAAAAAALAAAYALHSGLITL 486


>TR:Q63U74_BURPS Q63U74 Arginine/ornithine antiporter OS=Burkholderia pseudomallei
           (strain K96243) GN=arcD PE=4 SV=1
          Length = 486

 Score =  764 bits (1972), Expect = 0.0
 Identities = 378/481 (78%), Positives = 425/481 (88%), Gaps = 6/481 (1%)

Query: 2   SQESSQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVF 61
           ++ ++ KLRLGALTALVVGSMIGGGIFSLPQNMAA+A+ GA+LIGWAITA+GMLTLAFVF
Sbjct: 12  AKSAANKLRLGALTALVVGSMIGGGIFSLPQNMAATAEAGAILIGWAITAIGMLTLAFVF 71

Query: 62  QTLANRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIF 121
           QTLANRKP+LDGGVYAYA+AGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFP+F
Sbjct: 72  QTLANRKPQLDGGVYAYAQAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPVF 131

Query: 122 GKGDTVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDI 181
           G+G+T AAI  ASVLLWA+HFLVLRGI+EAAF+N VTTVAK+VPL +FILI  FAFKLD+
Sbjct: 132 GEGNTPAAIAGASVLLWAVHFLVLRGIREAAFVNLVTTVAKIVPLVVFILIGFFAFKLDV 191

Query: 182 FTADIWGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFIT 241
           F  DIWG++NP LGSVMNQVRNMMLVTVWVFIGIEGASIFS+RAEKRSDVG+ATVIGF+ 
Sbjct: 192 FRTDIWGRANPSLGSVMNQVRNMMLVTVWVFIGIEGASIFSARAEKRSDVGRATVIGFVG 251

Query: 242 VLLLLVLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSW 301
           VLL LVLVNVLS+G+MTQP+LAKLQNPSMA VLEHVVGHWGAVLISVGL++SL GALLSW
Sbjct: 252 VLLALVLVNVLSLGIMTQPQLAKLQNPSMAAVLEHVVGHWGAVLISVGLVVSLAGALLSW 311

Query: 302 VLLCAEIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDP 361
           VLLCAEIMF+AAKD TMP FLR+ENAN VPANALWLTN  VQVFL++  F+         
Sbjct: 312 VLLCAEIMFSAAKDRTMPAFLRKENANHVPANALWLTNAMVQVFLLITLFS------QST 365

Query: 362 YTKMLLLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYA 421
           Y  ++ LATSMILIPYFWSAAY LL+ ++GETYE DAR R KDL +A +AV YAVWLLYA
Sbjct: 366 YLSLIYLATSMILIPYFWSAAYALLIAVRGETYEGDARARRKDLFVAALAVLYAVWLLYA 425

Query: 422 GGLKYLLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLT 481
           GGLKYLLLSALLYAPGA+ FAKAK E+G+P+FT  EKLIFAA    AL AAY L+ G +T
Sbjct: 426 GGLKYLLLSALLYAPGALFFAKAKRELGKPVFTAAEKLIFAAAAAAALAAAYALHSGLIT 485

Query: 482 L 482
           L
Sbjct: 486 L 486


>TR:Q62KE0_BURMA Q62KE0 Arginine/ornithine antiporter OS=Burkholderia mallei (strain
           ATCC 23344) GN=arcD PE=4 SV=1
          Length = 486

 Score =  764 bits (1972), Expect = 0.0
 Identities = 378/481 (78%), Positives = 425/481 (88%), Gaps = 6/481 (1%)

Query: 2   SQESSQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVF 61
           ++ ++ KLRLGALTALVVGSMIGGGIFSLPQNMAA+A+ GA+LIGWAITA+GMLTLAFVF
Sbjct: 12  AKSAANKLRLGALTALVVGSMIGGGIFSLPQNMAATAEAGAILIGWAITAIGMLTLAFVF 71

Query: 62  QTLANRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIF 121
           QTLANRKP+LDGGVYAYA+AGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFP+F
Sbjct: 72  QTLANRKPQLDGGVYAYAQAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPVF 131

Query: 122 GKGDTVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDI 181
           G+G+T AAI  ASVLLWA+HFLVLRGI+EAAF+N VTTVAK+VPL +FILI  FAFKLD+
Sbjct: 132 GEGNTPAAIAGASVLLWAVHFLVLRGIREAAFVNLVTTVAKIVPLVVFILIGFFAFKLDV 191

Query: 182 FTADIWGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFIT 241
           F  DIWG++NP LGSVMNQVRNMMLVTVWVFIGIEGASIFS+RAEKRSDVG+ATVIGF+ 
Sbjct: 192 FRTDIWGRANPSLGSVMNQVRNMMLVTVWVFIGIEGASIFSARAEKRSDVGRATVIGFVG 251

Query: 242 VLLLLVLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSW 301
           VLL LVLVNVLS+G+MTQP+LAKLQNPSMA VLEHVVGHWGAVLISVGL++SL GALLSW
Sbjct: 252 VLLALVLVNVLSLGIMTQPQLAKLQNPSMAAVLEHVVGHWGAVLISVGLVVSLAGALLSW 311

Query: 302 VLLCAEIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDP 361
           VLLCAEIMF+AAKD TMP FLR+ENAN VPANALWLTN  VQVFL++  F+         
Sbjct: 312 VLLCAEIMFSAAKDRTMPAFLRKENANHVPANALWLTNAMVQVFLLITLFS------QST 365

Query: 362 YTKMLLLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYA 421
           Y  ++ LATSMILIPYFWSAAY LL+ ++GETYE DAR R KDL +A +AV YAVWLLYA
Sbjct: 366 YLSLIYLATSMILIPYFWSAAYALLIAVRGETYEGDARARRKDLFVAALAVLYAVWLLYA 425

Query: 422 GGLKYLLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLT 481
           GGLKYLLLSALLYAPGA+ FAKAK E+G+P+FT  EKLIFAA    AL AAY L+ G +T
Sbjct: 426 GGLKYLLLSALLYAPGALFFAKAKRELGKPVFTAAEKLIFAAAAAAALAAAYALHSGLIT 485

Query: 482 L 482
           L
Sbjct: 486 L 486


>TR:A3NV82_BURP0 A3NV82 Arginine/ornithine antiporter OS=Burkholderia pseudomallei
           (strain 1106a) GN=arcD PE=4 SV=1
          Length = 486

 Score =  764 bits (1972), Expect = 0.0
 Identities = 378/481 (78%), Positives = 425/481 (88%), Gaps = 6/481 (1%)

Query: 2   SQESSQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVF 61
           ++ ++ KLRLGALTALVVGSMIGGGIFSLPQNMAA+A+ GA+LIGWAITA+GMLTLAFVF
Sbjct: 12  AKSAANKLRLGALTALVVGSMIGGGIFSLPQNMAATAEAGAILIGWAITAIGMLTLAFVF 71

Query: 62  QTLANRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIF 121
           QTLANRKP+LDGGVYAYA+AGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFP+F
Sbjct: 72  QTLANRKPQLDGGVYAYAQAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPVF 131

Query: 122 GKGDTVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDI 181
           G+G+T AAI  ASVLLWA+HFLVLRGI+EAAF+N VTTVAK+VPL +FILI  FAFKLD+
Sbjct: 132 GEGNTPAAIAGASVLLWAVHFLVLRGIREAAFVNLVTTVAKIVPLVVFILIGFFAFKLDV 191

Query: 182 FTADIWGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFIT 241
           F  DIWG++NP LGSVMNQVRNMMLVTVWVFIGIEGASIFS+RAEKRSDVG+ATVIGF+ 
Sbjct: 192 FRTDIWGRANPSLGSVMNQVRNMMLVTVWVFIGIEGASIFSARAEKRSDVGRATVIGFVG 251

Query: 242 VLLLLVLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSW 301
           VLL LVLVNVLS+G+MTQP+LAKLQNPSMA VLEHVVGHWGAVLISVGL++SL GALLSW
Sbjct: 252 VLLALVLVNVLSLGIMTQPQLAKLQNPSMAAVLEHVVGHWGAVLISVGLVVSLAGALLSW 311

Query: 302 VLLCAEIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDP 361
           VLLCAEIMF+AAKD TMP FLR+ENAN VPANALWLTN  VQVFL++  F+         
Sbjct: 312 VLLCAEIMFSAAKDRTMPAFLRKENANHVPANALWLTNAMVQVFLLITLFS------QST 365

Query: 362 YTKMLLLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYA 421
           Y  ++ LATSMILIPYFWSAAY LL+ ++GETYE DAR R KDL +A +AV YAVWLLYA
Sbjct: 366 YLSLIYLATSMILIPYFWSAAYALLIAVRGETYEGDARARRKDLFVAALAVLYAVWLLYA 425

Query: 422 GGLKYLLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLT 481
           GGLKYLLLSALLYAPGA+ FAKAK E+G+P+FT  EKLIFAA    AL AAY L+ G +T
Sbjct: 426 GGLKYLLLSALLYAPGALFFAKAKRELGKPVFTAAEKLIFAAAAAAALAAAYALHSGLIT 485

Query: 482 L 482
           L
Sbjct: 486 L 486


>TR:A3N9I3_BURP6 A3N9I3 Arginine/ornithine antiporter OS=Burkholderia pseudomallei
           (strain 668) GN=arcD PE=4 SV=1
          Length = 486

 Score =  764 bits (1972), Expect = 0.0
 Identities = 378/481 (78%), Positives = 425/481 (88%), Gaps = 6/481 (1%)

Query: 2   SQESSQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVF 61
           ++ ++ KLRLGALTALVVGSMIGGGIFSLPQNMAA+A+ GA+LIGWAITA+GMLTLAFVF
Sbjct: 12  AKSAANKLRLGALTALVVGSMIGGGIFSLPQNMAATAEAGAILIGWAITAIGMLTLAFVF 71

Query: 62  QTLANRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIF 121
           QTLANRKP+LDGGVYAYA+AGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFP+F
Sbjct: 72  QTLANRKPQLDGGVYAYAQAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPVF 131

Query: 122 GKGDTVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDI 181
           G+G+T AAI  ASVLLWA+HFLVLRGI+EAAF+N VTTVAK+VPL +FILI  FAFKLD+
Sbjct: 132 GEGNTPAAIAGASVLLWAVHFLVLRGIREAAFVNLVTTVAKIVPLVVFILIGFFAFKLDV 191

Query: 182 FTADIWGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFIT 241
           F  DIWG++NP LGSVMNQVRNMMLVTVWVFIGIEGASIFS+RAEKRSDVG+ATVIGF+ 
Sbjct: 192 FRTDIWGRANPSLGSVMNQVRNMMLVTVWVFIGIEGASIFSARAEKRSDVGRATVIGFVG 251

Query: 242 VLLLLVLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSW 301
           VLL LVLVNVLS+G+MTQP+LAKLQNPSMA VLEHVVGHWGAVLISVGL++SL GALLSW
Sbjct: 252 VLLALVLVNVLSLGIMTQPQLAKLQNPSMAAVLEHVVGHWGAVLISVGLVVSLAGALLSW 311

Query: 302 VLLCAEIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDP 361
           VLLCAEIMF+AAKD TMP FLR+ENAN VPANALWLTN  VQVFL++  F+         
Sbjct: 312 VLLCAEIMFSAAKDRTMPAFLRKENANHVPANALWLTNAMVQVFLLITLFS------QST 365

Query: 362 YTKMLLLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYA 421
           Y  ++ LATSMILIPYFWSAAY LL+ ++GETYE DAR R KDL +A +AV YAVWLLYA
Sbjct: 366 YLSLIYLATSMILIPYFWSAAYALLIAVRGETYEGDARARRKDLFVAALAVLYAVWLLYA 425

Query: 422 GGLKYLLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLT 481
           GGLKYLLLSALLYAPGA+ FAKAK E+G+P+FT  EKLIFAA    AL AAY L+ G +T
Sbjct: 426 GGLKYLLLSALLYAPGALFFAKAKRELGKPVFTAAEKLIFAAAAAAALAAAYALHSGLIT 485

Query: 482 L 482
           L
Sbjct: 486 L 486


>TR:A3MJP3_BURM7 A3MJP3 Arginine/ornithine antiporter OS=Burkholderia mallei (strain
           NCTC 10247) GN=arcD PE=4 SV=1
          Length = 486

 Score =  764 bits (1972), Expect = 0.0
 Identities = 378/481 (78%), Positives = 425/481 (88%), Gaps = 6/481 (1%)

Query: 2   SQESSQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVF 61
           ++ ++ KLRLGALTALVVGSMIGGGIFSLPQNMAA+A+ GA+LIGWAITA+GMLTLAFVF
Sbjct: 12  AKSAANKLRLGALTALVVGSMIGGGIFSLPQNMAATAEAGAILIGWAITAIGMLTLAFVF 71

Query: 62  QTLANRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIF 121
           QTLANRKP+LDGGVYAYA+AGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFP+F
Sbjct: 72  QTLANRKPQLDGGVYAYAQAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPVF 131

Query: 122 GKGDTVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDI 181
           G+G+T AAI  ASVLLWA+HFLVLRGI+EAAF+N VTTVAK+VPL +FILI  FAFKLD+
Sbjct: 132 GEGNTPAAIAGASVLLWAVHFLVLRGIREAAFVNLVTTVAKIVPLVVFILIGFFAFKLDV 191

Query: 182 FTADIWGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFIT 241
           F  DIWG++NP LGSVMNQVRNMMLVTVWVFIGIEGASIFS+RAEKRSDVG+ATVIGF+ 
Sbjct: 192 FRTDIWGRANPSLGSVMNQVRNMMLVTVWVFIGIEGASIFSARAEKRSDVGRATVIGFVG 251

Query: 242 VLLLLVLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSW 301
           VLL LVLVNVLS+G+MTQP+LAKLQNPSMA VLEHVVGHWGAVLISVGL++SL GALLSW
Sbjct: 252 VLLALVLVNVLSLGIMTQPQLAKLQNPSMAAVLEHVVGHWGAVLISVGLVVSLAGALLSW 311

Query: 302 VLLCAEIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDP 361
           VLLCAEIMF+AAKD TMP FLR+ENAN VPANALWLTN  VQVFL++  F+         
Sbjct: 312 VLLCAEIMFSAAKDRTMPAFLRKENANHVPANALWLTNAMVQVFLLITLFS------QST 365

Query: 362 YTKMLLLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYA 421
           Y  ++ LATSMILIPYFWSAAY LL+ ++GETYE DAR R KDL +A +AV YAVWLLYA
Sbjct: 366 YLSLIYLATSMILIPYFWSAAYALLIAVRGETYEGDARARRKDLFVAALAVLYAVWLLYA 425

Query: 422 GGLKYLLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLT 481
           GGLKYLLLSALLYAPGA+ FAKAK E+G+P+FT  EKLIFAA    AL AAY L+ G +T
Sbjct: 426 GGLKYLLLSALLYAPGALFFAKAKRELGKPVFTAAEKLIFAAAAAAALAAAYALHSGLIT 485

Query: 482 L 482
           L
Sbjct: 486 L 486


>TR:A2S2S6_BURM9 A2S2S6 Arginine/ornithine antiporter OS=Burkholderia mallei (strain
           NCTC 10229) GN=arcD PE=4 SV=1
          Length = 486

 Score =  764 bits (1972), Expect = 0.0
 Identities = 378/481 (78%), Positives = 425/481 (88%), Gaps = 6/481 (1%)

Query: 2   SQESSQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVF 61
           ++ ++ KLRLGALTALVVGSMIGGGIFSLPQNMAA+A+ GA+LIGWAITA+GMLTLAFVF
Sbjct: 12  AKSAANKLRLGALTALVVGSMIGGGIFSLPQNMAATAEAGAILIGWAITAIGMLTLAFVF 71

Query: 62  QTLANRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIF 121
           QTLANRKP+LDGGVYAYA+AGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFP+F
Sbjct: 72  QTLANRKPQLDGGVYAYAQAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPVF 131

Query: 122 GKGDTVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDI 181
           G+G+T AAI  ASVLLWA+HFLVLRGI+EAAF+N VTTVAK+VPL +FILI  FAFKLD+
Sbjct: 132 GEGNTPAAIAGASVLLWAVHFLVLRGIREAAFVNLVTTVAKIVPLVVFILIGFFAFKLDV 191

Query: 182 FTADIWGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFIT 241
           F  DIWG++NP LGSVMNQVRNMMLVTVWVFIGIEGASIFS+RAEKRSDVG+ATVIGF+ 
Sbjct: 192 FRTDIWGRANPSLGSVMNQVRNMMLVTVWVFIGIEGASIFSARAEKRSDVGRATVIGFVG 251

Query: 242 VLLLLVLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSW 301
           VLL LVLVNVLS+G+MTQP+LAKLQNPSMA VLEHVVGHWGAVLISVGL++SL GALLSW
Sbjct: 252 VLLALVLVNVLSLGIMTQPQLAKLQNPSMAAVLEHVVGHWGAVLISVGLVVSLAGALLSW 311

Query: 302 VLLCAEIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDP 361
           VLLCAEIMF+AAKD TMP FLR+ENAN VPANALWLTN  VQVFL++  F+         
Sbjct: 312 VLLCAEIMFSAAKDRTMPAFLRKENANHVPANALWLTNAMVQVFLLITLFS------QST 365

Query: 362 YTKMLLLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYA 421
           Y  ++ LATSMILIPYFWSAAY LL+ ++GETYE DAR R KDL +A +AV YAVWLLYA
Sbjct: 366 YLSLIYLATSMILIPYFWSAAYALLIAVRGETYEGDARARRKDLFVAALAVLYAVWLLYA 425

Query: 422 GGLKYLLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLT 481
           GGLKYLLLSALLYAPGA+ FAKAK E+G+P+FT  EKLIFAA    AL AAY L+ G +T
Sbjct: 426 GGLKYLLLSALLYAPGALFFAKAKRELGKPVFTAAEKLIFAAAAAAALAAAYALHSGLIT 485

Query: 482 L 482
           L
Sbjct: 486 L 486


>TR:I2MN73_BURPE I2MN73 Arginine/ornithine antiporter OS=Burkholderia pseudomallei
           354a GN=arcD PE=4 SV=1
          Length = 486

 Score =  764 bits (1972), Expect = 0.0
 Identities = 378/481 (78%), Positives = 425/481 (88%), Gaps = 6/481 (1%)

Query: 2   SQESSQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVF 61
           ++ ++ KLRLGALTALVVGSMIGGGIFSLPQNMAA+A+ GA+LIGWAITA+GMLTLAFVF
Sbjct: 12  AKSAANKLRLGALTALVVGSMIGGGIFSLPQNMAATAEAGAILIGWAITAIGMLTLAFVF 71

Query: 62  QTLANRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIF 121
           QTLANRKP+LDGGVYAYA+AGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFP+F
Sbjct: 72  QTLANRKPQLDGGVYAYAQAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPVF 131

Query: 122 GKGDTVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDI 181
           G+G+T AAI  ASVLLWA+HFLVLRGI+EAAF+N VTTVAK+VPL +FILI  FAFKLD+
Sbjct: 132 GEGNTPAAIAGASVLLWAVHFLVLRGIREAAFVNLVTTVAKIVPLVVFILIGFFAFKLDV 191

Query: 182 FTADIWGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFIT 241
           F  DIWG++NP LGSVMNQVRNMMLVTVWVFIGIEGASIFS+RAEKRSDVG+ATVIGF+ 
Sbjct: 192 FRTDIWGRANPSLGSVMNQVRNMMLVTVWVFIGIEGASIFSARAEKRSDVGRATVIGFVG 251

Query: 242 VLLLLVLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSW 301
           VLL LVLVNVLS+G+MTQP+LAKLQNPSMA VLEHVVGHWGAVLISVGL++SL GALLSW
Sbjct: 252 VLLALVLVNVLSLGIMTQPQLAKLQNPSMAAVLEHVVGHWGAVLISVGLVVSLAGALLSW 311

Query: 302 VLLCAEIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDP 361
           VLLCAEIMF+AAKD TMP FLR+ENAN VPANALWLTN  VQVFL++  F+         
Sbjct: 312 VLLCAEIMFSAAKDRTMPAFLRKENANHVPANALWLTNAMVQVFLLITLFS------QST 365

Query: 362 YTKMLLLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYA 421
           Y  ++ LATSMILIPYFWSAAY LL+ ++GETYE DAR R KDL +A +AV YAVWLLYA
Sbjct: 366 YLSLIYLATSMILIPYFWSAAYALLIAVRGETYEGDARARRKDLFVAALAVLYAVWLLYA 425

Query: 422 GGLKYLLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLT 481
           GGLKYLLLSALLYAPGA+ FAKAK E+G+P+FT  EKLIFAA    AL AAY L+ G +T
Sbjct: 426 GGLKYLLLSALLYAPGALFFAKAKRELGKPVFTAAEKLIFAAAAAAALAAAYALHSGLIT 485

Query: 482 L 482
           L
Sbjct: 486 L 486


>TR:I2MAZ0_BURPE I2MAZ0 Arginine/ornithine antiporter OS=Burkholderia pseudomallei
           354e GN=arcD PE=4 SV=1
          Length = 486

 Score =  764 bits (1972), Expect = 0.0
 Identities = 378/481 (78%), Positives = 425/481 (88%), Gaps = 6/481 (1%)

Query: 2   SQESSQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVF 61
           ++ ++ KLRLGALTALVVGSMIGGGIFSLPQNMAA+A+ GA+LIGWAITA+GMLTLAFVF
Sbjct: 12  AKSAANKLRLGALTALVVGSMIGGGIFSLPQNMAATAEAGAILIGWAITAIGMLTLAFVF 71

Query: 62  QTLANRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIF 121
           QTLANRKP+LDGGVYAYA+AGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFP+F
Sbjct: 72  QTLANRKPQLDGGVYAYAQAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPVF 131

Query: 122 GKGDTVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDI 181
           G+G+T AAI  ASVLLWA+HFLVLRGI+EAAF+N VTTVAK+VPL +FILI  FAFKLD+
Sbjct: 132 GEGNTPAAIAGASVLLWAVHFLVLRGIREAAFVNLVTTVAKIVPLVVFILIGFFAFKLDV 191

Query: 182 FTADIWGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFIT 241
           F  DIWG++NP LGSVMNQVRNMMLVTVWVFIGIEGASIFS+RAEKRSDVG+ATVIGF+ 
Sbjct: 192 FRTDIWGRANPSLGSVMNQVRNMMLVTVWVFIGIEGASIFSARAEKRSDVGRATVIGFVG 251

Query: 242 VLLLLVLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSW 301
           VLL LVLVNVLS+G+MTQP+LAKLQNPSMA VLEHVVGHWGAVLISVGL++SL GALLSW
Sbjct: 252 VLLALVLVNVLSLGIMTQPQLAKLQNPSMAAVLEHVVGHWGAVLISVGLVVSLAGALLSW 311

Query: 302 VLLCAEIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDP 361
           VLLCAEIMF+AAKD TMP FLR+ENAN VPANALWLTN  VQVFL++  F+         
Sbjct: 312 VLLCAEIMFSAAKDRTMPAFLRKENANHVPANALWLTNAMVQVFLLITLFS------QST 365

Query: 362 YTKMLLLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYA 421
           Y  ++ LATSMILIPYFWSAAY LL+ ++GETYE DAR R KDL +A +AV YAVWLLYA
Sbjct: 366 YLSLIYLATSMILIPYFWSAAYALLIAVRGETYEGDARARRKDLFVAALAVLYAVWLLYA 425

Query: 422 GGLKYLLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLT 481
           GGLKYLLLSALLYAPGA+ FAKAK E+G+P+FT  EKLIFAA    AL AAY L+ G +T
Sbjct: 426 GGLKYLLLSALLYAPGALFFAKAKRELGKPVFTAAEKLIFAAAAAAALAAAYALHSGLIT 485

Query: 482 L 482
           L
Sbjct: 486 L 486


>TR:I2LK17_BURPE I2LK17 Arginine/ornithine antiporter OS=Burkholderia pseudomallei
           1258b GN=arcD PE=4 SV=1
          Length = 486

 Score =  764 bits (1972), Expect = 0.0
 Identities = 378/481 (78%), Positives = 425/481 (88%), Gaps = 6/481 (1%)

Query: 2   SQESSQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVF 61
           ++ ++ KLRLGALTALVVGSMIGGGIFSLPQNMAA+A+ GA+LIGWAITA+GMLTLAFVF
Sbjct: 12  AKSAANKLRLGALTALVVGSMIGGGIFSLPQNMAATAEAGAILIGWAITAIGMLTLAFVF 71

Query: 62  QTLANRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIF 121
           QTLANRKP+LDGGVYAYA+AGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFP+F
Sbjct: 72  QTLANRKPQLDGGVYAYAQAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPVF 131

Query: 122 GKGDTVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDI 181
           G+G+T AAI  ASVLLWA+HFLVLRGI+EAAF+N VTTVAK+VPL +FILI  FAFKLD+
Sbjct: 132 GEGNTPAAIAGASVLLWAVHFLVLRGIREAAFVNLVTTVAKIVPLVVFILIGFFAFKLDV 191

Query: 182 FTADIWGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFIT 241
           F  DIWG++NP LGSVMNQVRNMMLVTVWVFIGIEGASIFS+RAEKRSDVG+ATVIGF+ 
Sbjct: 192 FRTDIWGRANPSLGSVMNQVRNMMLVTVWVFIGIEGASIFSARAEKRSDVGRATVIGFVG 251

Query: 242 VLLLLVLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSW 301
           VLL LVLVNVLS+G+MTQP+LAKLQNPSMA VLEHVVGHWGAVLISVGL++SL GALLSW
Sbjct: 252 VLLALVLVNVLSLGIMTQPQLAKLQNPSMAAVLEHVVGHWGAVLISVGLVVSLAGALLSW 311

Query: 302 VLLCAEIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDP 361
           VLLCAEIMF+AAKD TMP FLR+ENAN VPANALWLTN  VQVFL++  F+         
Sbjct: 312 VLLCAEIMFSAAKDRTMPAFLRKENANHVPANALWLTNAMVQVFLLITLFS------QST 365

Query: 362 YTKMLLLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYA 421
           Y  ++ LATSMILIPYFWSAAY LL+ ++GETYE DAR R KDL +A +AV YAVWLLYA
Sbjct: 366 YLSLIYLATSMILIPYFWSAAYALLIAVRGETYEGDARARRKDLFVAALAVLYAVWLLYA 425

Query: 422 GGLKYLLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLT 481
           GGLKYLLLSALLYAPGA+ FAKAK E+G+P+FT  EKLIFAA    AL AAY L+ G +T
Sbjct: 426 GGLKYLLLSALLYAPGALFFAKAKRELGKPVFTAAEKLIFAAAAAAALAAAYALHSGLIT 485

Query: 482 L 482
           L
Sbjct: 486 L 486


>TR:I2LD81_BURPE I2LD81 Arginine/ornithine antiporter OS=Burkholderia pseudomallei
           1258a GN=arcD PE=4 SV=1
          Length = 486

 Score =  764 bits (1972), Expect = 0.0
 Identities = 378/481 (78%), Positives = 425/481 (88%), Gaps = 6/481 (1%)

Query: 2   SQESSQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVF 61
           ++ ++ KLRLGALTALVVGSMIGGGIFSLPQNMAA+A+ GA+LIGWAITA+GMLTLAFVF
Sbjct: 12  AKSAANKLRLGALTALVVGSMIGGGIFSLPQNMAATAEAGAILIGWAITAIGMLTLAFVF 71

Query: 62  QTLANRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIF 121
           QTLANRKP+LDGGVYAYA+AGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFP+F
Sbjct: 72  QTLANRKPQLDGGVYAYAQAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPVF 131

Query: 122 GKGDTVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDI 181
           G+G+T AAI  ASVLLWA+HFLVLRGI+EAAF+N VTTVAK+VPL +FILI  FAFKLD+
Sbjct: 132 GEGNTPAAIAGASVLLWAVHFLVLRGIREAAFVNLVTTVAKIVPLVVFILIGFFAFKLDV 191

Query: 182 FTADIWGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFIT 241
           F  DIWG++NP LGSVMNQVRNMMLVTVWVFIGIEGASIFS+RAEKRSDVG+ATVIGF+ 
Sbjct: 192 FRTDIWGRANPSLGSVMNQVRNMMLVTVWVFIGIEGASIFSARAEKRSDVGRATVIGFVG 251

Query: 242 VLLLLVLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSW 301
           VLL LVLVNVLS+G+MTQP+LAKLQNPSMA VLEHVVGHWGAVLISVGL++SL GALLSW
Sbjct: 252 VLLALVLVNVLSLGIMTQPQLAKLQNPSMAAVLEHVVGHWGAVLISVGLVVSLAGALLSW 311

Query: 302 VLLCAEIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDP 361
           VLLCAEIMF+AAKD TMP FLR+ENAN VPANALWLTN  VQVFL++  F+         
Sbjct: 312 VLLCAEIMFSAAKDRTMPAFLRKENANHVPANALWLTNAMVQVFLLITLFS------QST 365

Query: 362 YTKMLLLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYA 421
           Y  ++ LATSMILIPYFWSAAY LL+ ++GETYE DAR R KDL +A +AV YAVWLLYA
Sbjct: 366 YLSLIYLATSMILIPYFWSAAYALLIAVRGETYEGDARARRKDLFVAALAVLYAVWLLYA 425

Query: 422 GGLKYLLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLT 481
           GGLKYLLLSALLYAPGA+ FAKAK E+G+P+FT  EKLIFAA    AL AAY L+ G +T
Sbjct: 426 GGLKYLLLSALLYAPGALFFAKAKRELGKPVFTAAEKLIFAAAAAAALAAAYALHSGLIT 485

Query: 482 L 482
           L
Sbjct: 486 L 486


>TR:C5ZGC6_BURPE C5ZGC6 Arginine/ornithine antiporter OS=Burkholderia pseudomallei
           1106b GN=arcD PE=4 SV=1
          Length = 486

 Score =  764 bits (1972), Expect = 0.0
 Identities = 378/481 (78%), Positives = 425/481 (88%), Gaps = 6/481 (1%)

Query: 2   SQESSQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVF 61
           ++ ++ KLRLGALTALVVGSMIGGGIFSLPQNMAA+A+ GA+LIGWAITA+GMLTLAFVF
Sbjct: 12  AKSAANKLRLGALTALVVGSMIGGGIFSLPQNMAATAEAGAILIGWAITAIGMLTLAFVF 71

Query: 62  QTLANRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIF 121
           QTLANRKP+LDGGVYAYA+AGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFP+F
Sbjct: 72  QTLANRKPQLDGGVYAYAQAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPVF 131

Query: 122 GKGDTVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDI 181
           G+G+T AAI  ASVLLWA+HFLVLRGI+EAAF+N VTTVAK+VPL +FILI  FAFKLD+
Sbjct: 132 GEGNTPAAIAGASVLLWAVHFLVLRGIREAAFVNLVTTVAKIVPLVVFILIGFFAFKLDV 191

Query: 182 FTADIWGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFIT 241
           F  DIWG++NP LGSVMNQVRNMMLVTVWVFIGIEGASIFS+RAEKRSDVG+ATVIGF+ 
Sbjct: 192 FRTDIWGRANPSLGSVMNQVRNMMLVTVWVFIGIEGASIFSARAEKRSDVGRATVIGFVG 251

Query: 242 VLLLLVLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSW 301
           VLL LVLVNVLS+G+MTQP+LAKLQNPSMA VLEHVVGHWGAVLISVGL++SL GALLSW
Sbjct: 252 VLLALVLVNVLSLGIMTQPQLAKLQNPSMAAVLEHVVGHWGAVLISVGLVVSLAGALLSW 311

Query: 302 VLLCAEIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDP 361
           VLLCAEIMF+AAKD TMP FLR+ENAN VPANALWLTN  VQVFL++  F+         
Sbjct: 312 VLLCAEIMFSAAKDRTMPAFLRKENANHVPANALWLTNAMVQVFLLITLFS------QST 365

Query: 362 YTKMLLLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYA 421
           Y  ++ LATSMILIPYFWSAAY LL+ ++GETYE DAR R KDL +A +AV YAVWLLYA
Sbjct: 366 YLSLIYLATSMILIPYFWSAAYALLIAVRGETYEGDARARRKDLFVAALAVLYAVWLLYA 425

Query: 422 GGLKYLLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLT 481
           GGLKYLLLSALLYAPGA+ FAKAK E+G+P+FT  EKLIFAA    AL AAY L+ G +T
Sbjct: 426 GGLKYLLLSALLYAPGALFFAKAKRELGKPVFTAAEKLIFAAAAAAALAAAYALHSGLIT 485

Query: 482 L 482
           L
Sbjct: 486 L 486


>TR:C5NHG6_BURML C5NHG6 Arginine/ornithine antiporter OS=Burkholderia mallei PRL-20
           GN=arcD PE=4 SV=1
          Length = 486

 Score =  764 bits (1972), Expect = 0.0
 Identities = 378/481 (78%), Positives = 425/481 (88%), Gaps = 6/481 (1%)

Query: 2   SQESSQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVF 61
           ++ ++ KLRLGALTALVVGSMIGGGIFSLPQNMAA+A+ GA+LIGWAITA+GMLTLAFVF
Sbjct: 12  AKSAANKLRLGALTALVVGSMIGGGIFSLPQNMAATAEAGAILIGWAITAIGMLTLAFVF 71

Query: 62  QTLANRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIF 121
           QTLANRKP+LDGGVYAYA+AGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFP+F
Sbjct: 72  QTLANRKPQLDGGVYAYAQAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPVF 131

Query: 122 GKGDTVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDI 181
           G+G+T AAI  ASVLLWA+HFLVLRGI+EAAF+N VTTVAK+VPL +FILI  FAFKLD+
Sbjct: 132 GEGNTPAAIAGASVLLWAVHFLVLRGIREAAFVNLVTTVAKIVPLVVFILIGFFAFKLDV 191

Query: 182 FTADIWGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFIT 241
           F  DIWG++NP LGSVMNQVRNMMLVTVWVFIGIEGASIFS+RAEKRSDVG+ATVIGF+ 
Sbjct: 192 FRTDIWGRANPSLGSVMNQVRNMMLVTVWVFIGIEGASIFSARAEKRSDVGRATVIGFVG 251

Query: 242 VLLLLVLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSW 301
           VLL LVLVNVLS+G+MTQP+LAKLQNPSMA VLEHVVGHWGAVLISVGL++SL GALLSW
Sbjct: 252 VLLALVLVNVLSLGIMTQPQLAKLQNPSMAAVLEHVVGHWGAVLISVGLVVSLAGALLSW 311

Query: 302 VLLCAEIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDP 361
           VLLCAEIMF+AAKD TMP FLR+ENAN VPANALWLTN  VQVFL++  F+         
Sbjct: 312 VLLCAEIMFSAAKDRTMPAFLRKENANHVPANALWLTNAMVQVFLLITLFS------QST 365

Query: 362 YTKMLLLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYA 421
           Y  ++ LATSMILIPYFWSAAY LL+ ++GETYE DAR R KDL +A +AV YAVWLLYA
Sbjct: 366 YLSLIYLATSMILIPYFWSAAYALLIAVRGETYEGDARARRKDLFVAALAVLYAVWLLYA 425

Query: 422 GGLKYLLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLT 481
           GGLKYLLLSALLYAPGA+ FAKAK E+G+P+FT  EKLIFAA    AL AAY L+ G +T
Sbjct: 426 GGLKYLLLSALLYAPGALFFAKAKRELGKPVFTAAEKLIFAAAAAAALAAAYALHSGLIT 485

Query: 482 L 482
           L
Sbjct: 486 L 486


>TR:C0Y7E0_BURPE C0Y7E0 Arginine/ornithine antiporter OS=Burkholderia pseudomallei
           Pakistan 9 GN=arcD PE=4 SV=1
          Length = 486

 Score =  764 bits (1972), Expect = 0.0
 Identities = 378/481 (78%), Positives = 425/481 (88%), Gaps = 6/481 (1%)

Query: 2   SQESSQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVF 61
           ++ ++ KLRLGALTALVVGSMIGGGIFSLPQNMAA+A+ GA+LIGWAITA+GMLTLAFVF
Sbjct: 12  AKSAANKLRLGALTALVVGSMIGGGIFSLPQNMAATAEAGAILIGWAITAIGMLTLAFVF 71

Query: 62  QTLANRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIF 121
           QTLANRKP+LDGGVYAYA+AGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFP+F
Sbjct: 72  QTLANRKPQLDGGVYAYAQAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPVF 131

Query: 122 GKGDTVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDI 181
           G+G+T AAI  ASVLLWA+HFLVLRGI+EAAF+N VTTVAK+VPL +FILI  FAFKLD+
Sbjct: 132 GEGNTPAAIAGASVLLWAVHFLVLRGIREAAFVNLVTTVAKIVPLVVFILIGFFAFKLDV 191

Query: 182 FTADIWGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFIT 241
           F  DIWG++NP LGSVMNQVRNMMLVTVWVFIGIEGASIFS+RAEKRSDVG+ATVIGF+ 
Sbjct: 192 FRTDIWGRANPSLGSVMNQVRNMMLVTVWVFIGIEGASIFSARAEKRSDVGRATVIGFVG 251

Query: 242 VLLLLVLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSW 301
           VLL LVLVNVLS+G+MTQP+LAKLQNPSMA VLEHVVGHWGAVLISVGL++SL GALLSW
Sbjct: 252 VLLALVLVNVLSLGIMTQPQLAKLQNPSMAAVLEHVVGHWGAVLISVGLVVSLAGALLSW 311

Query: 302 VLLCAEIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDP 361
           VLLCAEIMF+AAKD TMP FLR+ENAN VPANALWLTN  VQVFL++  F+         
Sbjct: 312 VLLCAEIMFSAAKDRTMPAFLRKENANHVPANALWLTNAMVQVFLLITLFS------QST 365

Query: 362 YTKMLLLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYA 421
           Y  ++ LATSMILIPYFWSAAY LL+ ++GETYE DAR R KDL +A +AV YAVWLLYA
Sbjct: 366 YLSLIYLATSMILIPYFWSAAYALLIAVRGETYEGDARARRKDLFVAALAVLYAVWLLYA 425

Query: 422 GGLKYLLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLT 481
           GGLKYLLLSALLYAPGA+ FAKAK E+G+P+FT  EKLIFAA    AL AAY L+ G +T
Sbjct: 426 GGLKYLLLSALLYAPGALFFAKAKRELGKPVFTAAEKLIFAAAAAAALAAAYALHSGLIT 485

Query: 482 L 482
           L
Sbjct: 486 L 486


>TR:B7CPI3_BURPE B7CPI3 Arginine/ornithine antiporter OS=Burkholderia pseudomallei
           576 GN=arcD PE=4 SV=1
          Length = 486

 Score =  764 bits (1972), Expect = 0.0
 Identities = 378/481 (78%), Positives = 425/481 (88%), Gaps = 6/481 (1%)

Query: 2   SQESSQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVF 61
           ++ ++ KLRLGALTALVVGSMIGGGIFSLPQNMAA+A+ GA+LIGWAITA+GMLTLAFVF
Sbjct: 12  AKSAANKLRLGALTALVVGSMIGGGIFSLPQNMAATAEAGAILIGWAITAIGMLTLAFVF 71

Query: 62  QTLANRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIF 121
           QTLANRKP+LDGGVYAYA+AGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFP+F
Sbjct: 72  QTLANRKPQLDGGVYAYAQAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPVF 131

Query: 122 GKGDTVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDI 181
           G+G+T AAI  ASVLLWA+HFLVLRGI+EAAF+N VTTVAK+VPL +FILI  FAFKLD+
Sbjct: 132 GEGNTPAAIAGASVLLWAVHFLVLRGIREAAFVNLVTTVAKIVPLVVFILIGFFAFKLDV 191

Query: 182 FTADIWGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFIT 241
           F  DIWG++NP LGSVMNQVRNMMLVTVWVFIGIEGASIFS+RAEKRSDVG+ATVIGF+ 
Sbjct: 192 FRTDIWGRANPSLGSVMNQVRNMMLVTVWVFIGIEGASIFSARAEKRSDVGRATVIGFVG 251

Query: 242 VLLLLVLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSW 301
           VLL LVLVNVLS+G+MTQP+LAKLQNPSMA VLEHVVGHWGAVLISVGL++SL GALLSW
Sbjct: 252 VLLALVLVNVLSLGIMTQPQLAKLQNPSMAAVLEHVVGHWGAVLISVGLVVSLAGALLSW 311

Query: 302 VLLCAEIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDP 361
           VLLCAEIMF+AAKD TMP FLR+ENAN VPANALWLTN  VQVFL++  F+         
Sbjct: 312 VLLCAEIMFSAAKDRTMPAFLRKENANHVPANALWLTNAMVQVFLLITLFS------QST 365

Query: 362 YTKMLLLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYA 421
           Y  ++ LATSMILIPYFWSAAY LL+ ++GETYE DAR R KDL +A +AV YAVWLLYA
Sbjct: 366 YLSLIYLATSMILIPYFWSAAYALLIAVRGETYEGDARARRKDLFVAALAVLYAVWLLYA 425

Query: 422 GGLKYLLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLT 481
           GGLKYLLLSALLYAPGA+ FAKAK E+G+P+FT  EKLIFAA    AL AAY L+ G +T
Sbjct: 426 GGLKYLLLSALLYAPGALFFAKAKRELGKPVFTAAEKLIFAAAAAAALAAAYALHSGLIT 485

Query: 482 L 482
           L
Sbjct: 486 L 486


>TR:B2GY78_BURPE B2GY78 Arginine/ornithine antiporter OS=Burkholderia pseudomallei
           1655 GN=arcD PE=4 SV=1
          Length = 486

 Score =  764 bits (1972), Expect = 0.0
 Identities = 378/481 (78%), Positives = 425/481 (88%), Gaps = 6/481 (1%)

Query: 2   SQESSQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVF 61
           ++ ++ KLRLGALTALVVGSMIGGGIFSLPQNMAA+A+ GA+LIGWAITA+GMLTLAFVF
Sbjct: 12  AKSAANKLRLGALTALVVGSMIGGGIFSLPQNMAATAEAGAILIGWAITAIGMLTLAFVF 71

Query: 62  QTLANRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIF 121
           QTLANRKP+LDGGVYAYA+AGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFP+F
Sbjct: 72  QTLANRKPQLDGGVYAYAQAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPVF 131

Query: 122 GKGDTVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDI 181
           G+G+T AAI  ASVLLWA+HFLVLRGI+EAAF+N VTTVAK+VPL +FILI  FAFKLD+
Sbjct: 132 GEGNTPAAIAGASVLLWAVHFLVLRGIREAAFVNLVTTVAKIVPLVVFILIGFFAFKLDV 191

Query: 182 FTADIWGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFIT 241
           F  DIWG++NP LGSVMNQVRNMMLVTVWVFIGIEGASIFS+RAEKRSDVG+ATVIGF+ 
Sbjct: 192 FRTDIWGRANPSLGSVMNQVRNMMLVTVWVFIGIEGASIFSARAEKRSDVGRATVIGFVG 251

Query: 242 VLLLLVLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSW 301
           VLL LVLVNVLS+G+MTQP+LAKLQNPSMA VLEHVVGHWGAVLISVGL++SL GALLSW
Sbjct: 252 VLLALVLVNVLSLGIMTQPQLAKLQNPSMAAVLEHVVGHWGAVLISVGLVVSLAGALLSW 311

Query: 302 VLLCAEIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDP 361
           VLLCAEIMF+AAKD TMP FLR+ENAN VPANALWLTN  VQVFL++  F+         
Sbjct: 312 VLLCAEIMFSAAKDRTMPAFLRKENANHVPANALWLTNAMVQVFLLITLFS------QST 365

Query: 362 YTKMLLLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYA 421
           Y  ++ LATSMILIPYFWSAAY LL+ ++GETYE DAR R KDL +A +AV YAVWLLYA
Sbjct: 366 YLSLIYLATSMILIPYFWSAAYALLIAVRGETYEGDARARRKDLFVAALAVLYAVWLLYA 425

Query: 422 GGLKYLLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLT 481
           GGLKYLLLSALLYAPGA+ FAKAK E+G+P+FT  EKLIFAA    AL AAY L+ G +T
Sbjct: 426 GGLKYLLLSALLYAPGALFFAKAKRELGKPVFTAAEKLIFAAAAAAALAAAYALHSGLIT 485

Query: 482 L 482
           L
Sbjct: 486 L 486


>TR:B1HJ22_BURPE B1HJ22 Arginine/ornithine antiporter OS=Burkholderia pseudomallei
           S13 GN=arcD PE=4 SV=1
          Length = 486

 Score =  764 bits (1972), Expect = 0.0
 Identities = 378/481 (78%), Positives = 425/481 (88%), Gaps = 6/481 (1%)

Query: 2   SQESSQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVF 61
           ++ ++ KLRLGALTALVVGSMIGGGIFSLPQNMAA+A+ GA+LIGWAITA+GMLTLAFVF
Sbjct: 12  AKSAANKLRLGALTALVVGSMIGGGIFSLPQNMAATAEAGAILIGWAITAIGMLTLAFVF 71

Query: 62  QTLANRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIF 121
           QTLANRKP+LDGGVYAYA+AGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFP+F
Sbjct: 72  QTLANRKPQLDGGVYAYAQAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPVF 131

Query: 122 GKGDTVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDI 181
           G+G+T AAI  ASVLLWA+HFLVLRGI+EAAF+N VTTVAK+VPL +FILI  FAFKLD+
Sbjct: 132 GEGNTPAAIAGASVLLWAVHFLVLRGIREAAFVNLVTTVAKIVPLVVFILIGFFAFKLDV 191

Query: 182 FTADIWGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFIT 241
           F  DIWG++NP LGSVMNQVRNMMLVTVWVFIGIEGASIFS+RAEKRSDVG+ATVIGF+ 
Sbjct: 192 FRTDIWGRANPSLGSVMNQVRNMMLVTVWVFIGIEGASIFSARAEKRSDVGRATVIGFVG 251

Query: 242 VLLLLVLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSW 301
           VLL LVLVNVLS+G+MTQP+LAKLQNPSMA VLEHVVGHWGAVLISVGL++SL GALLSW
Sbjct: 252 VLLALVLVNVLSLGIMTQPQLAKLQNPSMAAVLEHVVGHWGAVLISVGLVVSLAGALLSW 311

Query: 302 VLLCAEIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDP 361
           VLLCAEIMF+AAKD TMP FLR+ENAN VPANALWLTN  VQVFL++  F+         
Sbjct: 312 VLLCAEIMFSAAKDRTMPAFLRKENANHVPANALWLTNAMVQVFLLITLFS------QST 365

Query: 362 YTKMLLLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYA 421
           Y  ++ LATSMILIPYFWSAAY LL+ ++GETYE DAR R KDL +A +AV YAVWLLYA
Sbjct: 366 YLSLIYLATSMILIPYFWSAAYALLIAVRGETYEGDARARRKDLFVAALAVLYAVWLLYA 425

Query: 422 GGLKYLLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLT 481
           GGLKYLLLSALLYAPGA+ FAKAK E+G+P+FT  EKLIFAA    AL AAY L+ G +T
Sbjct: 426 GGLKYLLLSALLYAPGALFFAKAKRELGKPVFTAAEKLIFAAAAAAALAAAYALHSGLIT 485

Query: 482 L 482
           L
Sbjct: 486 L 486


>TR:A9K8A6_BURML A9K8A6 Arginine/ornithine antiporter OS=Burkholderia mallei ATCC
           10399 GN=arcD PE=4 SV=1
          Length = 486

 Score =  764 bits (1972), Expect = 0.0
 Identities = 378/481 (78%), Positives = 425/481 (88%), Gaps = 6/481 (1%)

Query: 2   SQESSQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVF 61
           ++ ++ KLRLGALTALVVGSMIGGGIFSLPQNMAA+A+ GA+LIGWAITA+GMLTLAFVF
Sbjct: 12  AKSAANKLRLGALTALVVGSMIGGGIFSLPQNMAATAEAGAILIGWAITAIGMLTLAFVF 71

Query: 62  QTLANRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIF 121
           QTLANRKP+LDGGVYAYA+AGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFP+F
Sbjct: 72  QTLANRKPQLDGGVYAYAQAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPVF 131

Query: 122 GKGDTVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDI 181
           G+G+T AAI  ASVLLWA+HFLVLRGI+EAAF+N VTTVAK+VPL +FILI  FAFKLD+
Sbjct: 132 GEGNTPAAIAGASVLLWAVHFLVLRGIREAAFVNLVTTVAKIVPLVVFILIGFFAFKLDV 191

Query: 182 FTADIWGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFIT 241
           F  DIWG++NP LGSVMNQVRNMMLVTVWVFIGIEGASIFS+RAEKRSDVG+ATVIGF+ 
Sbjct: 192 FRTDIWGRANPSLGSVMNQVRNMMLVTVWVFIGIEGASIFSARAEKRSDVGRATVIGFVG 251

Query: 242 VLLLLVLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSW 301
           VLL LVLVNVLS+G+MTQP+LAKLQNPSMA VLEHVVGHWGAVLISVGL++SL GALLSW
Sbjct: 252 VLLALVLVNVLSLGIMTQPQLAKLQNPSMAAVLEHVVGHWGAVLISVGLVVSLAGALLSW 311

Query: 302 VLLCAEIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDP 361
           VLLCAEIMF+AAKD TMP FLR+ENAN VPANALWLTN  VQVFL++  F+         
Sbjct: 312 VLLCAEIMFSAAKDRTMPAFLRKENANHVPANALWLTNAMVQVFLLITLFS------QST 365

Query: 362 YTKMLLLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYA 421
           Y  ++ LATSMILIPYFWSAAY LL+ ++GETYE DAR R KDL +A +AV YAVWLLYA
Sbjct: 366 YLSLIYLATSMILIPYFWSAAYALLIAVRGETYEGDARARRKDLFVAALAVLYAVWLLYA 425

Query: 422 GGLKYLLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLT 481
           GGLKYLLLSALLYAPGA+ FAKAK E+G+P+FT  EKLIFAA    AL AAY L+ G +T
Sbjct: 426 GGLKYLLLSALLYAPGALFFAKAKRELGKPVFTAAEKLIFAAAAAAALAAAYALHSGLIT 485

Query: 482 L 482
           L
Sbjct: 486 L 486


>TR:A8KND7_BURPE A8KND7 Arginine/ornithine antiporter OS=Burkholderia pseudomallei
           Pasteur 52237 GN=arcD PE=4 SV=1
          Length = 486

 Score =  764 bits (1972), Expect = 0.0
 Identities = 378/481 (78%), Positives = 425/481 (88%), Gaps = 6/481 (1%)

Query: 2   SQESSQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVF 61
           ++ ++ KLRLGALTALVVGSMIGGGIFSLPQNMAA+A+ GA+LIGWAITA+GMLTLAFVF
Sbjct: 12  AKSAANKLRLGALTALVVGSMIGGGIFSLPQNMAATAEAGAILIGWAITAIGMLTLAFVF 71

Query: 62  QTLANRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIF 121
           QTLANRKP+LDGGVYAYA+AGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFP+F
Sbjct: 72  QTLANRKPQLDGGVYAYAQAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPVF 131

Query: 122 GKGDTVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDI 181
           G+G+T AAI  ASVLLWA+HFLVLRGI+EAAF+N VTTVAK+VPL +FILI  FAFKLD+
Sbjct: 132 GEGNTPAAIAGASVLLWAVHFLVLRGIREAAFVNLVTTVAKIVPLVVFILIGFFAFKLDV 191

Query: 182 FTADIWGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFIT 241
           F  DIWG++NP LGSVMNQVRNMMLVTVWVFIGIEGASIFS+RAEKRSDVG+ATVIGF+ 
Sbjct: 192 FRTDIWGRANPSLGSVMNQVRNMMLVTVWVFIGIEGASIFSARAEKRSDVGRATVIGFVG 251

Query: 242 VLLLLVLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSW 301
           VLL LVLVNVLS+G+MTQP+LAKLQNPSMA VLEHVVGHWGAVLISVGL++SL GALLSW
Sbjct: 252 VLLALVLVNVLSLGIMTQPQLAKLQNPSMAAVLEHVVGHWGAVLISVGLVVSLAGALLSW 311

Query: 302 VLLCAEIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDP 361
           VLLCAEIMF+AAKD TMP FLR+ENAN VPANALWLTN  VQVFL++  F+         
Sbjct: 312 VLLCAEIMFSAAKDRTMPAFLRKENANHVPANALWLTNAMVQVFLLITLFS------QST 365

Query: 362 YTKMLLLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYA 421
           Y  ++ LATSMILIPYFWSAAY LL+ ++GETYE DAR R KDL +A +AV YAVWLLYA
Sbjct: 366 YLSLIYLATSMILIPYFWSAAYALLIAVRGETYEGDARARRKDLFVAALAVLYAVWLLYA 425

Query: 422 GGLKYLLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLT 481
           GGLKYLLLSALLYAPGA+ FAKAK E+G+P+FT  EKLIFAA    AL AAY L+ G +T
Sbjct: 426 GGLKYLLLSALLYAPGALFFAKAKRELGKPVFTAAEKLIFAAAAAAALAAAYALHSGLIT 485

Query: 482 L 482
           L
Sbjct: 486 L 486


>TR:A8EDQ3_BURPE A8EDQ3 Arginine/ornithine antiporter OS=Burkholderia pseudomallei
           406e GN=arcD PE=4 SV=1
          Length = 486

 Score =  764 bits (1972), Expect = 0.0
 Identities = 378/481 (78%), Positives = 425/481 (88%), Gaps = 6/481 (1%)

Query: 2   SQESSQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVF 61
           ++ ++ KLRLGALTALVVGSMIGGGIFSLPQNMAA+A+ GA+LIGWAITA+GMLTLAFVF
Sbjct: 12  AKSAANKLRLGALTALVVGSMIGGGIFSLPQNMAATAEAGAILIGWAITAIGMLTLAFVF 71

Query: 62  QTLANRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIF 121
           QTLANRKP+LDGGVYAYA+AGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFP+F
Sbjct: 72  QTLANRKPQLDGGVYAYAQAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPVF 131

Query: 122 GKGDTVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDI 181
           G+G+T AAI  ASVLLWA+HFLVLRGI+EAAF+N VTTVAK+VPL +FILI  FAFKLD+
Sbjct: 132 GEGNTPAAIAGASVLLWAVHFLVLRGIREAAFVNLVTTVAKIVPLVVFILIGFFAFKLDV 191

Query: 182 FTADIWGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFIT 241
           F  DIWG++NP LGSVMNQVRNMMLVTVWVFIGIEGASIFS+RAEKRSDVG+ATVIGF+ 
Sbjct: 192 FRTDIWGRANPSLGSVMNQVRNMMLVTVWVFIGIEGASIFSARAEKRSDVGRATVIGFVG 251

Query: 242 VLLLLVLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSW 301
           VLL LVLVNVLS+G+MTQP+LAKLQNPSMA VLEHVVGHWGAVLISVGL++SL GALLSW
Sbjct: 252 VLLALVLVNVLSLGIMTQPQLAKLQNPSMAAVLEHVVGHWGAVLISVGLVVSLAGALLSW 311

Query: 302 VLLCAEIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDP 361
           VLLCAEIMF+AAKD TMP FLR+ENAN VPANALWLTN  VQVFL++  F+         
Sbjct: 312 VLLCAEIMFSAAKDRTMPAFLRKENANHVPANALWLTNAMVQVFLLITLFS------QST 365

Query: 362 YTKMLLLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYA 421
           Y  ++ LATSMILIPYFWSAAY LL+ ++GETYE DAR R KDL +A +AV YAVWLLYA
Sbjct: 366 YLSLIYLATSMILIPYFWSAAYALLIAVRGETYEGDARARRKDLFVAALAVLYAVWLLYA 425

Query: 422 GGLKYLLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLT 481
           GGLKYLLLSALLYAPGA+ FAKAK E+G+P+FT  EKLIFAA    AL AAY L+ G +T
Sbjct: 426 GGLKYLLLSALLYAPGALFFAKAKRELGKPVFTAAEKLIFAAAAAAALAAAYALHSGLIT 485

Query: 482 L 482
           L
Sbjct: 486 L 486


>TR:A5XPF8_BURML A5XPF8 Arginine/ornithine antiporter OS=Burkholderia mallei JHU
           GN=arcD PE=4 SV=1
          Length = 486

 Score =  764 bits (1972), Expect = 0.0
 Identities = 378/481 (78%), Positives = 425/481 (88%), Gaps = 6/481 (1%)

Query: 2   SQESSQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVF 61
           ++ ++ KLRLGALTALVVGSMIGGGIFSLPQNMAA+A+ GA+LIGWAITA+GMLTLAFVF
Sbjct: 12  AKSAANKLRLGALTALVVGSMIGGGIFSLPQNMAATAEAGAILIGWAITAIGMLTLAFVF 71

Query: 62  QTLANRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIF 121
           QTLANRKP+LDGGVYAYA+AGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFP+F
Sbjct: 72  QTLANRKPQLDGGVYAYAQAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPVF 131

Query: 122 GKGDTVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDI 181
           G+G+T AAI  ASVLLWA+HFLVLRGI+EAAF+N VTTVAK+VPL +FILI  FAFKLD+
Sbjct: 132 GEGNTPAAIAGASVLLWAVHFLVLRGIREAAFVNLVTTVAKIVPLVVFILIGFFAFKLDV 191

Query: 182 FTADIWGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFIT 241
           F  DIWG++NP LGSVMNQVRNMMLVTVWVFIGIEGASIFS+RAEKRSDVG+ATVIGF+ 
Sbjct: 192 FRTDIWGRANPSLGSVMNQVRNMMLVTVWVFIGIEGASIFSARAEKRSDVGRATVIGFVG 251

Query: 242 VLLLLVLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSW 301
           VLL LVLVNVLS+G+MTQP+LAKLQNPSMA VLEHVVGHWGAVLISVGL++SL GALLSW
Sbjct: 252 VLLALVLVNVLSLGIMTQPQLAKLQNPSMAAVLEHVVGHWGAVLISVGLVVSLAGALLSW 311

Query: 302 VLLCAEIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDP 361
           VLLCAEIMF+AAKD TMP FLR+ENAN VPANALWLTN  VQVFL++  F+         
Sbjct: 312 VLLCAEIMFSAAKDRTMPAFLRKENANHVPANALWLTNAMVQVFLLITLFS------QST 365

Query: 362 YTKMLLLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYA 421
           Y  ++ LATSMILIPYFWSAAY LL+ ++GETYE DAR R KDL +A +AV YAVWLLYA
Sbjct: 366 YLSLIYLATSMILIPYFWSAAYALLIAVRGETYEGDARARRKDLFVAALAVLYAVWLLYA 425

Query: 422 GGLKYLLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLT 481
           GGLKYLLLSALLYAPGA+ FAKAK E+G+P+FT  EKLIFAA    AL AAY L+ G +T
Sbjct: 426 GGLKYLLLSALLYAPGALFFAKAKRELGKPVFTAAEKLIFAAAAAAALAAAYALHSGLIT 485

Query: 482 L 482
           L
Sbjct: 486 L 486


>TR:A5XG16_BURML A5XG16 Arginine/ornithine antiporter OS=Burkholderia mallei FMH
           GN=arcD PE=4 SV=1
          Length = 486

 Score =  764 bits (1972), Expect = 0.0
 Identities = 378/481 (78%), Positives = 425/481 (88%), Gaps = 6/481 (1%)

Query: 2   SQESSQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVF 61
           ++ ++ KLRLGALTALVVGSMIGGGIFSLPQNMAA+A+ GA+LIGWAITA+GMLTLAFVF
Sbjct: 12  AKSAANKLRLGALTALVVGSMIGGGIFSLPQNMAATAEAGAILIGWAITAIGMLTLAFVF 71

Query: 62  QTLANRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIF 121
           QTLANRKP+LDGGVYAYA+AGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFP+F
Sbjct: 72  QTLANRKPQLDGGVYAYAQAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPVF 131

Query: 122 GKGDTVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDI 181
           G+G+T AAI  ASVLLWA+HFLVLRGI+EAAF+N VTTVAK+VPL +FILI  FAFKLD+
Sbjct: 132 GEGNTPAAIAGASVLLWAVHFLVLRGIREAAFVNLVTTVAKIVPLVVFILIGFFAFKLDV 191

Query: 182 FTADIWGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFIT 241
           F  DIWG++NP LGSVMNQVRNMMLVTVWVFIGIEGASIFS+RAEKRSDVG+ATVIGF+ 
Sbjct: 192 FRTDIWGRANPSLGSVMNQVRNMMLVTVWVFIGIEGASIFSARAEKRSDVGRATVIGFVG 251

Query: 242 VLLLLVLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSW 301
           VLL LVLVNVLS+G+MTQP+LAKLQNPSMA VLEHVVGHWGAVLISVGL++SL GALLSW
Sbjct: 252 VLLALVLVNVLSLGIMTQPQLAKLQNPSMAAVLEHVVGHWGAVLISVGLVVSLAGALLSW 311

Query: 302 VLLCAEIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDP 361
           VLLCAEIMF+AAKD TMP FLR+ENAN VPANALWLTN  VQVFL++  F+         
Sbjct: 312 VLLCAEIMFSAAKDRTMPAFLRKENANHVPANALWLTNAMVQVFLLITLFS------QST 365

Query: 362 YTKMLLLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYA 421
           Y  ++ LATSMILIPYFWSAAY LL+ ++GETYE DAR R KDL +A +AV YAVWLLYA
Sbjct: 366 YLSLIYLATSMILIPYFWSAAYALLIAVRGETYEGDARARRKDLFVAALAVLYAVWLLYA 425

Query: 422 GGLKYLLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLT 481
           GGLKYLLLSALLYAPGA+ FAKAK E+G+P+FT  EKLIFAA    AL AAY L+ G +T
Sbjct: 426 GGLKYLLLSALLYAPGALFFAKAKRELGKPVFTAAEKLIFAAAAAAALAAAYALHSGLIT 485

Query: 482 L 482
           L
Sbjct: 486 L 486


>TR:A5TL47_BURML A5TL47 Arginine/ornithine antiporter OS=Burkholderia mallei
           2002721280 GN=arcD PE=4 SV=1
          Length = 486

 Score =  764 bits (1972), Expect = 0.0
 Identities = 378/481 (78%), Positives = 425/481 (88%), Gaps = 6/481 (1%)

Query: 2   SQESSQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVF 61
           ++ ++ KLRLGALTALVVGSMIGGGIFSLPQNMAA+A+ GA+LIGWAITA+GMLTLAFVF
Sbjct: 12  AKSAANKLRLGALTALVVGSMIGGGIFSLPQNMAATAEAGAILIGWAITAIGMLTLAFVF 71

Query: 62  QTLANRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIF 121
           QTLANRKP+LDGGVYAYA+AGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFP+F
Sbjct: 72  QTLANRKPQLDGGVYAYAQAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPVF 131

Query: 122 GKGDTVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDI 181
           G+G+T AAI  ASVLLWA+HFLVLRGI+EAAF+N VTTVAK+VPL +FILI  FAFKLD+
Sbjct: 132 GEGNTPAAIAGASVLLWAVHFLVLRGIREAAFVNLVTTVAKIVPLVVFILIGFFAFKLDV 191

Query: 182 FTADIWGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFIT 241
           F  DIWG++NP LGSVMNQVRNMMLVTVWVFIGIEGASIFS+RAEKRSDVG+ATVIGF+ 
Sbjct: 192 FRTDIWGRANPSLGSVMNQVRNMMLVTVWVFIGIEGASIFSARAEKRSDVGRATVIGFVG 251

Query: 242 VLLLLVLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSW 301
           VLL LVLVNVLS+G+MTQP+LAKLQNPSMA VLEHVVGHWGAVLISVGL++SL GALLSW
Sbjct: 252 VLLALVLVNVLSLGIMTQPQLAKLQNPSMAAVLEHVVGHWGAVLISVGLVVSLAGALLSW 311

Query: 302 VLLCAEIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDP 361
           VLLCAEIMF+AAKD TMP FLR+ENAN VPANALWLTN  VQVFL++  F+         
Sbjct: 312 VLLCAEIMFSAAKDRTMPAFLRKENANHVPANALWLTNAMVQVFLLITLFS------QST 365

Query: 362 YTKMLLLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYA 421
           Y  ++ LATSMILIPYFWSAAY LL+ ++GETYE DAR R KDL +A +AV YAVWLLYA
Sbjct: 366 YLSLIYLATSMILIPYFWSAAYALLIAVRGETYEGDARARRKDLFVAALAVLYAVWLLYA 425

Query: 422 GGLKYLLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLT 481
           GGLKYLLLSALLYAPGA+ FAKAK E+G+P+FT  EKLIFAA    AL AAY L+ G +T
Sbjct: 426 GGLKYLLLSALLYAPGALFFAKAKRELGKPVFTAAEKLIFAAAAAAALAAAYALHSGLIT 485

Query: 482 L 482
           L
Sbjct: 486 L 486


>TR:A4LBH5_BURPE A4LBH5 Arginine/ornithine antiporter OS=Burkholderia pseudomallei
           305 GN=arcD PE=4 SV=1
          Length = 486

 Score =  764 bits (1972), Expect = 0.0
 Identities = 378/481 (78%), Positives = 425/481 (88%), Gaps = 6/481 (1%)

Query: 2   SQESSQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVF 61
           ++ ++ KLRLGALTALVVGSMIGGGIFSLPQNMAA+A+ GA+LIGWAITA+GMLTLAFVF
Sbjct: 12  AKSAANKLRLGALTALVVGSMIGGGIFSLPQNMAATAEAGAILIGWAITAIGMLTLAFVF 71

Query: 62  QTLANRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIF 121
           QTLANRKP+LDGGVYAYA+AGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFP+F
Sbjct: 72  QTLANRKPQLDGGVYAYAQAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPVF 131

Query: 122 GKGDTVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDI 181
           G+G+T AAI  ASVLLWA+HFLVLRGI+EAAF+N VTTVAK+VPL +FILI  FAFKLD+
Sbjct: 132 GEGNTPAAIAGASVLLWAVHFLVLRGIREAAFVNLVTTVAKIVPLVVFILIGFFAFKLDV 191

Query: 182 FTADIWGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFIT 241
           F  DIWG++NP LGSVMNQVRNMMLVTVWVFIGIEGASIFS+RAEKRSDVG+ATVIGF+ 
Sbjct: 192 FRTDIWGRANPSLGSVMNQVRNMMLVTVWVFIGIEGASIFSARAEKRSDVGRATVIGFVG 251

Query: 242 VLLLLVLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSW 301
           VLL LVLVNVLS+G+MTQP+LAKLQNPSMA VLEHVVGHWGAVLISVGL++SL GALLSW
Sbjct: 252 VLLALVLVNVLSLGIMTQPQLAKLQNPSMAAVLEHVVGHWGAVLISVGLVVSLAGALLSW 311

Query: 302 VLLCAEIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDP 361
           VLLCAEIMF+AAKD TMP FLR+ENAN VPANALWLTN  VQVFL++  F+         
Sbjct: 312 VLLCAEIMFSAAKDRTMPAFLRKENANHVPANALWLTNAMVQVFLLITLFS------QST 365

Query: 362 YTKMLLLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYA 421
           Y  ++ LATSMILIPYFWSAAY LL+ ++GETYE DAR R KDL +A +AV YAVWLLYA
Sbjct: 366 YLSLIYLATSMILIPYFWSAAYALLIAVRGETYEGDARARRKDLFVAALAVLYAVWLLYA 425

Query: 422 GGLKYLLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLT 481
           GGLKYLLLSALLYAPGA+ FAKAK E+G+P+FT  EKLIFAA    AL AAY L+ G +T
Sbjct: 426 GGLKYLLLSALLYAPGALFFAKAKRELGKPVFTAAEKLIFAAAAAAALAAAYALHSGLIT 485

Query: 482 L 482
           L
Sbjct: 486 L 486


>TR:I2LF51_BURPE I2LF51 Arginine/ornithine antiporter OS=Burkholderia pseudomallei
           1026a GN=arcD PE=4 SV=1
          Length = 486

 Score =  763 bits (1971), Expect = 0.0
 Identities = 377/481 (78%), Positives = 425/481 (88%), Gaps = 6/481 (1%)

Query: 2   SQESSQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVF 61
           ++ ++ KLRLGALTALVVGSMIGGGIFSLPQNMAA+A+ GA+LIGWAITA+GMLTLAFVF
Sbjct: 12  AKSAANKLRLGALTALVVGSMIGGGIFSLPQNMAATAEAGAILIGWAITAIGMLTLAFVF 71

Query: 62  QTLANRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIF 121
           QTLANRKP+LDGGVYAYA+AGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFP+F
Sbjct: 72  QTLANRKPQLDGGVYAYAQAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPVF 131

Query: 122 GKGDTVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDI 181
           G+G+T AA+  ASVLLWA+HFLVLRGI+EAAF+N VTTVAK+VPL +FILI  FAFKLD+
Sbjct: 132 GEGNTPAAVAGASVLLWAVHFLVLRGIREAAFVNLVTTVAKIVPLVVFILIGFFAFKLDV 191

Query: 182 FTADIWGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFIT 241
           F  DIWG++NP LGSVMNQVRNMMLVTVWVFIGIEGASIFS+RAEKRSDVG+ATVIGF+ 
Sbjct: 192 FRTDIWGRANPSLGSVMNQVRNMMLVTVWVFIGIEGASIFSARAEKRSDVGRATVIGFVG 251

Query: 242 VLLLLVLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSW 301
           VLL LVLVNVLS+G+MTQP+LAKLQNPSMA VLEHVVGHWGAVLISVGL++SL GALLSW
Sbjct: 252 VLLALVLVNVLSLGIMTQPQLAKLQNPSMAAVLEHVVGHWGAVLISVGLVVSLAGALLSW 311

Query: 302 VLLCAEIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDP 361
           VLLCAEIMF+AAKD TMP FLR+ENAN VPANALWLTN  VQVFL++  F+         
Sbjct: 312 VLLCAEIMFSAAKDRTMPAFLRKENANHVPANALWLTNAMVQVFLLITLFS------QST 365

Query: 362 YTKMLLLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYA 421
           Y  ++ LATSMILIPYFWSAAY LL+ ++GETYE DAR R KDL +A +AV YAVWLLYA
Sbjct: 366 YLSLIYLATSMILIPYFWSAAYALLIAVRGETYEGDARARRKDLFVAALAVLYAVWLLYA 425

Query: 422 GGLKYLLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLT 481
           GGLKYLLLSALLYAPGA+ FAKAK E+G+P+FT  EKLIFAA    AL AAY L+ G +T
Sbjct: 426 GGLKYLLLSALLYAPGALFFAKAKRELGKPVFTAAEKLIFAAAAAAALAAAYALHSGLIT 485

Query: 482 L 482
           L
Sbjct: 486 L 486


>TR:I1WJ80_BURPE I1WJ80 Arginine/ornithine antiporter OS=Burkholderia pseudomallei
           1026b GN=arcD PE=4 SV=1
          Length = 486

 Score =  763 bits (1971), Expect = 0.0
 Identities = 377/481 (78%), Positives = 425/481 (88%), Gaps = 6/481 (1%)

Query: 2   SQESSQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVF 61
           ++ ++ KLRLGALTALVVGSMIGGGIFSLPQNMAA+A+ GA+LIGWAITA+GMLTLAFVF
Sbjct: 12  AKSAANKLRLGALTALVVGSMIGGGIFSLPQNMAATAEAGAILIGWAITAIGMLTLAFVF 71

Query: 62  QTLANRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIF 121
           QTLANRKP+LDGGVYAYA+AGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFP+F
Sbjct: 72  QTLANRKPQLDGGVYAYAQAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPVF 131

Query: 122 GKGDTVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDI 181
           G+G+T AA+  ASVLLWA+HFLVLRGI+EAAF+N VTTVAK+VPL +FILI  FAFKLD+
Sbjct: 132 GEGNTPAAVAGASVLLWAVHFLVLRGIREAAFVNLVTTVAKIVPLVVFILIGFFAFKLDV 191

Query: 182 FTADIWGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFIT 241
           F  DIWG++NP LGSVMNQVRNMMLVTVWVFIGIEGASIFS+RAEKRSDVG+ATVIGF+ 
Sbjct: 192 FRTDIWGRANPSLGSVMNQVRNMMLVTVWVFIGIEGASIFSARAEKRSDVGRATVIGFVG 251

Query: 242 VLLLLVLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSW 301
           VLL LVLVNVLS+G+MTQP+LAKLQNPSMA VLEHVVGHWGAVLISVGL++SL GALLSW
Sbjct: 252 VLLALVLVNVLSLGIMTQPQLAKLQNPSMAAVLEHVVGHWGAVLISVGLVVSLAGALLSW 311

Query: 302 VLLCAEIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDP 361
           VLLCAEIMF+AAKD TMP FLR+ENAN VPANALWLTN  VQVFL++  F+         
Sbjct: 312 VLLCAEIMFSAAKDRTMPAFLRKENANHVPANALWLTNAMVQVFLLITLFS------QST 365

Query: 362 YTKMLLLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYA 421
           Y  ++ LATSMILIPYFWSAAY LL+ ++GETYE DAR R KDL +A +AV YAVWLLYA
Sbjct: 366 YLSLIYLATSMILIPYFWSAAYALLIAVRGETYEGDARARRKDLFVAALAVLYAVWLLYA 425

Query: 422 GGLKYLLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLT 481
           GGLKYLLLSALLYAPGA+ FAKAK E+G+P+FT  EKLIFAA    AL AAY L+ G +T
Sbjct: 426 GGLKYLLLSALLYAPGALFFAKAKRELGKPVFTAAEKLIFAAAAAAALAAAYALHSGLIT 485

Query: 482 L 482
           L
Sbjct: 486 L 486


>TR:Q3JSC9_BURP1 Q3JSC9 Arginine/ornithine antiporter OS=Burkholderia pseudomallei
           (strain 1710b) GN=arcD PE=4 SV=1
          Length = 506

 Score =  764 bits (1972), Expect = 0.0
 Identities = 378/481 (78%), Positives = 425/481 (88%), Gaps = 6/481 (1%)

Query: 2   SQESSQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVF 61
           ++ ++ KLRLGALTALVVGSMIGGGIFSLPQNMAA+A+ GA+LIGWAITA+GMLTLAFVF
Sbjct: 32  AKSAANKLRLGALTALVVGSMIGGGIFSLPQNMAATAEAGAILIGWAITAIGMLTLAFVF 91

Query: 62  QTLANRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIF 121
           QTLANRKP+LDGGVYAYA+AGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFP+F
Sbjct: 92  QTLANRKPQLDGGVYAYAQAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPVF 151

Query: 122 GKGDTVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDI 181
           G+G+T AAI  ASVLLWA+HFLVLRGI+EAAF+N VTTVAK+VPL +FILI  FAFKLD+
Sbjct: 152 GEGNTPAAIAGASVLLWAVHFLVLRGIREAAFVNLVTTVAKIVPLVVFILIGFFAFKLDV 211

Query: 182 FTADIWGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFIT 241
           F  DIWG++NP LGSVMNQVRNMMLVTVWVFIGIEGASIFS+RAEKRSDVG+ATVIGF+ 
Sbjct: 212 FRTDIWGRANPSLGSVMNQVRNMMLVTVWVFIGIEGASIFSARAEKRSDVGRATVIGFVG 271

Query: 242 VLLLLVLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSW 301
           VLL LVLVNVLS+G+MTQP+LAKLQNPSMA VLEHVVGHWGAVLISVGL++SL GALLSW
Sbjct: 272 VLLALVLVNVLSLGIMTQPQLAKLQNPSMAAVLEHVVGHWGAVLISVGLVVSLAGALLSW 331

Query: 302 VLLCAEIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDP 361
           VLLCAEIMF+AAKD TMP FLR+ENAN VPANALWLTN  VQVFL++  F+         
Sbjct: 332 VLLCAEIMFSAAKDRTMPAFLRKENANHVPANALWLTNAMVQVFLLITLFS------QST 385

Query: 362 YTKMLLLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYA 421
           Y  ++ LATSMILIPYFWSAAY LL+ ++GETYE DAR R KDL +A +AV YAVWLLYA
Sbjct: 386 YLSLIYLATSMILIPYFWSAAYALLIAVRGETYEGDARARRKDLFVAALAVLYAVWLLYA 445

Query: 422 GGLKYLLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLT 481
           GGLKYLLLSALLYAPGA+ FAKAK E+G+P+FT  EKLIFAA    AL AAY L+ G +T
Sbjct: 446 GGLKYLLLSALLYAPGALFFAKAKRELGKPVFTAAEKLIFAAAAAAALAAAYALHSGLIT 505

Query: 482 L 482
           L
Sbjct: 506 L 506


>TR:A1V3V7_BURMS A1V3V7 Arginine/ornithine antiporter OS=Burkholderia mallei (strain
           SAVP1) GN=arcD PE=4 SV=1
          Length = 506

 Score =  764 bits (1972), Expect = 0.0
 Identities = 378/481 (78%), Positives = 425/481 (88%), Gaps = 6/481 (1%)

Query: 2   SQESSQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVF 61
           ++ ++ KLRLGALTALVVGSMIGGGIFSLPQNMAA+A+ GA+LIGWAITA+GMLTLAFVF
Sbjct: 32  AKSAANKLRLGALTALVVGSMIGGGIFSLPQNMAATAEAGAILIGWAITAIGMLTLAFVF 91

Query: 62  QTLANRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIF 121
           QTLANRKP+LDGGVYAYA+AGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFP+F
Sbjct: 92  QTLANRKPQLDGGVYAYAQAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPVF 151

Query: 122 GKGDTVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDI 181
           G+G+T AAI  ASVLLWA+HFLVLRGI+EAAF+N VTTVAK+VPL +FILI  FAFKLD+
Sbjct: 152 GEGNTPAAIAGASVLLWAVHFLVLRGIREAAFVNLVTTVAKIVPLVVFILIGFFAFKLDV 211

Query: 182 FTADIWGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFIT 241
           F  DIWG++NP LGSVMNQVRNMMLVTVWVFIGIEGASIFS+RAEKRSDVG+ATVIGF+ 
Sbjct: 212 FRTDIWGRANPSLGSVMNQVRNMMLVTVWVFIGIEGASIFSARAEKRSDVGRATVIGFVG 271

Query: 242 VLLLLVLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSW 301
           VLL LVLVNVLS+G+MTQP+LAKLQNPSMA VLEHVVGHWGAVLISVGL++SL GALLSW
Sbjct: 272 VLLALVLVNVLSLGIMTQPQLAKLQNPSMAAVLEHVVGHWGAVLISVGLVVSLAGALLSW 331

Query: 302 VLLCAEIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDP 361
           VLLCAEIMF+AAKD TMP FLR+ENAN VPANALWLTN  VQVFL++  F+         
Sbjct: 332 VLLCAEIMFSAAKDRTMPAFLRKENANHVPANALWLTNAMVQVFLLITLFS------QST 385

Query: 362 YTKMLLLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYA 421
           Y  ++ LATSMILIPYFWSAAY LL+ ++GETYE DAR R KDL +A +AV YAVWLLYA
Sbjct: 386 YLSLIYLATSMILIPYFWSAAYALLIAVRGETYEGDARARRKDLFVAALAVLYAVWLLYA 445

Query: 422 GGLKYLLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLT 481
           GGLKYLLLSALLYAPGA+ FAKAK E+G+P+FT  EKLIFAA    AL AAY L+ G +T
Sbjct: 446 GGLKYLLLSALLYAPGALFFAKAKRELGKPVFTAAEKLIFAAAAAAALAAAYALHSGLIT 505

Query: 482 L 482
           L
Sbjct: 506 L 506


>TR:C6TPW1_BURPE C6TPW1 Arginine/ornithine antiporter OS=Burkholderia pseudomallei
           1710a GN=arcD PE=4 SV=1
          Length = 506

 Score =  764 bits (1972), Expect = 0.0
 Identities = 378/481 (78%), Positives = 425/481 (88%), Gaps = 6/481 (1%)

Query: 2   SQESSQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVF 61
           ++ ++ KLRLGALTALVVGSMIGGGIFSLPQNMAA+A+ GA+LIGWAITA+GMLTLAFVF
Sbjct: 32  AKSAANKLRLGALTALVVGSMIGGGIFSLPQNMAATAEAGAILIGWAITAIGMLTLAFVF 91

Query: 62  QTLANRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIF 121
           QTLANRKP+LDGGVYAYA+AGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFP+F
Sbjct: 92  QTLANRKPQLDGGVYAYAQAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPVF 151

Query: 122 GKGDTVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDI 181
           G+G+T AAI  ASVLLWA+HFLVLRGI+EAAF+N VTTVAK+VPL +FILI  FAFKLD+
Sbjct: 152 GEGNTPAAIAGASVLLWAVHFLVLRGIREAAFVNLVTTVAKIVPLVVFILIGFFAFKLDV 211

Query: 182 FTADIWGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFIT 241
           F  DIWG++NP LGSVMNQVRNMMLVTVWVFIGIEGASIFS+RAEKRSDVG+ATVIGF+ 
Sbjct: 212 FRTDIWGRANPSLGSVMNQVRNMMLVTVWVFIGIEGASIFSARAEKRSDVGRATVIGFVG 271

Query: 242 VLLLLVLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSW 301
           VLL LVLVNVLS+G+MTQP+LAKLQNPSMA VLEHVVGHWGAVLISVGL++SL GALLSW
Sbjct: 272 VLLALVLVNVLSLGIMTQPQLAKLQNPSMAAVLEHVVGHWGAVLISVGLVVSLAGALLSW 331

Query: 302 VLLCAEIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDP 361
           VLLCAEIMF+AAKD TMP FLR+ENAN VPANALWLTN  VQVFL++  F+         
Sbjct: 332 VLLCAEIMFSAAKDRTMPAFLRKENANHVPANALWLTNAMVQVFLLITLFS------QST 385

Query: 362 YTKMLLLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYA 421
           Y  ++ LATSMILIPYFWSAAY LL+ ++GETYE DAR R KDL +A +AV YAVWLLYA
Sbjct: 386 YLSLIYLATSMILIPYFWSAAYALLIAVRGETYEGDARARRKDLFVAALAVLYAVWLLYA 445

Query: 422 GGLKYLLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLT 481
           GGLKYLLLSALLYAPGA+ FAKAK E+G+P+FT  EKLIFAA    AL AAY L+ G +T
Sbjct: 446 GGLKYLLLSALLYAPGALFFAKAKRELGKPVFTAAEKLIFAAAAAAALAAAYALHSGLIT 505

Query: 482 L 482
           L
Sbjct: 506 L 506


>TR:C4AZK0_BURML C4AZK0 Arginine/ornithine antiporter OS=Burkholderia mallei GB8
           horse 4 GN=BMAGB8_1203 PE=4 SV=1
          Length = 506

 Score =  764 bits (1972), Expect = 0.0
 Identities = 378/481 (78%), Positives = 425/481 (88%), Gaps = 6/481 (1%)

Query: 2   SQESSQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVF 61
           ++ ++ KLRLGALTALVVGSMIGGGIFSLPQNMAA+A+ GA+LIGWAITA+GMLTLAFVF
Sbjct: 32  AKSAANKLRLGALTALVVGSMIGGGIFSLPQNMAATAEAGAILIGWAITAIGMLTLAFVF 91

Query: 62  QTLANRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIF 121
           QTLANRKP+LDGGVYAYA+AGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFP+F
Sbjct: 92  QTLANRKPQLDGGVYAYAQAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPVF 151

Query: 122 GKGDTVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDI 181
           G+G+T AAI  ASVLLWA+HFLVLRGI+EAAF+N VTTVAK+VPL +FILI  FAFKLD+
Sbjct: 152 GEGNTPAAIAGASVLLWAVHFLVLRGIREAAFVNLVTTVAKIVPLVVFILIGFFAFKLDV 211

Query: 182 FTADIWGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFIT 241
           F  DIWG++NP LGSVMNQVRNMMLVTVWVFIGIEGASIFS+RAEKRSDVG+ATVIGF+ 
Sbjct: 212 FRTDIWGRANPSLGSVMNQVRNMMLVTVWVFIGIEGASIFSARAEKRSDVGRATVIGFVG 271

Query: 242 VLLLLVLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSW 301
           VLL LVLVNVLS+G+MTQP+LAKLQNPSMA VLEHVVGHWGAVLISVGL++SL GALLSW
Sbjct: 272 VLLALVLVNVLSLGIMTQPQLAKLQNPSMAAVLEHVVGHWGAVLISVGLVVSLAGALLSW 331

Query: 302 VLLCAEIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDP 361
           VLLCAEIMF+AAKD TMP FLR+ENAN VPANALWLTN  VQVFL++  F+         
Sbjct: 332 VLLCAEIMFSAAKDRTMPAFLRKENANHVPANALWLTNAMVQVFLLITLFS------QST 385

Query: 362 YTKMLLLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYA 421
           Y  ++ LATSMILIPYFWSAAY LL+ ++GETYE DAR R KDL +A +AV YAVWLLYA
Sbjct: 386 YLSLIYLATSMILIPYFWSAAYALLIAVRGETYEGDARARRKDLFVAALAVLYAVWLLYA 445

Query: 422 GGLKYLLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLT 481
           GGLKYLLLSALLYAPGA+ FAKAK E+G+P+FT  EKLIFAA    AL AAY L+ G +T
Sbjct: 446 GGLKYLLLSALLYAPGALFFAKAKRELGKPVFTAAEKLIFAAAAAAALAAAYALHSGLIT 505

Query: 482 L 482
           L
Sbjct: 506 L 506


>TR:C4KY12_BURPE C4KY12 Arginine/ornithine antiporter OS=Burkholderia pseudomallei
           MSHR346 GN=GBP346_A2013 PE=4 SV=1
          Length = 486

 Score =  762 bits (1968), Expect = 0.0
 Identities = 377/481 (78%), Positives = 425/481 (88%), Gaps = 6/481 (1%)

Query: 2   SQESSQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVF 61
           ++ ++ KLRLGALTALVVGSMIGGGIFSLPQNMAA+A+ GA+LIGWAITA+GMLTLAFVF
Sbjct: 12  AKSAANKLRLGALTALVVGSMIGGGIFSLPQNMAATAEAGAILIGWAITAIGMLTLAFVF 71

Query: 62  QTLANRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIF 121
           QTLANR+P+LDGGVYAYA+AGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFP+F
Sbjct: 72  QTLANREPQLDGGVYAYAQAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPVF 131

Query: 122 GKGDTVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDI 181
           G+G+T AAI  ASVLLWA+HFLVLRGI+EAAF+N VTTVAK+VPL +FILI  FAFKLD+
Sbjct: 132 GEGNTPAAIAGASVLLWAVHFLVLRGIREAAFVNLVTTVAKIVPLVVFILIGFFAFKLDV 191

Query: 182 FTADIWGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFIT 241
           F  DIWG++NP LGSVMNQVRNMMLVTVWVFIGIEGASIFS+RAEKRSDVG+ATVIGF+ 
Sbjct: 192 FRTDIWGRANPSLGSVMNQVRNMMLVTVWVFIGIEGASIFSARAEKRSDVGRATVIGFVG 251

Query: 242 VLLLLVLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSW 301
           VLL LVLVNVLS+G+MTQP+LAKLQNPSMA VLEHVVGHWGAVLISVGL++SL GALLSW
Sbjct: 252 VLLALVLVNVLSLGIMTQPQLAKLQNPSMAAVLEHVVGHWGAVLISVGLVVSLAGALLSW 311

Query: 302 VLLCAEIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDP 361
           VLLCAEIMF+AAKD TMP FLR+ENAN VPANALWLTN  VQVFL++  F+         
Sbjct: 312 VLLCAEIMFSAAKDRTMPAFLRKENANHVPANALWLTNAMVQVFLLITLFS------QST 365

Query: 362 YTKMLLLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYA 421
           Y  ++ LATSMILIPYFWSAAY LL+ ++GETYE DAR R KDL +A +AV YAVWLLYA
Sbjct: 366 YLSLIYLATSMILIPYFWSAAYALLIAVRGETYEGDARARRKDLFVAALAVLYAVWLLYA 425

Query: 422 GGLKYLLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLT 481
           GGLKYLLLSALLYAPGA+ FAKAK E+G+P+FT  EKLIFAA    AL AAY L+ G +T
Sbjct: 426 GGLKYLLLSALLYAPGALFFAKAKRELGKPVFTAAEKLIFAAAAAAALAAAYALHSGLIT 485

Query: 482 L 482
           L
Sbjct: 486 L 486


>TR:A4XRB0_PSEMY A4XRB0 Arginine:ornithine antiporter, APA family (Precursor)
           OS=Pseudomonas mendocina (strain ymp) GN=Pmen_1109 PE=4
           SV=1
          Length = 475

 Score =  753 bits (1944), Expect = 0.0
 Identities = 371/479 (77%), Positives = 424/479 (88%), Gaps = 6/479 (1%)

Query: 4   ESSQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQT 63
           +SSQKLRL AL ALVVGSM+GGGIFSLPQN+AASA  GA LIGW IT VGMLTLAFVFQT
Sbjct: 3   DSSQKLRLAALVALVVGSMVGGGIFSLPQNIAASASAGATLIGWLITGVGMLTLAFVFQT 62

Query: 64  LANRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGK 123
           LANRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAW+GNV Y VLLFSTLGYFFP+FG+
Sbjct: 63  LANRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWIGNVSYMVLLFSTLGYFFPVFGE 122

Query: 124 GDTVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFT 183
           G+T+ A++CASVLLW LHFLVLRGIKEAAFINTVTTVAK++PL LFI+I   AFKLD+FT
Sbjct: 123 GNTLPAVICASVLLWLLHFLVLRGIKEAAFINTVTTVAKMLPLALFIVIAAIAFKLDVFT 182

Query: 184 ADIWGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVL 243
           +D WG+ NP+LGSVM+QVRNMMLVTVWVFIGIEGASIFS+RAEKRSDVGKATVIGF+ VL
Sbjct: 183 SDFWGRGNPELGSVMDQVRNMMLVTVWVFIGIEGASIFSARAEKRSDVGKATVIGFVGVL 242

Query: 244 LLLVLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVL 303
           LLLVLVNVLS G+M Q ELA L+NPSMA VLE VVG WGA LI++GL++SL GALLSW L
Sbjct: 243 LLLVLVNVLSQGIMAQAELAGLKNPSMAGVLEQVVGPWGAQLIAIGLIVSLAGALLSWTL 302

Query: 304 LCAEIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYT 363
           LCAEI+FA+A+DHTMPEFLR+ENANQVPANALWL+N  +Q+FL++  F +        Y 
Sbjct: 303 LCAEILFASARDHTMPEFLRKENANQVPANALWLSNGLIQLFLIITLFNA------STYL 356

Query: 364 KMLLLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYAGG 423
            +L LATSMIL+PYFWS+AY LLL ++GETYE+ A ERSKDL+IA ++  YA+WL+YA G
Sbjct: 357 SLLYLATSMILVPYFWSSAYALLLAVRGETYESAASERSKDLLIALVSTLYAIWLVYAAG 416

Query: 424 LKYLLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           ++YLLLSALLYAPGAILFAKAK E+GQPIFTG+EKLIF AV+IGA +AAYGLYDGFLTL
Sbjct: 417 IQYLLLSALLYAPGAILFAKAKRELGQPIFTGVEKLIFLAVLIGAAIAAYGLYDGFLTL 475


>TR:Q4K7R6_PSEF5 Q4K7R6 Arginine/ornithine antiporter OS=Pseudomonas fluorescens
           (strain Pf-5 / ATCC BAA-477) GN=arcD2 PE=4 SV=1
          Length = 475

 Score =  744 bits (1922), Expect = 0.0
 Identities = 365/479 (76%), Positives = 424/479 (88%), Gaps = 6/479 (1%)

Query: 4   ESSQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQT 63
           + +QKL+LGAL ALVVGSMIGGGIFSLPQNMAA AD GAVLIGWAITAVGMLTLAFVFQT
Sbjct: 3   QPAQKLQLGALIALVVGSMIGGGIFSLPQNMAARADAGAVLIGWAITAVGMLTLAFVFQT 62

Query: 64  LANRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGK 123
           LANRKPELD GVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFP+FG+
Sbjct: 63  LANRKPELDSGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPVFGQ 122

Query: 124 GDTVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFT 183
           G+T  AI CASVLLWA+HFLVLRGIKEAAFIN +TTVAK+VPL +FI+I   AFK DIFT
Sbjct: 123 GNTPVAIGCASVLLWAVHFLVLRGIKEAAFINQLTTVAKIVPLVMFIVIAAVAFKADIFT 182

Query: 184 ADIWGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVL 243
            DIWG+SNP+ G VM+QVRNMMLVTV+VFIGIEGAS++S+RA+KR+DVG+ATVIGF+ VL
Sbjct: 183 RDIWGRSNPNFGGVMDQVRNMMLVTVFVFIGIEGASVYSARAQKRADVGRATVIGFLGVL 242

Query: 244 LLLVLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVL 303
            LLVLVNVLS+G+M+QPELA+LQNPS+A VLEH+VG WGA+LIS+GL +SLLGALLSW L
Sbjct: 243 ALLVLVNVLSLGIMSQPELAQLQNPSLAAVLEHIVGPWGALLISIGLAVSLLGALLSWAL 302

Query: 304 LCAEIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYT 363
           LCAEI++A A+D TMP FL++ENAN VP NALWLTN+ +Q+FL++  F++G       YT
Sbjct: 303 LCAEILYATARDRTMPAFLKKENANHVPVNALWLTNVMIQIFLLITLFSAG------TYT 356

Query: 364 KMLLLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYAGG 423
            ++ LA+SMIL+PY WSAAY +LL+ +GETYE  +RER KDL IA +A++YA+WLLYAGG
Sbjct: 357 SLIYLASSMILVPYLWSAAYAVLLSGRGETYEQASRERKKDLFIATVALSYAIWLLYAGG 416

Query: 424 LKYLLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           LKYLLLSALLYAPG ILFAKAKHE G+P+FT +EKLIFAAVVIGA +AAYGLY G L L
Sbjct: 417 LKYLLLSALLYAPGVILFAKAKHEQGEPLFTPLEKLIFAAVVIGASLAAYGLYSGLLAL 475


>TR:F4DTU5_PSEMN F4DTU5 Arginine/ornithine antiporter OS=Pseudomonas mendocina
           (strain NK-01) GN=MDS_1161 PE=4 SV=1
          Length = 475

 Score =  743 bits (1919), Expect = 0.0
 Identities = 365/479 (76%), Positives = 421/479 (87%), Gaps = 6/479 (1%)

Query: 4   ESSQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQT 63
           +S+QKLRL AL ALVVGSM+GGGIFSLPQN+AASA  GA LIGW IT VGMLTLAFVFQT
Sbjct: 3   DSTQKLRLAALIALVVGSMVGGGIFSLPQNIAASASAGATLIGWLITGVGMLTLAFVFQT 62

Query: 64  LANRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGK 123
           LANRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAW+GNV Y VLLFSTLGYFFP+FG+
Sbjct: 63  LANRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWIGNVSYMVLLFSTLGYFFPVFGE 122

Query: 124 GDTVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFT 183
           G+T+ A++CAS+LLW LHFLVLRGIKEAAFINTVTT+AK+VPL LFI+I   AFK D++T
Sbjct: 123 GNTLPAVICASLLLWLLHFLVLRGIKEAAFINTVTTIAKMVPLALFIIIAAIAFKFDVYT 182

Query: 184 ADIWGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVL 243
           AD WG  N +LGSVM+QVRNMMLVTVWVFIGIEGASIFS+RAEKRSDVGKATV+GF+ VL
Sbjct: 183 ADFWGHGNSELGSVMDQVRNMMLVTVWVFIGIEGASIFSARAEKRSDVGKATVLGFVGVL 242

Query: 244 LLLVLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVL 303
           LLLVLVNVLS G++ Q ELA L+NPSMA VLEHVVG WGA LIS+GL++SL GALLSW L
Sbjct: 243 LLLVLVNVLSQGILAQAELAGLKNPSMAGVLEHVVGPWGAQLISIGLIVSLAGALLSWTL 302

Query: 304 LCAEIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYT 363
           LCAEI+FA+A+DHTMPEFLR+ENAN VPANALWL+N  +Q+FL++  F +        Y 
Sbjct: 303 LCAEILFASARDHTMPEFLRKENANHVPANALWLSNGLIQLFLIITLFNA------STYL 356

Query: 364 KMLLLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYAGG 423
            +L LATSMIL+PYFWS+AY +LL ++GETYE  A ER+KDL+IA I+  YAVWL+YA G
Sbjct: 357 SLLYLATSMILVPYFWSSAYAVLLAVRGETYEKAAGERNKDLLIALISTLYAVWLVYAAG 416

Query: 424 LKYLLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           ++YLLLSALLYAPGAILFAKAK E+GQP+FTG+EKLIFAAV+IGA +AAYGLYDGFL+L
Sbjct: 417 IQYLLLSALLYAPGAILFAKAKRELGQPVFTGLEKLIFAAVLIGAAIAAYGLYDGFLSL 475


>TR:A4VHD2_PSEU5 A4VHD2 Arginine/ornithine antiporter OS=Pseudomonas stutzeri
           (strain A1501) GN=arcD-1 PE=4 SV=1
          Length = 475

 Score =  739 bits (1909), Expect = 0.0
 Identities = 363/479 (75%), Positives = 422/479 (88%), Gaps = 6/479 (1%)

Query: 4   ESSQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQT 63
           +S+QKLRLGAL ALVVGSM+GGGIFSLPQN+AASA  GA LIGW IT VGMLTLAFVFQT
Sbjct: 3   DSTQKLRLGALIALVVGSMVGGGIFSLPQNIAASASAGATLIGWLITGVGMLTLAFVFQT 62

Query: 64  LANRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGK 123
           LANRKP+L+GGVYAYAKAGFGDYMGFSSAWGYWISAW+GNV Y VLLFSTLGYFFP+FG+
Sbjct: 63  LANRKPDLNGGVYAYAKAGFGDYMGFSSAWGYWISAWIGNVSYMVLLFSTLGYFFPVFGE 122

Query: 124 GDTVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFT 183
           G+T+ AI+CAS++LW LHFLVLRGI+EAAFINT+TT+AK++PL LFI+I   AFK+D+FT
Sbjct: 123 GNTLPAIICASIVLWLLHFLVLRGIREAAFINTITTIAKMLPLALFIVIAAVAFKMDVFT 182

Query: 184 ADIWGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVL 243
           +D WG  N +LGSVM+QVRNMMLVTVWVFIGIEGASIFS+RAEKRSDVGKATVIGFI VL
Sbjct: 183 SDFWGSGNTELGSVMDQVRNMMLVTVWVFIGIEGASIFSARAEKRSDVGKATVIGFIGVL 242

Query: 244 LLLVLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVL 303
           LLLVLVN+LS G++ Q ELA L+NPSMA VLE VVG WGA LIS+GL+ISL GALLSW L
Sbjct: 243 LLLVLVNILSQGILAQAELAGLKNPSMAAVLEQVVGPWGAQLISIGLIISLAGALLSWTL 302

Query: 304 LCAEIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYT 363
           LCAEI+FA+A DHTMPEFLR+ENANQVPANALWL+N  +Q+FL++  F+         Y 
Sbjct: 303 LCAEILFASASDHTMPEFLRKENANQVPANALWLSNGLIQLFLIITLFSE------STYL 356

Query: 364 KMLLLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYAGG 423
            +L LATSMIL+PYFWS+AY +LL L+GETYEN A ER+KDL+IA I+  YAVWL+YA G
Sbjct: 357 SLLYLATSMILVPYFWSSAYAVLLALRGETYENAAGERNKDLLIALISTLYAVWLVYAAG 416

Query: 424 LKYLLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           ++YLLLSALLYAPGAILFAKAK E+GQP+FTG+EKLIF AV+IGA +AA+GLYDGFL+L
Sbjct: 417 VQYLLLSALLYAPGAILFAKAKRELGQPVFTGVEKLIFIAVLIGAGIAAFGLYDGFLSL 475


>TR:Q3K7Y3_PSEPF Q3K7Y3 Arginine:ornithine antiporter, APA family (Precursor)
           OS=Pseudomonas fluorescens (strain Pf0-1) GN=Pfl01_4384
           PE=4 SV=1
          Length = 475

 Score =  734 bits (1895), Expect = 0.0
 Identities = 358/479 (74%), Positives = 420/479 (87%), Gaps = 6/479 (1%)

Query: 4   ESSQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQT 63
           + +QKLRLGAL ALVVGSMIGGGIFSLPQNMAA AD GA+LIGW ITA+GMLTLAFVFQT
Sbjct: 3   QPTQKLRLGALIALVVGSMIGGGIFSLPQNMAARADAGAILIGWGITAIGMLTLAFVFQT 62

Query: 64  LANRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGK 123
           LANRKPELD GVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFP+FG+
Sbjct: 63  LANRKPELDSGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPVFGQ 122

Query: 124 GDTVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFT 183
           G+T  AI CASVLLWA+HFLV+RGIKEAA IN +TTVAK++PL +F++I   AFK D+FT
Sbjct: 123 GNTPIAIGCASVLLWAVHFLVMRGIKEAALINQLTTVAKIIPLIMFVVIAAVAFKADVFT 182

Query: 184 ADIWGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVL 243
            DIWG+SNP+ G VM+QVRNMMLVTV+VFIGIEGAS++S+RAEKR+DVG+ATVIGF+ VL
Sbjct: 183 RDIWGRSNPNFGGVMDQVRNMMLVTVFVFIGIEGASVYSARAEKRTDVGRATVIGFLGVL 242

Query: 244 LLLVLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVL 303
            LLVLVNVLS+G+M+QPELA LQNPS+A VLEH+VG WGA+LISVGL ISLLGALLSW L
Sbjct: 243 ALLVLVNVLSLGIMSQPELATLQNPSLAAVLEHIVGPWGALLISVGLAISLLGALLSWAL 302

Query: 304 LCAEIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYT 363
           LCAEI+FA AKD+TMP FL++ENAN VP NALWLTN+ +Q+FL++  F++G       YT
Sbjct: 303 LCAEILFATAKDNTMPAFLKKENANHVPVNALWLTNVMIQIFLLITLFSAG------TYT 356

Query: 364 KMLLLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYAGG 423
            ++ LA+SMIL+PY WSAAY +LL+ +GETYE+ + ER+KDL+I GIA+ YAVWLLYAGG
Sbjct: 357 SLIYLASSMILVPYLWSAAYAVLLSGRGETYEHASAERTKDLLIGGIALCYAVWLLYAGG 416

Query: 424 LKYLLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           +KYLLLSALLYAPG ILFAKAKHE G+P+FT +EK IF  V+ GA +AAYGLY G L+L
Sbjct: 417 VKYLLLSALLYAPGVILFAKAKHEQGEPLFTTLEKGIFTCVIAGAGLAAYGLYSGVLSL 475


>TR:B1YXD0_BURA4 B1YXD0 Arginine/ornithine antiporter OS=Burkholderia ambifaria
           (strain MC40-6) GN=BamMC406_4536 PE=4 SV=1
          Length = 484

 Score =  728 bits (1880), Expect = 0.0
 Identities = 357/481 (74%), Positives = 417/481 (86%), Gaps = 6/481 (1%)

Query: 2   SQESSQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVF 61
           ++ +++KL+LGALTALVVGSMIGGGIFSLPQNMAA+AD GA+LIGW ITAVGML LAFVF
Sbjct: 10  ARPATRKLQLGALTALVVGSMIGGGIFSLPQNMAAAADAGAILIGWGITAVGMLALAFVF 69

Query: 62  QTLANRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIF 121
           QTLANRKP LDGGVYAYA+AGFGDYMGFSSAWGYWISAW+GNVGYFVLLFSTLGYFFP+F
Sbjct: 70  QTLANRKPLLDGGVYAYAQAGFGDYMGFSSAWGYWISAWVGNVGYFVLLFSTLGYFFPMF 129

Query: 122 GKGDTVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDI 181
           G+G+T AAI  ASVLLWA+HFLVLRGI+EAAF+N VTTVAK+VPL +FI I   AF+LD+
Sbjct: 130 GEGNTRAAIAAASVLLWAVHFLVLRGIREAAFVNLVTTVAKIVPLVVFIAIGFVAFRLDV 189

Query: 182 FTADIWGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFIT 241
           F ADIWG +NP LGSV NQ+R+MML TVWVFIGIEGASI+S+RAEKRSDVG+ATVIGF  
Sbjct: 190 FRADIWGHANPSLGSVTNQIRSMMLATVWVFIGIEGASIYSARAEKRSDVGRATVIGFAG 249

Query: 242 VLLLLVLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSW 301
           VLL LVLVN+LS+G+MTQP+LAKLQNPSMA VLEHVVGHWGAV+I VGL++SL+GALLSW
Sbjct: 250 VLLALVLVNLLSLGIMTQPQLAKLQNPSMAAVLEHVVGHWGAVVIGVGLVVSLVGALLSW 309

Query: 302 VLLCAEIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDP 361
           VLLCAEI+F+AAKD TMP FLR+ENAN VPANALWLTN+ VQ+FL++  F  G       
Sbjct: 310 VLLCAEILFSAAKDRTMPAFLRKENANHVPANALWLTNVMVQIFLIITLFAQG------T 363

Query: 362 YTKMLLLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYA 421
           Y  ++ L+TSMILIPYFWSAAY LLL ++GETY  DAR R KD  IA +AV Y +WLLYA
Sbjct: 364 YLSLIYLSTSMILIPYFWSAAYALLLVVRGETYGADARARRKDGCIAALAVTYTMWLLYA 423

Query: 422 GGLKYLLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLT 481
            G+KYLLLSALLY PGA+LFAKAK E+G+P+FT  EK++FAA  + A+VAAY L+ G ++
Sbjct: 424 AGVKYLLLSALLYVPGALLFAKAKRELGKPVFTTAEKIVFAAAAVAAVVAAYALHRGLIS 483

Query: 482 L 482
           L
Sbjct: 484 L 484


>TR:B2JH40_BURP8 B2JH40 Arginine/ornithine antiporter OS=Burkholderia phymatum
           (strain DSM 17167 / STM815) GN=Bphy_1089 PE=4 SV=1
          Length = 493

 Score =  726 bits (1873), Expect = 0.0
 Identities = 361/478 (75%), Positives = 411/478 (85%), Gaps = 6/478 (1%)

Query: 5   SSQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTL 64
           ++ +L LGALTALVVGSMIGGGIFSLPQNMA SA  GAVLIGWAITAVGMLTLAFVFQTL
Sbjct: 22  AAPRLHLGALTALVVGSMIGGGIFSLPQNMAVSAGAGAVLIGWAITAVGMLTLAFVFQTL 81

Query: 65  ANRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKG 124
           ANRKPELDGGVY YAK GFGDYMGFSSAWGYWISAWLGNVGYFVLLF T GYFFP+FG+G
Sbjct: 82  ANRKPELDGGVYIYAKQGFGDYMGFSSAWGYWISAWLGNVGYFVLLFGTFGYFFPVFGEG 141

Query: 125 DTVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTA 184
           +T  AI CASVLLW +HFLVL+GIKEAAF+N VTT+AKVVP+ LFI+IC FAF    F  
Sbjct: 142 NTPVAIACASVLLWGVHFLVLQGIKEAAFVNMVTTIAKVVPIVLFIVICAFAFNAHFFAN 201

Query: 185 DIWGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLL 244
           D +G + P LGSV NQVR  MLVTVWVFIGIEGASIFS+RAEKR+DVGKAT++GFI VLL
Sbjct: 202 DFFGLNTPKLGSVANQVRGTMLVTVWVFIGIEGASIFSARAEKRTDVGKATIMGFIGVLL 261

Query: 245 LLVLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLL 304
           +LVLVNVLS+G+M +P+LA LQNPSMA VLEHVVGHWGA+LISVGL+ISLLGALLSWVLL
Sbjct: 262 VLVLVNVLSLGIMARPDLAALQNPSMAGVLEHVVGHWGAILISVGLVISLLGALLSWVLL 321

Query: 305 CAEIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTK 364
           CAEI+F+AA+D+TMP F+R+ENA +VPANALWLTN   Q FL++  F+ G       Y  
Sbjct: 322 CAEIIFSAARDNTMPSFVRKENAKKVPANALWLTNGLTQAFLLITLFSKG------TYLS 375

Query: 365 MLLLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYAGGL 424
           ++ LATSMIL+PYFWSAAY L +  + ETYE +  +R+KDLV+A IAV YAVWLLYAGGL
Sbjct: 376 LIYLATSMILLPYFWSAAYALRVAWRRETYEQEPAQRNKDLVVATIAVIYAVWLLYAGGL 435

Query: 425 KYLLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           KY+LLSALLYAPGA+LFAKAK E GQP+FT +EKL+FAAVV GALVAA+GLY GFLTL
Sbjct: 436 KYVLLSALLYAPGAVLFAKAKRETGQPVFTLMEKLVFAAVVAGALVAAFGLYKGFLTL 493


>TR:F2N6C0_PSEU6 F2N6C0 Arginine/ornithine antiporter OS=Pseudomonas stutzeri
           (strain DSM 4166 / CMT.9.A) GN=arcD-2 PE=4 SV=1
          Length = 475

 Score =  725 bits (1871), Expect = 0.0
 Identities = 353/478 (73%), Positives = 417/478 (87%), Gaps = 6/478 (1%)

Query: 5   SSQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTL 64
           +S++L+L AL ALV+GSMIGGGIFSLPQNMAASA  GA+LIGWAITAVGMLTLAFVFQ+L
Sbjct: 4   TSKQLKLSALVALVMGSMIGGGIFSLPQNMAASASAGAILIGWAITAVGMLTLAFVFQSL 63

Query: 65  ANRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKG 124
           ANRKPELD GVYAYAKAGFGDYMGFSSAWGYWISAW+GNV YFVLLFSTLGYF P+FG+G
Sbjct: 64  ANRKPELDAGVYAYAKAGFGDYMGFSSAWGYWISAWIGNVSYFVLLFSTLGYFVPMFGEG 123

Query: 125 DTVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTA 184
           +T+ A++ AS++LW +HFLVLRGI+EAAF+N VTT+AK+VPL LFI+I   AF+LD+FTA
Sbjct: 124 NTLPAVIGASLVLWGVHFLVLRGIREAAFVNLVTTIAKIVPLILFIVITAVAFRLDVFTA 183

Query: 185 DIWGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLL 244
           D WG+ NP+LGSVM QVRNMMLVTVWVFIGIEGA++FS+RAE+RSDVG+ATVIGF +VL 
Sbjct: 184 DFWGRGNPELGSVMQQVRNMMLVTVWVFIGIEGANVFSARAERRSDVGRATVIGFYSVLA 243

Query: 245 LLVLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLL 304
           LLVLVN+LSMG+M+Q ELA L+NPSMA VLE VVG WGAVLISVGL++SL GALLSW LL
Sbjct: 244 LLVLVNILSMGIMSQAELAGLKNPSMAGVLEQVVGRWGAVLISVGLVVSLAGALLSWTLL 303

Query: 305 CAEIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTK 364
           CAEI+FAAA+DHTMP FLR+ENA  VP NALWL+N  +Q+FL++  F +        Y  
Sbjct: 304 CAEILFAAARDHTMPSFLRKENARHVPVNALWLSNGLIQLFLIITLFNA------STYLS 357

Query: 365 MLLLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYAGGL 424
           +L LATSMIL+PYFWSAAY LLL ++GE Y N A ER KD +IA +A  YAVWL+YAGG+
Sbjct: 358 LLYLATSMILVPYFWSAAYALLLGVRGEGYANAAGERRKDTLIAAVATLYAVWLVYAGGI 417

Query: 425 KYLLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           +YLLLSALLYAPGA+ FAKAK E+GQP+F+G+EKLIFAAV+IGA +AAYGLYDGFL+L
Sbjct: 418 QYLLLSALLYAPGALFFAKAKRELGQPVFSGVEKLIFAAVLIGAAIAAYGLYDGFLSL 475


>TR:A4VRJ9_PSEU5 A4VRJ9 Arginine/ornithine antiporter OS=Pseudomonas stutzeri
           (strain A1501) GN=arcD-2 PE=4 SV=1
          Length = 475

 Score =  725 bits (1871), Expect = 0.0
 Identities = 353/478 (73%), Positives = 417/478 (87%), Gaps = 6/478 (1%)

Query: 5   SSQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTL 64
           +S++L+L AL ALV+GSMIGGGIFSLPQNMAASA  GA+LIGWAITAVGMLTLAFVFQ+L
Sbjct: 4   TSKQLKLSALVALVMGSMIGGGIFSLPQNMAASASAGAILIGWAITAVGMLTLAFVFQSL 63

Query: 65  ANRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKG 124
           ANRKPELD GVYAYAKAGFGDYMGFSSAWGYWISAW+GNV YFVLLFSTLGYF P+FG+G
Sbjct: 64  ANRKPELDAGVYAYAKAGFGDYMGFSSAWGYWISAWIGNVSYFVLLFSTLGYFVPMFGEG 123

Query: 125 DTVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTA 184
           +T+ A++ AS++LW +HFLVLRGI+EAAF+N VTT+AK+VPL LFI+I   AF+LD+FTA
Sbjct: 124 NTLPAVIGASLVLWGVHFLVLRGIREAAFVNLVTTIAKIVPLILFIVITAVAFRLDVFTA 183

Query: 185 DIWGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLL 244
           D WG+ NP+LGSVM QVRNMMLVTVWVFIGIEGA++FS+RAE+RSDVG+ATVIGF +VL 
Sbjct: 184 DFWGRGNPELGSVMQQVRNMMLVTVWVFIGIEGANVFSARAERRSDVGRATVIGFYSVLA 243

Query: 245 LLVLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLL 304
           LLVLVN+LSMG+M+Q ELA L+NPSMA VLE VVG WGAVLISVGL++SL GALLSW LL
Sbjct: 244 LLVLVNILSMGIMSQAELAGLKNPSMAGVLEQVVGRWGAVLISVGLVVSLAGALLSWTLL 303

Query: 305 CAEIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTK 364
           CAEI+FAAA+DHTMP FLR+ENA  VP NALWL+N  +Q+FL++  F +        Y  
Sbjct: 304 CAEILFAAARDHTMPSFLRKENARHVPVNALWLSNGLIQLFLIITLFNA------STYLS 357

Query: 365 MLLLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYAGGL 424
           +L LATSMIL+PYFWSAAY LLL ++GE Y N A ER KD +IA +A  YAVWL+YAGG+
Sbjct: 358 LLYLATSMILVPYFWSAAYALLLGVRGEGYANAAGERRKDTLIAAVATLYAVWLVYAGGI 417

Query: 425 KYLLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           +YLLLSALLYAPGA+ FAKAK E+GQP+F+G+EKLIFAAV+IGA +AAYGLYDGFL+L
Sbjct: 418 QYLLLSALLYAPGALFFAKAKRELGQPVFSGVEKLIFAAVLIGAAIAAYGLYDGFLSL 475


>TR:A5VZ91_PSEP1 A5VZ91 Arginine:ornithine antiporter, APA family (Precursor)
           OS=Pseudomonas putida (strain F1 / ATCC 700007)
           GN=Pput_1040 PE=4 SV=1
          Length = 480

 Score =  722 bits (1863), Expect = 0.0
 Identities = 358/482 (74%), Positives = 412/482 (85%), Gaps = 6/482 (1%)

Query: 1   MSQESSQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFV 60
           +  E  QKLRLGAL ALVVGSMIGGGIFSLPQNMAA ADVGAVLIGW ITAVGML LAFV
Sbjct: 5   LMSEPGQKLRLGALIALVVGSMIGGGIFSLPQNMAARADVGAVLIGWGITAVGMLALAFV 64

Query: 61  FQTLANRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPI 120
           FQTLANRKPELD GVYAYAKAGFG+YMGFSSAWGYWISAWLGNVGYFVLLFSTLG++FP+
Sbjct: 65  FQTLANRKPELDSGVYAYAKAGFGEYMGFSSAWGYWISAWLGNVGYFVLLFSTLGFYFPV 124

Query: 121 FGKGDTVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLD 180
           FG+G+T  AI CAS+LLW++HFLVLRGIKEAAFIN VTTVAKVVPL +F++I  FAF+ D
Sbjct: 125 FGEGNTPIAIGCASLLLWSVHFLVLRGIKEAAFINQVTTVAKVVPLLIFVVIAAFAFRAD 184

Query: 181 IFTADIWGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFI 240
           IFT DIWG SNP  GSV+ QVRNMMLVTV+VFIGIEGAS++S RA++RSDVGKATVIGF+
Sbjct: 185 IFTRDIWGLSNPQFGSVLEQVRNMMLVTVFVFIGIEGASVYSGRAQRRSDVGKATVIGFL 244

Query: 241 TVLLLLVLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLS 300
            VL LLVLVNVLS+G+MTQPELA LQNPS+A VLEH+VG WGA+LIS+GL +SLLGALLS
Sbjct: 245 GVLALLVLVNVLSLGIMTQPELAGLQNPSLASVLEHIVGPWGALLISLGLAVSLLGALLS 304

Query: 301 WVLLCAEIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMD 360
           W LLCAEI++A A+D TMP FL +ENAN VPANALWLTN  +Q FL++  F++G      
Sbjct: 305 WALLCAEILYATARDKTMPRFLAKENANHVPANALWLTNCMIQGFLLITLFSAG------ 358

Query: 361 PYTKMLLLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLY 420
            YT ++ LA+SMIL+PY WSAAY +LL ++ ETY    R R KDL++A +A+ YAVWLLY
Sbjct: 359 TYTSLIYLASSMILVPYLWSAAYAVLLAMRAETYAGQPRLRRKDLLVALVALLYAVWLLY 418

Query: 421 AGGLKYLLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFL 480
           AGGLKYLLLSALLYAPG ILFA+AKHE GQ +FT  EKLIFAAV++GA +AAY LY G L
Sbjct: 419 AGGLKYLLLSALLYAPGVILFARAKHEQGQTLFTAWEKLIFAAVLVGAALAAYALYSGLL 478

Query: 481 TL 482
           +L
Sbjct: 479 SL 480


>TR:Q88P50_PSEPK Q88P50 Arginine/ornithine antiporter OS=Pseudomonas putida (strain
           KT2440) GN=PP_1003 PE=4 SV=1
          Length = 475

 Score =  721 bits (1862), Expect = 0.0
 Identities = 358/479 (74%), Positives = 411/479 (85%), Gaps = 6/479 (1%)

Query: 4   ESSQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQT 63
           E  QKLRLGAL ALVVGSMIGGGIFSLPQNMAA ADVGAVLIGW ITAVGML LAFVFQT
Sbjct: 3   EPGQKLRLGALIALVVGSMIGGGIFSLPQNMAARADVGAVLIGWGITAVGMLALAFVFQT 62

Query: 64  LANRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGK 123
           LANRKPELD GVYAYAKAGFG+YMGFSSAWGYWISAWLGNVGYFVLLFSTLG++FP+FG+
Sbjct: 63  LANRKPELDSGVYAYAKAGFGEYMGFSSAWGYWISAWLGNVGYFVLLFSTLGFYFPVFGE 122

Query: 124 GDTVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFT 183
           G+T  AI CAS+LLW++HFLVLRGIKEAAFIN VTTVAKVVPL +F++I  FAF+ DIFT
Sbjct: 123 GNTPIAIGCASLLLWSVHFLVLRGIKEAAFINQVTTVAKVVPLLIFVVIAAFAFRADIFT 182

Query: 184 ADIWGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVL 243
            DIWG SNP  GSV+ QVRNMMLVTV+VFIGIEGAS++S RA++RSDVGKATVIGF+ VL
Sbjct: 183 RDIWGLSNPQFGSVLEQVRNMMLVTVFVFIGIEGASVYSGRAQRRSDVGKATVIGFLGVL 242

Query: 244 LLLVLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVL 303
            LLVLVNVLS+G+MTQPELA LQNPS+A VLEH+VG WGA+LIS+GL +SLLGALLSW L
Sbjct: 243 ALLVLVNVLSLGIMTQPELAGLQNPSLASVLEHIVGPWGALLISLGLAVSLLGALLSWAL 302

Query: 304 LCAEIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYT 363
           LCAEI++A A+D TMP FL +ENAN VPANALWLTN  +Q FL++  F++G       YT
Sbjct: 303 LCAEILYATARDKTMPRFLAKENANHVPANALWLTNCMIQGFLLITLFSAG------TYT 356

Query: 364 KMLLLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYAGG 423
            ++ LA+SMIL+PY WSAAY +LL ++ ETY    R R KDL++A +A+ YAVWLLYAGG
Sbjct: 357 SLIYLASSMILVPYLWSAAYAVLLAMRAETYAGQPRLRRKDLLVALVALLYAVWLLYAGG 416

Query: 424 LKYLLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           LKYLLLSALLYAPG ILFA+AKHE GQ +FT  EKLIFAAV++GA +AAY LY G L+L
Sbjct: 417 LKYLLLSALLYAPGVILFARAKHEQGQTLFTAWEKLIFAAVLVGAALAAYALYSGLLSL 475


>TR:E4R6E2_PSEPB E4R6E2 Arginine/ornithine antiporter OS=Pseudomonas putida (strain
           BIRD-1) GN=PPUBIRD1_1053 PE=4 SV=1
          Length = 475

 Score =  721 bits (1862), Expect = 0.0
 Identities = 358/479 (74%), Positives = 411/479 (85%), Gaps = 6/479 (1%)

Query: 4   ESSQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQT 63
           E  QKLRLGAL ALVVGSMIGGGIFSLPQNMAA ADVGAVLIGW ITAVGML LAFVFQT
Sbjct: 3   EPGQKLRLGALIALVVGSMIGGGIFSLPQNMAARADVGAVLIGWGITAVGMLALAFVFQT 62

Query: 64  LANRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGK 123
           LANRKPELD GVYAYAKAGFG+YMGFSSAWGYWISAWLGNVGYFVLLFSTLG++FP+FG+
Sbjct: 63  LANRKPELDSGVYAYAKAGFGEYMGFSSAWGYWISAWLGNVGYFVLLFSTLGFYFPVFGE 122

Query: 124 GDTVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFT 183
           G+T  AI CAS+LLW++HFLVLRGIKEAAFIN VTTVAKVVPL +F++I  FAF+ DIFT
Sbjct: 123 GNTPIAIGCASLLLWSVHFLVLRGIKEAAFINQVTTVAKVVPLLIFVVIAAFAFRADIFT 182

Query: 184 ADIWGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVL 243
            DIWG SNP  GSV+ QVRNMMLVTV+VFIGIEGAS++S RA++RSDVGKATVIGF+ VL
Sbjct: 183 RDIWGLSNPQFGSVLEQVRNMMLVTVFVFIGIEGASVYSGRAQRRSDVGKATVIGFLGVL 242

Query: 244 LLLVLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVL 303
            LLVLVNVLS+G+MTQPELA LQNPS+A VLEH+VG WGA+LIS+GL +SLLGALLSW L
Sbjct: 243 ALLVLVNVLSLGIMTQPELAGLQNPSLASVLEHIVGPWGALLISLGLAVSLLGALLSWAL 302

Query: 304 LCAEIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYT 363
           LCAEI++A A+D TMP FL +ENAN VPANALWLTN  +Q FL++  F++G       YT
Sbjct: 303 LCAEILYATARDKTMPRFLAKENANHVPANALWLTNCMIQGFLLITLFSAG------TYT 356

Query: 364 KMLLLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYAGG 423
            ++ LA+SMIL+PY WSAAY +LL ++ ETY    R R KDL++A +A+ YAVWLLYAGG
Sbjct: 357 SLIYLASSMILVPYLWSAAYAVLLAMRAETYAGQPRLRRKDLLVALVALLYAVWLLYAGG 416

Query: 424 LKYLLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           LKYLLLSALLYAPG ILFA+AKHE GQ +FT  EKLIFAAV++GA +AAY LY G L+L
Sbjct: 417 LKYLLLSALLYAPGVILFARAKHEQGQTLFTAWEKLIFAAVLVGAALAAYALYSGLLSL 475


>TR:B0KQM4_PSEPG B0KQM4 Arginine/ornithine antiporter (Precursor) OS=Pseudomonas
           putida (strain GB-1) GN=PputGB1_1002 PE=4 SV=1
          Length = 475

 Score =  721 bits (1861), Expect = 0.0
 Identities = 360/479 (75%), Positives = 410/479 (85%), Gaps = 6/479 (1%)

Query: 4   ESSQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQT 63
           E  QKLRLGAL ALVVGSMIGGGIFSLPQNMAA ADVGAVLIGW ITAVGML LAFVFQT
Sbjct: 3   EPGQKLRLGALIALVVGSMIGGGIFSLPQNMAARADVGAVLIGWGITAVGMLALAFVFQT 62

Query: 64  LANRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGK 123
           LANRKPELD GVYAYAKAGFG+YMGFSSAWGYWISAWLGNVGYFVLLFSTLG++FP+FG+
Sbjct: 63  LANRKPELDSGVYAYAKAGFGEYMGFSSAWGYWISAWLGNVGYFVLLFSTLGFYFPVFGE 122

Query: 124 GDTVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFT 183
           G+T  AI CAS+LLW++HFLVLRGIKEAAFIN VTTVAKVVPL +F++I  FAF+ DIFT
Sbjct: 123 GNTPIAIGCASLLLWSVHFLVLRGIKEAAFINQVTTVAKVVPLLIFVVIAAFAFRADIFT 182

Query: 184 ADIWGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVL 243
            DIWG SNP  GSV+ QVRNMMLVTV+VFIGIEGAS++S RAE+RSDVGKATVIGF+ VL
Sbjct: 183 RDIWGLSNPQFGSVLEQVRNMMLVTVFVFIGIEGASVYSGRAERRSDVGKATVIGFLGVL 242

Query: 244 LLLVLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVL 303
            LLVLVNVLS+GVMTQPELA LQNPS+A VLEH+VG WGA+LIS+GL +SLLGALLSW L
Sbjct: 243 ALLVLVNVLSLGVMTQPELAGLQNPSLASVLEHIVGPWGALLISLGLAVSLLGALLSWAL 302

Query: 304 LCAEIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYT 363
           LCAEI+FA A+D TMP FL +ENAN VPANALWLTN  +Q FL++  F++G       YT
Sbjct: 303 LCAEILFATARDKTMPRFLAKENANHVPANALWLTNCMIQGFLLITLFSAG------TYT 356

Query: 364 KMLLLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYAGG 423
            ++ LA+SMIL+PY WSAAY +LL ++ ETY      R KDL++A +A+ YAVWLLYAGG
Sbjct: 357 SLIYLASSMILVPYLWSAAYAVLLAVRAETYAGQPGLRRKDLLVALVALLYAVWLLYAGG 416

Query: 424 LKYLLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           LKYLLLSALLYAPG ILFA+AKHE GQ +FT  EKLIFAAV++GA +AAY LY G L+L
Sbjct: 417 LKYLLLSALLYAPGVILFARAKHEQGQTLFTSWEKLIFAAVLVGAALAAYALYSGLLSL 475


>TR:Q1I5H6_PSEE4 Q1I5H6 Arginine/ornithine antiporter OS=Pseudomonas entomophila
           (strain L48) GN=arcD-2 PE=4 SV=1
          Length = 475

 Score =  719 bits (1856), Expect = 0.0
 Identities = 362/479 (75%), Positives = 409/479 (85%), Gaps = 6/479 (1%)

Query: 4   ESSQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQT 63
           E  QKLRLGAL ALVVGSMIGGGIFSLPQNMAA ADVGAVLIGW+ITAVGML LAFVFQT
Sbjct: 3   EPGQKLRLGALIALVVGSMIGGGIFSLPQNMAARADVGAVLIGWSITAVGMLALAFVFQT 62

Query: 64  LANRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGK 123
           LANRKPELD GVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLG++FP+FG+
Sbjct: 63  LANRKPELDSGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGFYFPVFGE 122

Query: 124 GDTVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFT 183
           G+T  AI CAS+LLWA+HFLVLRGIKEAAFIN VTTVAKVVPL +FI+I  FAF+ DIFT
Sbjct: 123 GNTPVAIGCASLLLWAVHFLVLRGIKEAAFINQVTTVAKVVPLLMFIVIAAFAFRADIFT 182

Query: 184 ADIWGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVL 243
            DIWG SNP  GSV+ QVRNMMLVTV+VFIGIEGAS++S RA  RSDVGKATV+GF+ VL
Sbjct: 183 RDIWGLSNPKFGSVLEQVRNMMLVTVFVFIGIEGASVYSGRALHRSDVGKATVVGFLGVL 242

Query: 244 LLLVLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVL 303
            LLVLVNVLS+GVMTQPELA LQNPS+A VLEH+VG WGA+LIS+GL +SLLGALLSW L
Sbjct: 243 ALLVLVNVLSLGVMTQPELAGLQNPSLASVLEHIVGPWGALLISIGLAVSLLGALLSWAL 302

Query: 304 LCAEIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYT 363
           LCAEI+FA A+D TMP+FL REN N VPANALWLTN+ +Q FL++  F++G       YT
Sbjct: 303 LCAEILFATARDKTMPQFLARENKNHVPANALWLTNVMIQGFLLITLFSAG------TYT 356

Query: 364 KMLLLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYAGG 423
            ++ LA+SMIL+PYFWSAAY +LL L+GE+Y      R KDL++A IA+ YAVWLLYAGG
Sbjct: 357 SLIYLASSMILVPYFWSAAYAVLLALRGESYAGQGGLRRKDLLVAVIALLYAVWLLYAGG 416

Query: 424 LKYLLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           LKY+LLSALLYAPG ILFA AK E GQ +FT  EKLIFAAV+ GA +AAY LY G L+L
Sbjct: 417 LKYVLLSALLYAPGVILFAHAKREQGQVLFTAWEKLIFAAVLAGAGLAAYALYSGLLSL 475


>TR:F0E4A4_9PSED F0E4A4 Arginine/ornithine antiporter OS=Pseudomonas sp. TJI-51
           GN=G1E_11730 PE=4 SV=1
          Length = 475

 Score =  718 bits (1854), Expect = 0.0
 Identities = 358/479 (74%), Positives = 409/479 (85%), Gaps = 6/479 (1%)

Query: 4   ESSQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQT 63
           E  QKLRLGAL ALVVGSMIGGGIFSLPQNMAA ADVGAVLIGW ITAVGML LAFVFQT
Sbjct: 3   EPGQKLRLGALIALVVGSMIGGGIFSLPQNMAARADVGAVLIGWTITAVGMLALAFVFQT 62

Query: 64  LANRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGK 123
           LANRKPELD GVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLG++FP+FG+
Sbjct: 63  LANRKPELDSGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGFYFPVFGE 122

Query: 124 GDTVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFT 183
           G+T  AI CASVLLWA+HFLVLRGIKEAAFIN VTTVAKVVP+ +F++I  FAF+ DIFT
Sbjct: 123 GNTPVAIGCASVLLWAVHFLVLRGIKEAAFINQVTTVAKVVPILMFVVIAAFAFRADIFT 182

Query: 184 ADIWGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVL 243
            DIWG SNP  G V+ QVRNMMLVTV+VFIGIEGAS++S RA++RSDVGKATVIGF+ VL
Sbjct: 183 RDIWGLSNPQFGGVLEQVRNMMLVTVFVFIGIEGASVYSGRAQRRSDVGKATVIGFLGVL 242

Query: 244 LLLVLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVL 303
            LLVLVNVLS+GVMTQPELA LQNPS+A VLEH+VG WGA+LIS+GL +SLLGALLSW L
Sbjct: 243 ALLVLVNVLSLGVMTQPELAGLQNPSLASVLEHIVGPWGALLISIGLAVSLLGALLSWAL 302

Query: 304 LCAEIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYT 363
           LCAEI++A A+D TMP FL +ENAN VPANALWLTN  +Q FL++  F++G       YT
Sbjct: 303 LCAEILYATARDKTMPRFLAKENANHVPANALWLTNCMIQGFLLITLFSAG------TYT 356

Query: 364 KMLLLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYAGG 423
            ++ LA+SMIL+PY WSAAY LLL ++GE+Y    R R KD+++A +A+ YA+WLLYAGG
Sbjct: 357 SLIYLASSMILVPYLWSAAYALLLAVRGESYAAQPRLRRKDVLVALVALLYAIWLLYAGG 416

Query: 424 LKYLLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           LKYLLLSALLYAPG ILFA+AKHE  Q +FT  EKLIFAAV+ GA +AAY LY G L+L
Sbjct: 417 LKYLLLSALLYAPGVILFARAKHEQRQTLFTTWEKLIFAAVLAGAALAAYALYSGLLSL 475


>TR:F8FXA1_PSEPU F8FXA1 Arginine/ornithine antiporter OS=Pseudomonas putida S16
           GN=PPS_1030 PE=4 SV=1
          Length = 475

 Score =  717 bits (1852), Expect = 0.0
 Identities = 357/479 (74%), Positives = 410/479 (85%), Gaps = 6/479 (1%)

Query: 4   ESSQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQT 63
           E  QKLRLGAL ALVVGSMIGGGIFSLPQNMAA ADVGAVLIGW ITAVGML LAFVFQT
Sbjct: 3   EPGQKLRLGALIALVVGSMIGGGIFSLPQNMAARADVGAVLIGWGITAVGMLALAFVFQT 62

Query: 64  LANRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGK 123
           LANRKPELD GVYAYAKAGFG+YMGFSSAWGYWISAWLGNVGYFVLLFSTLG++FP+FG+
Sbjct: 63  LANRKPELDSGVYAYAKAGFGEYMGFSSAWGYWISAWLGNVGYFVLLFSTLGFYFPVFGE 122

Query: 124 GDTVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFT 183
           G+T  AI CAS+LLWA+HFLVLRGIKEAAFIN VTTVAKVVPL +F++I  FAF+ DIFT
Sbjct: 123 GNTPIAIGCASLLLWAVHFLVLRGIKEAAFINQVTTVAKVVPLLIFVVIAAFAFRADIFT 182

Query: 184 ADIWGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVL 243
            DIWG SNP  GSV+ QVRNMMLVTV+VFIGIEGAS++S RA++RSDVGKATVIGF+ VL
Sbjct: 183 RDIWGLSNPQFGSVLEQVRNMMLVTVFVFIGIEGASVYSGRAQRRSDVGKATVIGFLGVL 242

Query: 244 LLLVLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVL 303
            LLVLVNVLS+GVMTQP+LA LQNPS+A VLEH+VG WGA+LIS+GL +SLLGALLSW L
Sbjct: 243 ALLVLVNVLSLGVMTQPQLAGLQNPSLASVLEHIVGPWGALLISIGLAVSLLGALLSWAL 302

Query: 304 LCAEIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYT 363
           LCAEI++A A+D TMP FL +ENAN VPANALWLTN  +Q FL++  F++G       YT
Sbjct: 303 LCAEILYATARDKTMPRFLAKENANHVPANALWLTNCMIQGFLLITLFSAG------TYT 356

Query: 364 KMLLLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYAGG 423
            ++ LA+SMIL+PY WSAAY +LL ++ ETY+     R KDL++A +A+ YAVWLLYAGG
Sbjct: 357 SLIYLASSMILVPYLWSAAYAVLLAVRAETYDEQPALRRKDLLVALVALVYAVWLLYAGG 416

Query: 424 LKYLLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           LKYLLLSALLYAPG ILFA+AKHE G+ +FT  EKLIFAAV+ GA +AAY LY G L+L
Sbjct: 417 LKYLLLSALLYAPGVILFARAKHEQGKTLFTTWEKLIFAAVLAGAALAAYALYSGLLSL 475


>TR:H7EV95_PSEST H7EV95 Arginine/ornithine antiporter OS=Pseudomonas stutzeri ATCC
           14405 = CCUG 16156 GN=PstZobell_09552 PE=4 SV=1
          Length = 475

 Score =  717 bits (1851), Expect = 0.0
 Identities = 353/478 (73%), Positives = 418/478 (87%), Gaps = 6/478 (1%)

Query: 5   SSQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTL 64
           +S++L+L AL ALVVGSMIGGGIFSLPQNMAASA  GA+LIGWAITAVGML+LAFVFQTL
Sbjct: 4   ASKQLKLSALIALVVGSMIGGGIFSLPQNMAASASAGAILIGWAITAVGMLSLAFVFQTL 63

Query: 65  ANRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKG 124
           ANRKPELD GVYAYAKAGFGDYMGFSSAWGYWISAW+GNV YFVLLFSTLGYFFPIFG+G
Sbjct: 64  ANRKPELDAGVYAYAKAGFGDYMGFSSAWGYWISAWIGNVSYFVLLFSTLGYFFPIFGEG 123

Query: 125 DTVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTA 184
           +T+ A++ AS++LW +H LVLRGI++AAFIN ++T+AK+VPL LFI+I   AF+L++FTA
Sbjct: 124 NTLPAVIGASLVLWGVHLLVLRGIQQAAFINLISTIAKIVPLLLFIVITAVAFRLEVFTA 183

Query: 185 DIWGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLL 244
           D WG+ N +LGSVM QVRNMMLVTVWVFIGIEGAS++S+RAE+RSDVGKATVIGFI VL 
Sbjct: 184 DFWGRGNIELGSVMEQVRNMMLVTVWVFIGIEGASVYSARAERRSDVGKATVIGFIGVLA 243

Query: 245 LLVLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLL 304
           LLVLVNVLSMG+M+Q ELA L+NPSMA VLE VVG WGA+LISVGL++SL GALLSW LL
Sbjct: 244 LLVLVNVLSMGIMSQAELAGLKNPSMAGVLEQVVGRWGAILISVGLVVSLAGALLSWTLL 303

Query: 305 CAEIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTK 364
           CAEI+FA+A+D TMP FLR+ENAN VPANALWL+N  +Q+FL++  F++        Y  
Sbjct: 304 CAEILFASARDDTMPRFLRKENANHVPANALWLSNGLIQLFLIITLFSA------STYLS 357

Query: 365 MLLLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYAGGL 424
           +L LATSMIL+PYFWSAAY LLL ++GE YE+   ER KDL+ A IA  YAVWL+YAGG+
Sbjct: 358 LLYLATSMILVPYFWSAAYALLLGVRGEGYESAPGERRKDLLTAVIATLYAVWLVYAGGI 417

Query: 425 KYLLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           +Y+LLSALLYAPGA+LFAKAK E+GQP+FT +EKLIFAAV+IGA +AAYGLYDGFL+L
Sbjct: 418 QYVLLSALLYAPGALLFAKAKRELGQPVFTSLEKLIFAAVLIGAAIAAYGLYDGFLSL 475


>TR:B1JDK4_PSEPW B1JDK4 Arginine/ornithine antiporter (Precursor) OS=Pseudomonas
           putida (strain W619) GN=PputW619_4221 PE=4 SV=1
          Length = 475

 Score =  717 bits (1850), Expect = 0.0
 Identities = 359/479 (74%), Positives = 410/479 (85%), Gaps = 6/479 (1%)

Query: 4   ESSQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQT 63
           E  QKLRLGAL ALVVGSMIGGGIFSLPQNMAA ADVGAVLIGW ITAVGML LAFVFQT
Sbjct: 3   EPGQKLRLGALIALVVGSMIGGGIFSLPQNMAARADVGAVLIGWGITAVGMLALAFVFQT 62

Query: 64  LANRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGK 123
           LANRKPELD GVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLG++FP+FG+
Sbjct: 63  LANRKPELDSGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGFYFPVFGE 122

Query: 124 GDTVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFT 183
           G+T  AI CAS+LLW++HFLVLRGIKEAAFIN VTTVAKVVPL +FI+I  FAF+ DIFT
Sbjct: 123 GNTPIAIGCASLLLWSVHFLVLRGIKEAAFINQVTTVAKVVPLLIFIVIAAFAFRADIFT 182

Query: 184 ADIWGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVL 243
            DIWG SNP  G+V++QVRNMMLVTV+VFIGIEGAS++S RA +R+DVGKATVIGF+ VL
Sbjct: 183 RDIWGVSNPQFGNVLDQVRNMMLVTVFVFIGIEGASVYSGRALRRTDVGKATVIGFLGVL 242

Query: 244 LLLVLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVL 303
            LLVLVNVLS+GVMTQPELA LQNPS+A VLEH+VG WGA+LIS+GL +SLLGALLSW L
Sbjct: 243 ALLVLVNVLSLGVMTQPELAGLQNPSLASVLEHIVGPWGALLISIGLAVSLLGALLSWAL 302

Query: 304 LCAEIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYT 363
           LCAEI+FA A+D TMP FL +ENAN VPANALWLTN  +Q FL++   ++G       YT
Sbjct: 303 LCAEILFATARDKTMPRFLAKENANHVPANALWLTNCMIQGFLLITLVSAG------TYT 356

Query: 364 KMLLLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYAGG 423
            ++ LA+SMIL+PY WSAAY +LL L+GE+Y      R KDL++A +A+ YA+WLLYAGG
Sbjct: 357 SLIYLASSMILVPYLWSAAYAVLLALRGESYAGQEALRRKDLLVALVALVYALWLLYAGG 416

Query: 424 LKYLLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           LKYLLLSALLYAPG ILFA+AKHE GQ +FT  EKLIFAAV+IGA +AAY LY G L+L
Sbjct: 417 LKYLLLSALLYAPGVILFARAKHEQGQVLFTTWEKLIFAAVLIGAALAAYALYSGLLSL 475


>TR:G8PWB3_PSEFL G8PWB3 ArcD OS=Pseudomonas fluorescens F113 GN=arcD2 PE=4 SV=1
          Length = 475

 Score =  715 bits (1846), Expect = 0.0
 Identities = 354/476 (74%), Positives = 411/476 (86%), Gaps = 6/476 (1%)

Query: 7   QKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLAN 66
           +KL LGAL ALVVGSMIGGGIFSLPQNMAA ADVGAVLIGW ITA+GMLTLAFVFQTLAN
Sbjct: 6   EKLPLGALVALVVGSMIGGGIFSLPQNMAARADVGAVLIGWTITAIGMLTLAFVFQTLAN 65

Query: 67  RKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDT 126
           RKPELD GVYAYAKAGFGDYMGFSSAWGYWISAW+GNVGYFVLLFSTLGYFFP+FG+G+T
Sbjct: 66  RKPELDSGVYAYAKAGFGDYMGFSSAWGYWISAWMGNVGYFVLLFSTLGYFFPVFGQGNT 125

Query: 127 VAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTADI 186
             AI CAS+LLWA+HFLVLRGIKEAAFIN VTTVAKVVPL +F+++   AFK +IFT DI
Sbjct: 126 PVAIGCASLLLWAVHFLVLRGIKEAAFINLVTTVAKVVPLLMFVVMAAVAFKAEIFTRDI 185

Query: 187 WGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLLL 246
           WG  +PDLGSVM+QVR+MMLVTV+VFIGIEGAS++S+RAE+R+DVG+ATVIGF+ VL LL
Sbjct: 186 WGAMSPDLGSVMDQVRHMMLVTVFVFIGIEGASVYSARAERRADVGRATVIGFLGVLALL 245

Query: 247 VLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLCA 306
           VLVNVLS+GVM+QPELA+LQNPS+A VLEH+VG WGA+LIS+GL +SLLGALLSW LLCA
Sbjct: 246 VLVNVLSLGVMSQPELAQLQNPSLAGVLEHIVGPWGALLISLGLAVSLLGALLSWALLCA 305

Query: 307 EIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKML 366
           EI++A A+D TMP FL +ENAN  P NALWLTN  +Q+FL++  F++G       YT ++
Sbjct: 306 EILYATARDKTMPAFLTKENANHAPVNALWLTNGMIQLFLLITLFSAG------TYTSLI 359

Query: 367 LLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYAGGLKY 426
            LA+SMIL+PY WSAAY +LL  +GETYE  +  R KDL I G+A+ YAVWLLYAGG+KY
Sbjct: 360 YLASSMILVPYLWSAAYAVLLCARGETYEQGSARRMKDLCIGGVALCYAVWLLYAGGVKY 419

Query: 427 LLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           LLLSALLYAPG ILFA+AK E GQP+FT +EK IFA V+ GA +AAYGLY GFL L
Sbjct: 420 LLLSALLYAPGVILFAQAKREQGQPLFTHVEKGIFACVMSGAGMAAYGLYSGFLAL 475


>TR:E2XX05_PSEFL E2XX05 Arginine/ornithine antiporter OS=Pseudomonas fluorescens WH6
           GN=ydgI PE=4 SV=1
          Length = 475

 Score =  714 bits (1844), Expect = 0.0
 Identities = 357/479 (74%), Positives = 411/479 (85%), Gaps = 6/479 (1%)

Query: 4   ESSQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQT 63
           + +QKLRL AL ALVVGSMIGGGIFSLPQNMAA A+VGAVLIGWAITAVGMLTLAFVFQT
Sbjct: 3   QPAQKLRLSALIALVVGSMIGGGIFSLPQNMAARAEVGAVLIGWAITAVGMLTLAFVFQT 62

Query: 64  LANRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGK 123
           LANRKPELD GVYAYAKAGFGDYMGFSSAWGYWISAW+GNVGYFVLLFSTLGYFFP+FG+
Sbjct: 63  LANRKPELDSGVYAYAKAGFGDYMGFSSAWGYWISAWMGNVGYFVLLFSTLGYFFPVFGQ 122

Query: 124 GDTVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFT 183
           G+T  AI CASVLLWA+HFLVLRGIKEAAFIN VTTVAK+VPL +FI+I   AFK D+FT
Sbjct: 123 GNTPVAIGCASVLLWAVHFLVLRGIKEAAFINQVTTVAKIVPLLMFIVIAAVAFKADVFT 182

Query: 184 ADIWGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVL 243
            DIWG  NP  GSV++QVRNMMLVTV+VFIGIEGAS++S+RAEKR+DVG+ATVIGF+ VL
Sbjct: 183 RDIWGLGNPQFGSVVDQVRNMMLVTVFVFIGIEGASVYSARAEKRADVGRATVIGFLGVL 242

Query: 244 LLLVLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVL 303
            LLV+VNVLS+GVM+QPELA LQNPS+A VLEH+VG WGA+LIS+GL +SLLGALLSW L
Sbjct: 243 ALLVMVNVLSLGVMSQPELAGLQNPSLAGVLEHIVGPWGALLISLGLAVSLLGALLSWAL 302

Query: 304 LCAEIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYT 363
           LCAEI++A A D TMP FL++ENANQVP NALWLTN+ +Q FLV+  F+         YT
Sbjct: 303 LCAEILYATAHDKTMPAFLKKENANQVPVNALWLTNVMIQAFLVITLFS------QSTYT 356

Query: 364 KMLLLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYAGG 423
            ++ LA+SMIL+PY WSAAY +LL+ +GETYE    +R KDL++  IA+ YAVWLLYAGG
Sbjct: 357 TLIYLASSMILVPYLWSAAYAVLLSGRGETYEGAQGQRLKDLLVGLIALGYAVWLLYAGG 416

Query: 424 LKYLLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           LKYLLLSALLYAPG ILFA AK E GQP+FT +EK IF+ V+ GA +AAYGLY G L+L
Sbjct: 417 LKYLLLSALLYAPGVILFALAKREQGQPLFTQLEKGIFSCVIAGAGLAAYGLYSGGLSL 475


>TR:C3JYQ3_PSEFS C3JYQ3 Putative amino acid transport system, integral membrane
           protein (Precursor) OS=Pseudomonas fluorescens (strain
           SBW25) GN=PFLU_4889 PE=4 SV=1
          Length = 475

 Score =  714 bits (1842), Expect = 0.0
 Identities = 355/479 (74%), Positives = 413/479 (86%), Gaps = 6/479 (1%)

Query: 4   ESSQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQT 63
           + +QKLRL AL ALVVGSMIGGGIFSLPQNMAA A+VGAVLIGWAITAVGMLTLAFVFQT
Sbjct: 3   QPAQKLRLSALIALVVGSMIGGGIFSLPQNMAARAEVGAVLIGWAITAVGMLTLAFVFQT 62

Query: 64  LANRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGK 123
           LANRKP LD GVYAYAKAGFGDYMGFSSAWGYWISAW+GNVGYFVLLFSTLGYFFP+FG+
Sbjct: 63  LANRKPNLDSGVYAYAKAGFGDYMGFSSAWGYWISAWMGNVGYFVLLFSTLGYFFPLFGQ 122

Query: 124 GDTVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFT 183
           G+T  AI CAS+LLWA+HFLVLRGIKEAAFIN +TTVAK+VPL +FI+I   AFK DIFT
Sbjct: 123 GNTPVAIGCASLLLWAVHFLVLRGIKEAAFINQITTVAKIVPLLMFIVIAGVAFKADIFT 182

Query: 184 ADIWGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVL 243
            DIWG  NP++G+V++QVRNMMLVTV+VFIGIEGAS++S+RAEKRSDVG+ATVIGF+ VL
Sbjct: 183 RDIWGLGNPNIGNVVDQVRNMMLVTVFVFIGIEGASVYSARAEKRSDVGRATVIGFVGVL 242

Query: 244 LLLVLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVL 303
            LLVLVNVLS+G+M+QPELA+LQNPS+A VLEH+VG WGA+ IS+GL +SLLGALLSW L
Sbjct: 243 ALLVLVNVLSLGIMSQPELAQLQNPSLAGVLEHIVGPWGAMAISIGLAVSLLGALLSWAL 302

Query: 304 LCAEIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYT 363
           LCAEI++A A D TMP FL++ENANQVP NALWLTN+ +QVFLV+  F+         YT
Sbjct: 303 LCAEILYATAHDKTMPAFLKKENANQVPVNALWLTNVMIQVFLVITLFSH------STYT 356

Query: 364 KMLLLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYAGG 423
            ++ LA+SMIL+PY WSAAY +LL+ +GETYE    +R KDL++  +A+ YAVWLLYAGG
Sbjct: 357 TLIYLASSMILVPYLWSAAYAVLLSGRGETYEGAHGQRMKDLLVGLVALGYAVWLLYAGG 416

Query: 424 LKYLLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           LKYLLLSALLYAPG ILFA AK E GQP+FT +EK IF+ VV GA +AAYGLY G L+L
Sbjct: 417 LKYLLLSALLYAPGVILFALAKREQGQPLFTHLEKGIFSCVVTGAGLAAYGLYSGVLSL 475


>TR:I2BPB7_PSEFL I2BPB7 Arginine/ornithine antiporter OS=Pseudomonas fluorescens
           A506 GN=arcD2 PE=4 SV=1
          Length = 475

 Score =  713 bits (1841), Expect = 0.0
 Identities = 352/479 (73%), Positives = 411/479 (85%), Gaps = 6/479 (1%)

Query: 4   ESSQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQT 63
           + +QKLRL AL ALVVGSMIGGGIFSLPQNMAA A+VGA+LIGWAITA+GMLTLAFVFQT
Sbjct: 3   QPAQKLRLSALIALVVGSMIGGGIFSLPQNMAARAEVGAILIGWAITAIGMLTLAFVFQT 62

Query: 64  LANRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGK 123
           LANRKPELD GVYAYAKAGFGDYMGFSSAWGYWISAW+GNVGYFVLLFSTLGYFFP FG+
Sbjct: 63  LANRKPELDSGVYAYAKAGFGDYMGFSSAWGYWISAWMGNVGYFVLLFSTLGYFFPAFGQ 122

Query: 124 GDTVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFT 183
           G+T  AI CAS+LLWA+HFLV+RGIKEAAFIN VTTVAK+VPL +FI+I   AFK DIFT
Sbjct: 123 GNTPLAIGCASLLLWAVHFLVMRGIKEAAFINQVTTVAKIVPLLMFIVIAAVAFKADIFT 182

Query: 184 ADIWGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVL 243
            DIWG  NP +GSV+ QVR+MMLVTV+VFIGIEGAS++S+RA+KRSDVG+ATVIGF+ VL
Sbjct: 183 RDIWGMGNPQMGSVVEQVRHMMLVTVFVFIGIEGASVYSARAQKRSDVGRATVIGFVGVL 242

Query: 244 LLLVLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVL 303
            LLVLVNVLS+G+M+QPELA+LQNPS+A VLEHVVG WGAVLIS+GL +SLLGALLSW L
Sbjct: 243 ALLVLVNVLSLGIMSQPELAQLQNPSLAGVLEHVVGPWGAVLISIGLAVSLLGALLSWAL 302

Query: 304 LCAEIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYT 363
           LCAEI++A A+D TMP FL++ENANQVP NALWLTN+ +Q FLV+  F++        YT
Sbjct: 303 LCAEILYATAQDKTMPAFLKKENANQVPVNALWLTNVMIQAFLVITLFSA------STYT 356

Query: 364 KMLLLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYAGG 423
            ++ LA+SMIL+PY WSAAY +LL+ +GETY    R R KDL++  +A+ YA+WLLYAGG
Sbjct: 357 TLIYLASSMILVPYLWSAAYAVLLSARGETYAGWQRRRMKDLLVGLVALGYAIWLLYAGG 416

Query: 424 LKYLLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           LKYLLLSALLYAPG ILFA AK E G P+FT +EK IF+ V+ GA +AAYGLY G L+L
Sbjct: 417 LKYLLLSALLYAPGVILFALAKREQGLPLFTAVEKGIFSGVIAGAGLAAYGLYSGVLSL 475


>TR:F2KCT9_PSEBN F2KCT9 Putative amino acid (Arginine/ornithine) transporter,
           permease component OS=Pseudomonas brassicacearum (strain
           NFM421) GN=PSEBR_a1200 PE=4 SV=1
          Length = 475

 Score =  709 bits (1829), Expect = 0.0
 Identities = 353/476 (74%), Positives = 409/476 (85%), Gaps = 6/476 (1%)

Query: 7   QKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLAN 66
           +KL LGAL ALVVGSMIGGGIFSLPQNMAA ADVGAVLIGW+ITAVGMLTLAFVFQTLAN
Sbjct: 6   EKLPLGALIALVVGSMIGGGIFSLPQNMAARADVGAVLIGWSITAVGMLTLAFVFQTLAN 65

Query: 67  RKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDT 126
           RKPELD GVYAYAKAGFGDYMGFSSAWGYWISAW+GNVGYFVLLFSTLGYFFP+FG+G+T
Sbjct: 66  RKPELDSGVYAYAKAGFGDYMGFSSAWGYWISAWMGNVGYFVLLFSTLGYFFPVFGQGNT 125

Query: 127 VAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTADI 186
             AI CAS+LLWA+HFLVLRGIKEAA IN VTTVAKVVPL +F+++   AFK +IFT DI
Sbjct: 126 PVAIGCASLLLWAVHFLVLRGIKEAALINLVTTVAKVVPLLMFVVMAAVAFKAEIFTRDI 185

Query: 187 WGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLLL 246
           WG  +PDLGSVM+QVR+MMLVTV+VFIGIEGAS++S+RAE+R DVG+ATVIGF+ VL LL
Sbjct: 186 WGAMSPDLGSVMDQVRHMMLVTVFVFIGIEGASVYSARAERRVDVGRATVIGFLGVLALL 245

Query: 247 VLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLCA 306
           VLVNVLS+GVM+QPELA+LQNPS+A VLEH+VG WGA+LIS+GL +SLLGALLSW LLCA
Sbjct: 246 VLVNVLSLGVMSQPELAQLQNPSLAGVLEHIVGPWGALLISLGLAVSLLGALLSWALLCA 305

Query: 307 EIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKML 366
           EI++A A+D TMP FL +ENAN  P NALWLTN  +Q+FL++  F++G       YT ++
Sbjct: 306 EILYATARDKTMPAFLTKENANHAPVNALWLTNGMIQLFLLITLFSAG------TYTSLI 359

Query: 367 LLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYAGGLKY 426
            LA+SMIL+PY WSAAY +LL  +GETYE  +  R KDL I G+A+ YAVWLLYAGG+KY
Sbjct: 360 YLASSMILVPYLWSAAYAVLLCARGETYEQGSARRMKDLFIGGVALCYAVWLLYAGGVKY 419

Query: 427 LLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           LLLSALLYAPG ILFA+AK E  QP+FT +EK IFA V+ GA +AAYGLY GFL L
Sbjct: 420 LLLSALLYAPGVILFAQAKREQRQPLFTHVEKGIFACVMSGAGMAAYGLYSGFLEL 475


>TR:E1V382_HALED E1V382 APC family transporter (Probable arginine/ornithine
           antiporter) OS=Halomonas elongata (strain ATCC 33173 /
           DSM 2581 / NBRC 15536 / NCIMB 2198 / 1H9) GN=arcD PE=4
           SV=1
          Length = 471

 Score =  701 bits (1809), Expect = 0.0
 Identities = 348/475 (73%), Positives = 396/475 (83%), Gaps = 6/475 (1%)

Query: 8   KLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLANR 67
           KL   ALTALVVGSMIGGGIFSLPQNMA SA  GAVLIGWAITAVGMLTLAFVFQTLANR
Sbjct: 3   KLGFSALTALVVGSMIGGGIFSLPQNMAVSAGAGAVLIGWAITAVGMLTLAFVFQTLANR 62

Query: 68  KPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDTV 127
           KPELDGG+YAYAKAGFGDYMGFSSAWGYW+SAWLGNV YFVLLFSTLG FFPIFG+G+T+
Sbjct: 63  KPELDGGIYAYAKAGFGDYMGFSSAWGYWMSAWLGNVSYFVLLFSTLGIFFPIFGEGNTL 122

Query: 128 AAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTADIW 187
            AIVCAS+LLW +HFLVLRGIKEAAFIN +TT+AK+VPL LFI+I   +F + +FT D W
Sbjct: 123 TAIVCASLLLWGVHFLVLRGIKEAAFINLITTIAKLVPLVLFIVITAISFDVGLFTQDFW 182

Query: 188 GKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLLLV 247
           G +  D+GSV +QVRNMMLVTVWVFIGIEGAS+FS+RAEKR DVG+ATV GF+ VLL+LV
Sbjct: 183 GHAELDMGSVADQVRNMMLVTVWVFIGIEGASVFSARAEKRRDVGRATVTGFLFVLLMLV 242

Query: 248 LVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLCAE 307
           LVNVLSMGVM+QP+LA L NPSMA VLEHVVG WGA+LI VGL++SL GALLSW LLCAE
Sbjct: 243 LVNVLSMGVMSQPQLASLSNPSMAGVLEHVVGRWGAILIGVGLVVSLAGALLSWTLLCAE 302

Query: 308 IMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKMLL 367
           I++  A DHTMP FLR++N N VP NALWL+N  +Q+FL++  F          Y  +  
Sbjct: 303 ILYTTASDHTMPAFLRKQNGNGVPVNALWLSNGLIQLFLIITLFNE------STYLSLFY 356

Query: 368 LATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYAGGLKYL 427
           LATSMIL+PYFWSAAYGLLL  KGE+YE    +R  DL+IA IA  YA+WL+YA G++Y+
Sbjct: 357 LATSMILVPYFWSAAYGLLLAGKGESYETQPGKRRSDLIIALIATLYAIWLVYASGIQYI 416

Query: 428 LLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           LLSALLYAPGA+LFAKAK EVG  IFTGIEKLIF AV+IGA  A YGLY G LTL
Sbjct: 417 LLSALLYAPGALLFAKAKREVGATIFTGIEKLIFLAVLIGAAAAIYGLYSGMLTL 471


>TR:F4DPM0_PSEMN F4DPM0 Arginine/ornithine antiporter OS=Pseudomonas mendocina
           (strain NK-01) GN=MDS_2047 PE=4 SV=1
          Length = 475

 Score =  694 bits (1792), Expect = 0.0
 Identities = 349/479 (72%), Positives = 400/479 (83%), Gaps = 6/479 (1%)

Query: 4   ESSQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQT 63
           +  +KL LG+LTALVVGSM+GGGIFSLPQN+AA ADVGAVLIGW ITAVGML LAFVFQ 
Sbjct: 3   DGDRKLGLGSLTALVVGSMVGGGIFSLPQNIAARADVGAVLIGWGITAVGMLALAFVFQG 62

Query: 64  LANRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGK 123
           LANRKP+LDGGVY YAKAG GDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFP+FG+
Sbjct: 63  LANRKPQLDGGVYVYAKAGLGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPVFGQ 122

Query: 124 GDTVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFT 183
           G+T  AI CAS LLW +H LVLRGIKEAA IN +TTVAK+VP+ LFI+I   AF  DIFT
Sbjct: 123 GNTPLAIACASGLLWCVHALVLRGIKEAALINLITTVAKLVPIVLFIVIVGLAFDRDIFT 182

Query: 184 ADIWGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVL 243
            DIWG+SNP  G V+ QVRNMMLVTV+VFIGIEGAS++SSRAE+R DVGKATVIGF+ VL
Sbjct: 183 RDIWGRSNPQFGGVLEQVRNMMLVTVFVFIGIEGASVYSSRAERRRDVGKATVIGFLGVL 242

Query: 244 LLLVLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVL 303
            LL+LVN+LS+GVM+QPELA LQNPSMA VLEHVVG WGAVLIS+GL +SLLGALLSW L
Sbjct: 243 ALLMLVNLLSLGVMSQPELAALQNPSMAGVLEHVVGRWGAVLISIGLAVSLLGALLSWAL 302

Query: 304 LCAEIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYT 363
           LCAEI+F +AKD TMP FLRRENANQVP NALWLTN  +Q+FL++  F+ G       Y 
Sbjct: 303 LCAEILFVSAKDGTMPAFLRRENANQVPVNALWLTNGMIQLFLLITLFSQG------TYL 356

Query: 364 KMLLLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYAGG 423
            ++ LA+SMIL+PY WSA Y LLL L+GETYE+ A  R KDL +  +AV YA+WLLYAGG
Sbjct: 357 SLIYLASSMILVPYLWSAVYALLLALRGETYEDQAGLRRKDLAVGLLAVGYAIWLLYAGG 416

Query: 424 LKYLLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           +KYLLLSALLYAPGA+LF +AK E GQ +FT  E  IFAAV++ A++A YGLY G LTL
Sbjct: 417 VKYLLLSALLYAPGALLFRQAKREQGQVLFTRYEWPIFAAVLLTAVLAGYGLYAGHLTL 475


>TR:A4XVP9_PSEMY A4XVP9 Arginine:ornithine antiporter, APA family (Precursor)
           OS=Pseudomonas mendocina (strain ymp) GN=Pmen_2660 PE=4
           SV=1
          Length = 475

 Score =  694 bits (1791), Expect = 0.0
 Identities = 350/477 (73%), Positives = 399/477 (83%), Gaps = 6/477 (1%)

Query: 6   SQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLA 65
           S+KL LG+LTALVVGSM+GGGIFSLPQN+AA ADVGAVLIGW ITAVGML LAFVFQ LA
Sbjct: 5   SRKLGLGSLTALVVGSMVGGGIFSLPQNIAARADVGAVLIGWGITAVGMLALAFVFQGLA 64

Query: 66  NRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGD 125
           NRKP+LDGGVY YAKAG GDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFP FG+G+
Sbjct: 65  NRKPQLDGGVYVYAKAGLGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPAFGQGN 124

Query: 126 TVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTAD 185
           T  AI CAS LLW +H LVLRGIKEAA IN +TTVAK+VP+ LFI+I   AF  DIFT D
Sbjct: 125 TPLAIACASGLLWCVHALVLRGIKEAALINLITTVAKLVPILLFIVIVGLAFDRDIFTRD 184

Query: 186 IWGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLL 245
           IWG+SNP  G V+ QVRNMMLVTV+VFIGIEGAS++SSRAE+R DVGKATVIGF+ VL L
Sbjct: 185 IWGRSNPQFGGVLEQVRNMMLVTVFVFIGIEGASVYSSRAERRRDVGKATVIGFLGVLAL 244

Query: 246 LVLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLC 305
           L+LVN+LS+GVM+QPELA LQNPSMA VLEHVVG WGAVLIS+GL +SLLGALLSW LLC
Sbjct: 245 LMLVNLLSLGVMSQPELAALQNPSMAGVLEHVVGRWGAVLISIGLAVSLLGALLSWALLC 304

Query: 306 AEIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKM 365
           AEI+F +AKD TMP FLRRENANQVP NALWLTN  +Q+FL++  F+ G       Y  +
Sbjct: 305 AEILFVSAKDGTMPAFLRRENANQVPVNALWLTNGMIQLFLLITLFSQG------TYLSL 358

Query: 366 LLLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYAGGLK 425
           + LA+SMIL+PY WSA Y LLL L+GETYE+ A  R KDL +  +AV YA+WLLYAGG+K
Sbjct: 359 IYLASSMILVPYLWSAVYALLLALRGETYEDQAGLRRKDLAVGLLAVGYAIWLLYAGGVK 418

Query: 426 YLLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           YLLLSALLYAPGA+LF +AK E GQ +FT  E  IFAAV++ A++A YGLY G LTL
Sbjct: 419 YLLLSALLYAPGALLFRQAKREQGQVLFTRYEWPIFAAVLLTAVLAGYGLYAGHLTL 475


>TR:F7QAB7_9GAMM F7QAB7 Arginine/ornithine antiporter; membrane protein
           OS=Salinisphaera shabanensis E1L3A GN=SSPSH_13322 PE=4
           SV=1
          Length = 475

 Score =  681 bits (1756), Expect = 0.0
 Identities = 333/479 (69%), Positives = 397/479 (82%), Gaps = 6/479 (1%)

Query: 4   ESSQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQT 63
           +   KLRLGAL +LV GSMIG GIFSLPQNMAASA  G VL+GW ITA GML LAFVFQT
Sbjct: 3   DEKPKLRLGALVSLVAGSMIGAGIFSLPQNMAASASAGVVLVGWLITAAGMLMLAFVFQT 62

Query: 64  LANRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGK 123
           L+NR+P+LD G+YAYAKAGFGDYMGFSSAWGYWISAWLGNV Y VL+FSTLGY+FP+FG+
Sbjct: 63  LSNRRPDLDAGIYAYAKAGFGDYMGFSSAWGYWISAWLGNVSYLVLVFSTLGYYFPMFGE 122

Query: 124 GDTVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFT 183
           G+TVAA+VCAS+LLW LHFLVLRGI++AAFINTV T+AKVVP+ LFI+I  FAFK  +F 
Sbjct: 123 GNTVAAVVCASILLWLLHFLVLRGIQQAAFINTVATIAKVVPILLFIVIVAFAFKPSVFF 182

Query: 184 ADIWGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVL 243
            D WG  N DLGS M Q+R MMLVTVWVFIGIEGASI+S+RA+ RSDVGKATVIGF+ VL
Sbjct: 183 DDFWGTGNTDLGSFMTQLRGMMLVTVWVFIGIEGASIYSARAQNRSDVGKATVIGFLGVL 242

Query: 244 LLLVLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVL 303
           LLLV V+VLSMGV++QPELA LQ+PSMA VLEH+VGHWG+++IS+GLLISL GALL+W L
Sbjct: 243 LLLVAVSVLSMGVLSQPELANLQDPSMAGVLEHLVGHWGSLVISIGLLISLGGALLAWTL 302

Query: 304 LCAEIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYT 363
           LC EI+FAAA DHTMP FL+ ENAN VP+NALWL+N  +Q+FLV+  F+         Y 
Sbjct: 303 LCGEILFAAASDHTMPGFLKHENANHVPSNALWLSNGFIQLFLVITLFSE------STYL 356

Query: 364 KMLLLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYAGG 423
            +L LATSMIL+PY WSAAY LL++ +GETYE     R KD+ IA +A+AY++WLLYAGG
Sbjct: 357 SLLYLATSMILVPYLWSAAYALLMSWRGETYEGQPGRRRKDMAIATVALAYSLWLLYAGG 416

Query: 424 LKYLLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           ++Y+LLSALLYAPGA LFAKA+ E  +P+F   E +IFA V+ GA++A YGLY GFL+L
Sbjct: 417 IQYVLLSALLYAPGAALFAKARREQSKPVFQPFEWVIFALVLAGAVLAGYGLYAGFLSL 475


>TR:A0AEG9_9PSED A0AEG9 Arginine/ornithine antiporter OS=Pseudomonas extremaustralis
           GN=arcD PE=4 SV=1
          Length = 500

 Score =  657 bits (1696), Expect = 0.0
 Identities = 330/459 (71%), Positives = 385/459 (83%), Gaps = 7/459 (1%)

Query: 4   ESSQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQT 63
           +S+QKLRLGAL ALVVGSM+GGGIFSLPQN+AASA  GA LIGW IT VGMLTLAFVFQT
Sbjct: 3   DSTQKLRLGALIALVVGSMVGGGIFSLPQNIAASASAGATLIGWLITGVGMLTLAFVFQT 62

Query: 64  LANRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGK 123
           LANRKP+L+GGVYAYAKAGFGDYMGFSSAWGYWISAW+GNV Y VLLFSTLGYFFP+FG+
Sbjct: 63  LANRKPDLNGGVYAYAKAGFGDYMGFSSAWGYWISAWIGNVSYMVLLFSTLGYFFPVFGE 122

Query: 124 GDTVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFT 183
           G+T+ AI+CAS++LW LHFLVLRGI+EAAFINT+TT+AK++PL LFI+I   AFK+D+FT
Sbjct: 123 GNTLPAIICASIVLWLLHFLVLRGIREAAFINTITTIAKMLPLALFIVIAAVAFKMDVFT 182

Query: 184 ADIWGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVL 243
           +D WG  N +LGSVM+QVRNMMLVTVWVFIGIEGASIFS+RAEKRSDVGKATVIGFI VL
Sbjct: 183 SDFWGSGNSELGSVMDQVRNMMLVTVWVFIGIEGASIFSARAEKRSDVGKATVIGFIGVL 242

Query: 244 LLLVLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLL-ISLLGALLSWV 302
           LLLVLVN+LS G++ Q ELA L+NPSMA VLE V+  WGA LIS GL+ ++  G      
Sbjct: 243 LLLVLVNILSQGILAQAELAGLKNPSMAAVLEQVLAPWGAQLISFGLVHLAGGGGGFGGH 302

Query: 303 LLCAEIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPY 362
             CAEI+FA+A DHTMPEFLR+ENANQVPANALWL+N  +Q+FL++  F+         Y
Sbjct: 303 YWCAEILFASASDHTMPEFLRKENANQVPANALWLSNGLIQLFLIITLFSE------STY 356

Query: 363 TKMLLLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYAG 422
             +L LATSMIL+PYFWS+AY +LL L+GETYEN A ER+KDL+IA I+  YAVWL+YA 
Sbjct: 357 LSLLYLATSMILVPYFWSSAYAVLLALRGETYENAAGERNKDLLIALISTLYAVWLVYAA 416

Query: 423 GLKYLLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIF 461
           G++YLLLSALLYAPGAILFAKAK  VG   F G+ K  F
Sbjct: 417 GVQYLLLSALLYAPGAILFAKAKAGVGPTGFPGVRKSFF 455


>TR:Q2SB20_HAHCH Q2SB20 Amino acid transporters OS=Hahella chejuensis (strain KCTC
           2396) GN=HCH_05491 PE=4 SV=1
          Length = 497

 Score =  624 bits (1609), Expect = 0.0
 Identities = 303/482 (62%), Positives = 386/482 (80%), Gaps = 6/482 (1%)

Query: 1   MSQESSQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFV 60
           +S +  Q+LRLGAL ALVVGSMIGGGIFSLPQN+A SA  GAVL+GW +T VGML LAFV
Sbjct: 22  VSDKQPQRLRLGALIALVVGSMIGGGIFSLPQNIATSAGAGAVLLGWLVTGVGMLALAFV 81

Query: 61  FQTLANRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPI 120
           FQTL+ RKPELD GVYAYAKAGFG YMGF+SAWGYWI AW+GNV YFVLLFS+LG+FFP+
Sbjct: 82  FQTLSRRKPELDAGVYAYAKAGFGAYMGFNSAWGYWICAWIGNVSYFVLLFSSLGFFFPV 141

Query: 121 FGKGDTVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLD 180
           FG+G+T AA++CASVLLW +H +VL G+++AAFIN +TTVAK+VPL +F+++ L  FK D
Sbjct: 142 FGEGNTPAAVICASVLLWLVHAMVLSGVRQAAFINIITTVAKIVPLIMFVVLALVGFKAD 201

Query: 181 IFTADIWGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFI 240
           +F+ DIWG   P LGSV++QVRNMMLVTVWVFIGIEGAS++SSRA+ R+DVGKATV+GF+
Sbjct: 202 LFSIDIWGGEEPALGSVLDQVRNMMLVTVWVFIGIEGASVYSSRAQNRADVGKATVLGFV 261

Query: 241 TVLLLLVLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLS 300
            VL LLV+VNVLSMG++++ ELA L+NPSMA VLE VVG WGA LI+VGL+ISL GALLS
Sbjct: 262 GVLALLVMVNVLSMGILSRAELAGLKNPSMAGVLEVVVGAWGAKLINVGLIISLCGALLS 321

Query: 301 WVLLCAEIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMD 360
           W +L AEI+  AAKD  MP+ L R N+   P  ALWL+N  +Q+FL++  ++SG      
Sbjct: 322 WTMLSAEILCVAAKDGAMPKALARTNSRGSPRGALWLSNSLIQLFLIITLYSSG------ 375

Query: 361 PYTKMLLLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLY 420
            Y  +L L +SMIL+PYFW+A Y L+L L+GETY ++ R R KD  IA +AV Y++WL+Y
Sbjct: 376 TYLDLLYLGSSMILLPYFWTAFYALMLCLRGETYGDNDRVRGKDFAIALVAVLYSLWLVY 435

Query: 421 AGGLKYLLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFL 480
           AGG+KYLLLS++LYAPGA++FA A+ E G+ +FT +E  +   +++ AL    GLY G+L
Sbjct: 436 AGGVKYLLLSSILYAPGAVVFAIARREQGERVFTPLETGVLVVLIMAALAGIAGLYMGYL 495

Query: 481 TL 482
           +L
Sbjct: 496 SL 497


>TR:C4GEP1_9NEIS C4GEP1 Putative uncharacterized protein OS=Kingella oralis ATCC
           51147 GN=GCWU000324_00128 PE=4 SV=1
          Length = 485

 Score =  622 bits (1603), Expect = 0.0
 Identities = 314/490 (64%), Positives = 380/490 (77%), Gaps = 18/490 (3%)

Query: 5   SSQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTL 64
           +  KL+LG+LTALV+GSMIGGGIFSLP++MA+ A+VGA+LIGWAITAVGML LAFVFQTL
Sbjct: 2   ADHKLKLGSLTALVIGSMIGGGIFSLPKDMASGAEVGAILIGWAITAVGMLALAFVFQTL 61

Query: 65  ANRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKG 124
           ANRKP+LD GVY YAKAGFG+Y+GFSSAWGYWISAW+GNV Y +LL +TLGYFFP     
Sbjct: 62  ANRKPDLDNGVYTYAKAGFGNYLGFSSAWGYWISAWVGNVAYLMLLMNTLGYFFPALKTT 121

Query: 125 DT------------VAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILI 172
            T            V  I  ASVLLW++H LVLRG+K AAFINT+ T+AKV+PLF FI+I
Sbjct: 122 ITDPVTHEVTSSVSVWGIALASVLLWSMHMLVLRGVKTAAFINTIITIAKVIPLFAFIII 181

Query: 173 CLFAFKLDIFTADIWGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVG 232
            LF+FKLDIFT D WG  +PDLGSVM QV++MMLVTVWVFIGIEGAS++S+ AEKR+DVG
Sbjct: 182 LLFSFKLDIFTTDFWGTKSPDLGSVMTQVKSMMLVTVWVFIGIEGASVYSASAEKRTDVG 241

Query: 233 KATVIGFITVLLLLVLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLI 292
           KAT++GF++VL LLVLVNVLS GVM QPELA L+NPSMA VL HVVG WGA  ISVGL +
Sbjct: 242 KATILGFLSVLSLLVLVNVLSAGVMKQPELAGLENPSMAHVLAHVVGPWGATFISVGLGV 301

Query: 293 SLLGALLSWVLLCAEIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFT 352
           SLLGALL+W L  AE ++ A+KD T+P F  REN N  P NALW TNI +Q+FL++  F+
Sbjct: 302 SLLGALLAWTLFAAETLYVASKDGTVPAFFHRENKNAAPINALWATNIGMQIFLILNLFS 361

Query: 353 SGDPDGMDPYTKMLLLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAV 412
           +G       Y KM+ LATSMILIPY +SAAY  LLT++ ETY+ D ++  KD +IA +A 
Sbjct: 362 AGS------YQKMVALATSMILIPYLFSAAYAALLTVRKETYDKDPQDLGKDSIIAWVAT 415

Query: 413 AYAVWLLYAGGLKYLLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAA 472
            Y VWLLYA G++YLLLS LLYAPG  ++  A+ E  Q +F+ +EKL  AAV IGA+VA 
Sbjct: 416 VYGVWLLYAAGVEYLLLSMLLYAPGTFVYIWARKENKQVVFSAVEKLYVAAVFIGAIVAV 475

Query: 473 YGLYDGFLTL 482
            GL  G L+L
Sbjct: 476 VGLAQGKLSL 485


>TR:F0RPM0_DEIPM F0RPM0 Arginine/ornithine antiporter (Precursor) OS=Deinococcus
           proteolyticus (strain ATCC 35074 / DSM 20540 / JCM 6276
           / NBRC 101906 / NCIMB 13154 / VKM Ac-1939 / CCM 2703)
           GN=Deipr_2197 PE=4 SV=1
          Length = 483

 Score =  568 bits (1465), Expect = 0.0
 Identities = 287/475 (60%), Positives = 365/475 (76%), Gaps = 8/475 (1%)

Query: 8   KLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLANR 67
           +L L ALTALVVGS IGGGIF+LP N+A SA  G +L+GWAI+AVGML L  VFQ LANR
Sbjct: 17  RLGLPALTALVVGSTIGGGIFALPTNVAVSAAPGPMLVGWAISAVGMLALVLVFQMLANR 76

Query: 68  KPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDTV 127
           +P+L+ G+YAYAKAGFG++MGFSSAWGYWISA++G V YFVL+ ST+G F P FG+G+T 
Sbjct: 77  RPDLNTGIYAYAKAGFGNFMGFSSAWGYWISAFIGTVSYFVLMGSTIGQFVPAFGQGNTA 136

Query: 128 AAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTADIW 187
            AI  AS LLW +H LV RGI+ AA +N +TTV KVVPL LF+++ + AF+ D+FTAD W
Sbjct: 137 VAIGFASALLWGIHLLVSRGIRTAASLNVITTVGKVVPLILFVILSVLAFRFDVFTADFW 196

Query: 188 GKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLLLV 247
           GK++PDLGS ++Q++ MM+VTVWVFIGIEGAS +SSRA +RSD+GK TV+GF+  L LLV
Sbjct: 197 GKASPDLGSTLDQIKAMMMVTVWVFIGIEGASTYSSRAARRSDIGKGTVLGFLLTLFLLV 256

Query: 248 LVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLCAE 307
            VNVLSMG+M+Q ELA LQ+PS+A VLE VVG WGA LI +GLLISLLGA+L+W LLC E
Sbjct: 257 SVNVLSMGIMSQQELAGLQDPSVAYVLEAVVGPWGAWLIRIGLLISLLGAMLAWTLLCTE 316

Query: 308 IMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKMLL 367
           I++AAAKD  MP FL RENA+ VP  AL  TN+ VQ+FL++ +F          Y  +L 
Sbjct: 317 ILYAAAKDKEMPRFLARENAHGVPTGALLTTNLTVQLFLLITYFND------STYLTLLY 370

Query: 368 LATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYAGGLKYL 427
           LA++ IL+PY +SA YGL++  + + Y +   ER++DL+ AG+AV YA+WLLYA G +YL
Sbjct: 371 LASATILLPYLFSAGYGLMVASR-DRYASTG-ERTRDLLTAGLAVLYALWLLYAAGPQYL 428

Query: 428 LLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           LLS+LLYAPGA+LF KA+ E G  +F   E  + A + + AL AAYGL  GFLTL
Sbjct: 429 LLSSLLYAPGALLFVKARREQGLQVFKPWELGLLALLTLAALYAAYGLKSGFLTL 483


>TR:C1DD80_LARHH C1DD80 ArcD OS=Laribacter hongkongensis (strain HLHK9) GN=arcD-3
           PE=4 SV=1
          Length = 478

 Score =  562 bits (1448), Expect = 0.0
 Identities = 289/481 (60%), Positives = 360/481 (74%), Gaps = 10/481 (2%)

Query: 4   ESSQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQT 63
           +++ KL+L ALTALVVGSMIGGGIFSLPQNMAA A  GA+LIGW IT VGML LAFVFQT
Sbjct: 6   QAAPKLKLPALTALVVGSMIGGGIFSLPQNMAAGAGAGAILIGWGITFVGMLMLAFVFQT 65

Query: 64  LANRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPI--F 121
           LANRKPE++GGVY YA+AGFG YMGF+SAWGYWISAW+GNV YFV+LFS LG F  +  F
Sbjct: 66  LANRKPEIEGGVYGYARAGFGPYMGFNSAWGYWISAWIGNVSYFVVLFSALGSFDALGFF 125

Query: 122 GKGDTVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDI 181
           G+G+T+ AIVCASVLLWALHFLVLRG+  A  INT+TT+AK+VPL +F+L+ +FAFK+D 
Sbjct: 126 GEGNTLPAIVCASVLLWALHFLVLRGVHGATMINTITTIAKLVPLAMFVLVVVFAFKIDT 185

Query: 182 FTADIWGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFIT 241
           F+ D WG +  DLGSV++QV++ MLVTVWVFIGIEGAS+FSSRA+  +DVGKATVIGF+ 
Sbjct: 186 FSLDFWGSA--DLGSVVDQVKSTMLVTVWVFIGIEGASVFSSRAQSMADVGKATVIGFLL 243

Query: 242 VLLLLVLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSW 301
            + LLV V+VLSMGV+TQPELA L+NPS A VL+ V+G WGA L+++GL++S+ GALL+W
Sbjct: 244 TIGLLVAVSVLSMGVLTQPELAALKNPSTAGVLKAVLGDWGAALMNIGLIVSVGGALLAW 303

Query: 302 VLLCAEIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDP 361
            LL AE+ + A KD T P    + NA   PA +LWLTN  VQ+FLV+  F          
Sbjct: 304 TLLSAEMPYLAGKDGTFPRLFGQLNAKGAPAASLWLTNGLVQLFLVITLFNEAG------ 357

Query: 362 YTKMLLLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYA 421
           Y  +L LATSMILIPYF  AAY L++ +K + Y+     RSKDL+I  +   Y +WL+YA
Sbjct: 358 YLALLSLATSMILIPYFLCAAYALIIAVKSDGYKAGEAARSKDLLIGLVGSVYGLWLVYA 417

Query: 422 GGLKYLLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLT 481
            G +YL LS +LYAPG + + KA+ E  Q  F   E +I A VV+    A Y L  G L+
Sbjct: 418 AGPQYLFLSMILYAPGLLFYIKARAEQSQKPFNAAEAVIAAIVVVLGAYAVYELATGALS 477

Query: 482 L 482
           L
Sbjct: 478 L 478


>TR:B2TG51_BURPP B2TG51 Arginine/ornithine antiporter OS=Burkholderia phytofirmans
           (strain DSM 17436 / PsJN) GN=Bphyt_5574 PE=4 SV=1
          Length = 493

 Score =  551 bits (1419), Expect = 0.0
 Identities = 271/479 (56%), Positives = 358/479 (74%), Gaps = 8/479 (1%)

Query: 4   ESSQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQT 63
           ++++ LRLG LTALV+GSMIG G+FSLPQNMA+ A   AVLIGW IT VGMLTLAFV+QT
Sbjct: 23  QTAKPLRLGLLTALVIGSMIGSGVFSLPQNMASGAGAAAVLIGWLITGVGMLTLAFVYQT 82

Query: 64  LANRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGK 123
           L+ RKPELD G+YAYA+A  GD++GF+SAWGYW+SAW+GNVGY V++F TLGYFFP+FG 
Sbjct: 83  LSTRKPELDNGIYAYARASAGDFVGFNSAWGYWVSAWIGNVGYLVIVFGTLGYFFPVFGD 142

Query: 124 GDTVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFT 183
           G+T AA++ AS++LW +H ++LRG++ AA +N +TTVAKV+PL +FIL+ L AF+  +F 
Sbjct: 143 GNTRAAVLGASIVLWIMHAVILRGVRSAAVLNAITTVAKVIPLLVFILLALAAFRSHVFA 202

Query: 184 ADIWGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVL 243
            D WG S   LG+V  QV++ ML+TVWVFIGIEGA++FS+RA++R D+G+AT++GF  VL
Sbjct: 203 QDFWGSSK--LGNVFTQVKSTMLITVWVFIGIEGANVFSARAQRRQDIGRATLLGFTVVL 260

Query: 244 LLLVLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVL 303
           LLL+ V++LS+G++ Q ELA ++NPSMA VL+  VG WGAVLIS+GLL+S+ GALL+W L
Sbjct: 261 LLLMAVSLLSLGIVPQSELAAMKNPSMAGVLDKAVGTWGAVLISIGLLVSVGGALLAWTL 320

Query: 304 LCAEIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYT 363
           L AE +F  A    MP FL R+N++ VPANALWLTN  VQ+FL++   ++        Y 
Sbjct: 321 LAAETLFTPASGGVMPTFLARQNSHGVPANALWLTNGLVQLFLIITLVSNA------TYQ 374

Query: 364 KMLLLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYAGG 423
            ++ LATSMILIPY +SA Y   + ++G+ Y      RS+D +I  +A  Y  WLLYA G
Sbjct: 375 ALISLATSMILIPYLFSAVYATRIAMRGDGYTITDTTRSRDTLIGAMATVYCCWLLYAAG 434

Query: 424 LKYLLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
            KYLLLSALLYAPG +LF  AK E G  +F   E  I AA++  A +AA+ L  G L L
Sbjct: 435 PKYLLLSALLYAPGVLLFGWAKRERGASLFKPFEVAILAALIALAALAAWLLSSGALGL 493


>TR:B4SRE0_STRM5 B4SRE0 Arginine/ornithine antiporter (Precursor)
           OS=Stenotrophomonas maltophilia (strain R551-3)
           GN=Smal_2905 PE=4 SV=1
          Length = 473

 Score =  549 bits (1415), Expect = 0.0
 Identities = 276/478 (57%), Positives = 361/478 (75%), Gaps = 8/478 (1%)

Query: 5   SSQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTL 64
           +SQ+L L AL ALVVGSM+G GIFSLPQN+A SA   A LIGWA++  GML LAFVFQ L
Sbjct: 4   TSQRLGLPALIALVVGSMVGAGIFSLPQNVARSAGPAAALIGWALSGAGMLMLAFVFQAL 63

Query: 65  ANRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKG 124
           ANR+P+LD G+YAYA+ GFG+Y+GFS+AWGYW+++ LGN  +FVL+FS LG+F P+FG+G
Sbjct: 64  ANRRPDLDTGIYAYAREGFGNYIGFSAAWGYWVASVLGNASFFVLIFSGLGHFMPVFGEG 123

Query: 125 DTVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTA 184
           +T AA+  +S+LLWA+H LVLRG++ AA +N + TVAK++P+ LF+++   AF+LD+F A
Sbjct: 124 NTPAAVAASSLLLWAVHLLVLRGLRTAAIVNGLVTVAKLLPIALFLVLAAGAFRLDVFRA 183

Query: 185 DIWGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLL 244
           D +G   P LG +  Q+R MMLVTVWVFIGIEGASI+S RA +R+DVG+ATVIGF+ V L
Sbjct: 184 DFFG--TPALGDLGQQLRGMMLVTVWVFIGIEGASIYSRRAARRADVGRATVIGFVGVWL 241

Query: 245 LLVLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLL 304
           LLVLV++LSMGV++Q ELA L NPSMA VL  +VG WGA +I VG +IS+LGALL+WVLL
Sbjct: 242 LLVLVSLLSMGVLSQAELAGLPNPSMAYVLRAIVGEWGATVIIVGSIISVLGALLAWVLL 301

Query: 305 CAEIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTK 364
           CAE+++AAA D TMP FL RENA  VPANALWL+N  +Q+FL++V   SG       YT 
Sbjct: 302 CAEVLYAAAGDGTMPAFLGRENARGVPANALWLSNGLIQLFLLLVLVNSGS------YTG 355

Query: 365 MLLLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYAGGL 424
           ++LLA SM L+PYF S A+G+ L  +G  Y      R +D  +A +A AYA+WL+YAGGL
Sbjct: 356 LVLLAASMSLVPYFLSTAFGVQLAWRGHAYAGQPGVRWRDFAVALLASAYALWLVYAGGL 415

Query: 425 KYLLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
             LLLS LLY PG +LFA  +H+ G  +FT  E ++FAA+++ A+      + G LTL
Sbjct: 416 DNLLLSVLLYVPGVVLFALTRHQRGDQVFTRWEWVLFAAILVVAVATLAAFWRGALTL 473


>TR:Q7NRJ8_CHRVO Q7NRJ8 Arginine/ornithine antiporter OS=Chromobacterium violaceum
           (strain ATCC 12472 / DSM 30191 / JCM 1249 / NBRC 12614 /
           NCIMB 9131 / NCTC 9757) GN=arcD PE=4 SV=1
          Length = 473

 Score =  548 bits (1413), Expect = 0.0
 Identities = 287/482 (59%), Positives = 351/482 (72%), Gaps = 9/482 (1%)

Query: 1   MSQESSQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFV 60
           M++  S +L+LGALTALVVGSMIGGGIFSLPQNMAA A  GA+LIGWAIT VGML LAFV
Sbjct: 1   MAEGGSPRLKLGALTALVVGSMIGGGIFSLPQNMAAGAGAGAILIGWAITFVGMLALAFV 60

Query: 61  FQTLANRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPI 120
           FQ LA+RKPE+ GGVY YAKAGFGDYMGF+SAWGYWISAW+GNV YFV++FS LG++ P 
Sbjct: 61  FQMLASRKPEVSGGVYGYAKAGFGDYMGFNSAWGYWISAWIGNVSYFVVMFSALGFWVPA 120

Query: 121 FGKGDTVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLD 180
           FG G+T  AI CASVLLWALHFLVLRG+  AAFINT+TT+AK+VPL LFI + +FAFK+D
Sbjct: 121 FGDGNTPIAIACASVLLWALHFLVLRGVHGAAFINTITTIAKLVPLALFIALIVFAFKVD 180

Query: 181 IFTADIWGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFI 240
            F+ D WG +   LGS+++QV++ MLVTVWVFIGIEGAS+FS RAE   DVGKATVIGF+
Sbjct: 181 TFSLDFWGSAK--LGSIVDQVKSTMLVTVWVFIGIEGASMFSGRAESMKDVGKATVIGFL 238

Query: 241 TVLLLLVLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLS 300
             + LLV V+VLS+GVMTQ ELA L+NPS A VL+   G +GA L++ GL+IS+ GALL+
Sbjct: 239 LTIALLVAVSVLSLGVMTQAELAALKNPSTAYVLQKAFGTFGANLMNAGLVISVGGALLA 298

Query: 301 WVLLCAEIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMD 360
           W LL AE  + A KD  MP+     N N  PA +LWLTN  +Q+FL++   +S       
Sbjct: 299 WTLLAAEAPYLAGKDGVMPKVFGTVNGNDTPAASLWLTNGLIQLFLLITLKSSAG----- 353

Query: 361 PYTKMLLLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLY 420
            Y  +L LATSMILIPY   A Y  L+  +GE Y      R K+L  A +A  Y  WL+Y
Sbjct: 354 -YLALLSLATSMILIPYLLCAGYSWLVAQRGEGYA-QGEARGKELGTAILATVYGAWLIY 411

Query: 421 AGGLKYLLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFL 480
           A G KYL LS +LYAPG + +  AK E GQ  F  IE ++ A VV+ A++A Y L  G +
Sbjct: 412 AAGPKYLFLSMVLYAPGLLFYLWAKKEQGQKPFNLIEAVLAAIVVVLAVIAVYMLATGQI 471

Query: 481 TL 482
            L
Sbjct: 472 GL 473


>TR:I2IJC0_9BURK I2IJC0 Arginine/ornithine antiporter (Precursor) OS=Burkholderia
           sp. Ch1-1 GN=BCh11DRAFT_06328 PE=4 SV=1
          Length = 493

 Score =  548 bits (1413), Expect = 0.0
 Identities = 271/477 (56%), Positives = 355/477 (74%), Gaps = 8/477 (1%)

Query: 6   SQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLA 65
           ++ LRLG LTALV+GSMIG G+FSLPQNMA+ A   AVLIGW IT VGML LAFV+QTL 
Sbjct: 25  AKPLRLGLLTALVIGSMIGSGVFSLPQNMASGAGAAAVLIGWLITGVGMLMLAFVYQTLT 84

Query: 66  NRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGD 125
            RKPELD G+YAYA+A  GD++GF+SAWGYW+SAW+GNVGY V++F TLGYFFPIFG G+
Sbjct: 85  TRKPELDNGIYAYARASAGDFVGFNSAWGYWVSAWIGNVGYLVIVFGTLGYFFPIFGDGN 144

Query: 126 TVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTAD 185
           T AA++ AS+ LW +H ++LRG++ AA +N +TTVAKV+PL LFI++   AF+  +   D
Sbjct: 145 TPAAVLGASIALWIMHAVILRGVRSAAVLNAITTVAKVIPLLLFIVLAAIAFRSHVIAQD 204

Query: 186 IWGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLL 245
            WG  N  LGSV  QV++ ML+TVWVFIGIEGAS+FS+RA++R D+G+AT++GF+ VLLL
Sbjct: 205 FWG--NAKLGSVFTQVKSTMLITVWVFIGIEGASVFSARAQRREDIGRATLLGFVVVLLL 262

Query: 246 LVLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLC 305
           L+ V++LS+G++ Q +LA ++NPSMA VL+  VG WGAVLIS+GLL+S+ GALL+W LL 
Sbjct: 263 LMAVSLLSLGIVPQGDLAAMKNPSMAGVLDKAVGAWGAVLISIGLLVSVGGALLAWTLLA 322

Query: 306 AEIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKM 365
           AE +F  A    MP+FL REN++ VPANALW+TN  VQ+FL++   ++        Y  +
Sbjct: 323 AETLFTPANGGVMPKFLARENSHGVPANALWVTNGLVQLFLIITLVSNA------TYQAL 376

Query: 366 LLLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYAGGLK 425
           + LATSMILIPY +SA Y   + ++GE Y      R++D++I   A  Y  WLLYA G K
Sbjct: 377 ISLATSMILIPYLFSAVYATRIAMRGEGYAPAEGARTRDMLIGAAATVYCCWLLYAAGPK 436

Query: 426 YLLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           YLLLSALLYAPG +L+  AK E G  +F   E +I AA++I A VAA+ L  G L L
Sbjct: 437 YLLLSALLYAPGVLLYGWAKRERGARLFKPFEAVILAALLILAAVAAWLLSTGALGL 493


>TR:Q13XV1_BURXL Q13XV1 Arginine:ornithine antiporter, APA family OS=Burkholderia
           xenovorans (strain LB400) GN=Bxeno_A2550 PE=4 SV=1
          Length = 493

 Score =  547 bits (1410), Expect = 0.0
 Identities = 271/477 (56%), Positives = 355/477 (74%), Gaps = 8/477 (1%)

Query: 6   SQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLA 65
           ++ LRLG LTALV+GSMIG G+FSLPQNMA+ A   AVLIGW IT VGML LAFV+QTL 
Sbjct: 25  AKPLRLGLLTALVIGSMIGSGVFSLPQNMASGAGAAAVLIGWLITGVGMLMLAFVYQTLT 84

Query: 66  NRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGD 125
            RKPELD G+YAYA+A  G+++GF+SAWGYW+SAW+GNVGY V++F TLGYFFPIFG G+
Sbjct: 85  TRKPELDNGIYAYARASAGEFVGFNSAWGYWVSAWIGNVGYLVIVFGTLGYFFPIFGDGN 144

Query: 126 TVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTAD 185
           T AA++ AS+ LW +H ++LRG++ AA +N +TTVAKV+PL LFI++   AF+  +   D
Sbjct: 145 TPAAVLGASIALWIMHAVILRGVRSAAVLNAITTVAKVIPLLLFIVLAAIAFRSHVIAQD 204

Query: 186 IWGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLL 245
            WG  N  LGSV  QV++ ML+TVWVFIGIEGAS+FS+RA++R D+G+AT++GF+ VLLL
Sbjct: 205 FWG--NAKLGSVFTQVKSTMLITVWVFIGIEGASVFSARAQRREDIGRATLLGFVVVLLL 262

Query: 246 LVLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLC 305
           L+ V++LS+G++ Q ELA ++NPSMA VL+  VG WGAVLIS+GLL+S+ GALL+W LL 
Sbjct: 263 LMAVSLLSLGIVPQGELAAMKNPSMAGVLDKAVGAWGAVLISIGLLVSVGGALLAWTLLA 322

Query: 306 AEIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKM 365
           AE +F  A    MP+FL REN++ VPANALW+TN  VQ+FL++   ++        Y  +
Sbjct: 323 AETLFTPANGGVMPKFLARENSHGVPANALWVTNGLVQLFLIITLVSNA------TYQAL 376

Query: 366 LLLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYAGGLK 425
           + LATSMILIPY +SA Y   + ++GE Y      R++D++I   A  Y  WLLYA G K
Sbjct: 377 ISLATSMILIPYLFSAVYATGIAMRGEGYAPAEGARTRDMLIGAAATVYCCWLLYAAGPK 436

Query: 426 YLLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           YLLLSALLYAPG +L+  AK E G  +F   E +I AA++I A VAA+ L  G L L
Sbjct: 437 YLLLSALLYAPGVLLYGWAKRERGARLFKPFEAVILAALLILAAVAAWLLSTGALGL 493


>TR:F3GB48_PSESJ F3GB48 Arginine/ornithine antiporter (Fragment) OS=Pseudomonas
           syringae pv. pisi str. 1704B GN=PSYPI_18696 PE=4 SV=1
          Length = 348

 Score =  540 bits (1392), Expect = 0.0
 Identities = 275/354 (77%), Positives = 305/354 (86%), Gaps = 6/354 (1%)

Query: 129 AIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTADIWG 188
           A++ ASVLLW +HFLVLRGI+EAAFIN VTTVAKVVPL  F+LI +FAFKLDIFT DIWG
Sbjct: 1   AVIGASVLLWGVHFLVLRGIQEAAFINLVTTVAKVVPLIFFVLIAVFAFKLDIFTTDIWG 60

Query: 189 KSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLLLVL 248
              PD+GSVMNQVR+MMLVTVWVFIGIEGASIFS+RA+KRSDVGKATVIGFITVLLLLVL
Sbjct: 61  LKKPDMGSVMNQVRHMMLVTVWVFIGIEGASIFSARAKKRSDVGKATVIGFITVLLLLVL 120

Query: 249 VNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLCAEI 308
           VNVLS+GVMTQPELAKLQNPSMA VLEH+VG WGA LIS GL+ISLLGALLSWVLLCAEI
Sbjct: 121 VNVLSLGVMTQPELAKLQNPSMAAVLEHIVGPWGAALISEGLIISLLGALLSWVLLCAEI 180

Query: 309 MFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKMLLL 368
           MFAAAKDHTMPEFL RENAN VPANALWLTN  VQVFLV+  F+S        Y  ++ L
Sbjct: 181 MFAAAKDHTMPEFLSRENANHVPANALWLTNAMVQVFLVITLFSS------STYLSLIYL 234

Query: 369 ATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYAGGLKYLL 428
           ATSMILIPY WSAAY LLL ++GE YEN   ER KDL IA +A+ YA+WL+YAGG+KYLL
Sbjct: 235 ATSMILIPYLWSAAYALLLAIRGEGYENARSERRKDLFIAAVALLYAIWLIYAGGVKYLL 294

Query: 429 LSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           LSALLYAPG ILFAKAK E  +P+FT +E +IF AV+IGAL+AAYGLYDGFLTL
Sbjct: 295 LSALLYAPGVILFAKAKLEAKKPVFTHLENMIFVAVLIGALLAAYGLYDGFLTL 348


>TR:B8L6S5_9GAMM B8L6S5 Arginine/ornithine antiporter OS=Stenotrophomonas sp. SKA14
           GN=SSKA14_3520 PE=4 SV=1
          Length = 473

 Score =  543 bits (1398), Expect = 0.0
 Identities = 273/477 (57%), Positives = 359/477 (75%), Gaps = 8/477 (1%)

Query: 6   SQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLA 65
           SQ+L L ALTALVVGSM+G GIFSLPQN+A SA   A LIGWA++  GML LAFVFQ LA
Sbjct: 5   SQRLGLPALTALVVGSMVGAGIFSLPQNVARSAGPAAALIGWAVSGAGMLMLAFVFQALA 64

Query: 66  NRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGD 125
           NR+P+LD G+YAYA+ GFG+Y+GFS+AWGYW+++ LGN  +FVL+FS LG+F P+FG+G+
Sbjct: 65  NRRPDLDTGIYAYAREGFGNYIGFSAAWGYWVASVLGNASFFVLIFSGLGHFMPVFGEGN 124

Query: 126 TVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTAD 185
           T AA+  +SVLLW +H LVLRG++ AA +N + TVAK++P+ LF+++   AF+LD+F AD
Sbjct: 125 TPAAVAASSVLLWTVHLLVLRGLRTAAIVNGLVTVAKLLPIALFLVLAAGAFRLDVFRAD 184

Query: 186 IWGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLL 245
             G   P LG +  Q+R MMLVTVWVFIGIEGASI+S RA +R+DVG+ATVIGF+ V LL
Sbjct: 185 FLG--TPALGDLGQQLRGMMLVTVWVFIGIEGASIYSRRAARRADVGRATVIGFLGVWLL 242

Query: 246 LVLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLC 305
           LVLV++LSMGV++Q ELA L NPSMA VL  +VG WGA +I +G ++S+LGALL+WVLLC
Sbjct: 243 LVLVSLLSMGVLSQAELAGLPNPSMAYVLRAIVGEWGATVIIIGSIMSVLGALLAWVLLC 302

Query: 306 AEIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKM 365
           AE+++AAA D TMP FL RENA  VPANALWL+N  +Q+FL++V   +G       YT +
Sbjct: 303 AEVLYAAAGDGTMPAFLGRENARGVPANALWLSNGLIQLFLLLVLVNAGS------YTGL 356

Query: 366 LLLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYAGGLK 425
           +LLA SM L+PYF S A+G+ L  +G  Y  +   R +D  +A +A AYA+WL+YAGGL 
Sbjct: 357 VLLAASMSLVPYFLSTAFGVQLAWRGHAYAGEPGVRWRDFGVALLASAYALWLVYAGGLD 416

Query: 426 YLLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
            LLLS LLY PG +LFA A+ + G+ +FT  E ++F A+++ A+        G LTL
Sbjct: 417 NLLLSVLLYVPGVVLFALARRQHGERVFTRWEWVLFGAILLVAIATLVAFSKGQLTL 473


>TR:E1T8P7_BURSG E1T8P7 Arginine/ornithine antiporter OS=Burkholderia sp. (strain
           CCGE1003) GN=BC1003_1760 PE=4 SV=1
          Length = 493

 Score =  541 bits (1395), Expect = 0.0
 Identities = 264/476 (55%), Positives = 352/476 (73%), Gaps = 8/476 (1%)

Query: 7   QKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLAN 66
           ++LRLG LTALV+GSMIG G+FSLPQNMA+ A   AVLIGW IT  GML LAFV+QTL  
Sbjct: 26  KQLRLGLLTALVIGSMIGSGVFSLPQNMASGAGAAAVLIGWLITGAGMLMLAFVYQTLTT 85

Query: 67  RKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDT 126
           RKP+LD G+YAYA+A  GD++GF+SAWGYW+SAW+GNVGY V++F TLGYFFP+FG G+T
Sbjct: 86  RKPQLDNGIYAYAQASAGDFLGFNSAWGYWVSAWIGNVGYLVIVFGTLGYFFPVFGDGNT 145

Query: 127 VAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTADI 186
            AA++ AS++LW +H ++LRG++ AA +N +TT+AKV+PL LFI++   AF+  +   D 
Sbjct: 146 SAAVLGASIVLWTMHAVILRGVRSAAVLNAITTIAKVIPLLLFIVLAAVAFRSHVIAQDF 205

Query: 187 WGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLLL 246
           WG  N  LG+V  QV++ ML+TVWVFIGIEGA++FS+RA++R DVG+AT++GF  VLLLL
Sbjct: 206 WG--NAKLGNVFTQVKSTMLITVWVFIGIEGANVFSARAQRREDVGRATLLGFSVVLLLL 263

Query: 247 VLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLCA 306
           + V++LS+G++ Q ELA ++NPSMA VL+  VG WGAVLIS+GLL+S+ GALL+W LL A
Sbjct: 264 MAVSLLSLGIVPQGELAAMKNPSMAGVLQRAVGAWGAVLISLGLLVSVGGALLAWTLLAA 323

Query: 307 EIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKML 366
           E +F  A    MP+FL R N+  VPANALW+TN  VQ+FLV+   +S        Y  ++
Sbjct: 324 ETLFTPANGGVMPKFLARSNSRGVPANALWVTNGLVQLFLVITLVSSA------TYQALI 377

Query: 367 LLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYAGGLKY 426
            LATSMIL+PY +SA Y   + ++GE Y  D   R++D++I   A  Y  WLLYA G KY
Sbjct: 378 SLATSMILVPYLFSAVYATRIAMRGEGYAQDESVRTRDMLIGAAATVYCCWLLYAAGPKY 437

Query: 427 LLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           LLLSALLY+PG +L+  AK E G  +F   E +I AA+++ A VA + L  G + L
Sbjct: 438 LLLSALLYSPGVLLYGWAKRERGARLFKPFELVILAALLVLAAVAGWLLATGAIGL 493


>TR:C1DAV8_LARHH C1DAV8 ArcD OS=Laribacter hongkongensis (strain HLHK9) GN=arcD-1
           PE=4 SV=1
          Length = 492

 Score =  541 bits (1393), Expect = 0.0
 Identities = 276/480 (57%), Positives = 354/480 (73%), Gaps = 10/480 (2%)

Query: 5   SSQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTL 64
           ++ KL+LGALTALVV ++I  GIFSLPQNMAASA  GA++IGW IT VGML LAFVFQTL
Sbjct: 21  AAPKLKLGALTALVVSALIAAGIFSLPQNMAASAGAGAIMIGWGITFVGMLMLAFVFQTL 80

Query: 65  ANRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPI--FG 122
           ANRKPE++GGVY YA+AGFG YMGF+SAWGYWISAW+GNV Y+V++FS LG F  +  FG
Sbjct: 81  ANRKPEVEGGVYGYARAGFGPYMGFNSAWGYWISAWIGNVSYYVVIFSALGSFSSMGFFG 140

Query: 123 KGDTVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIF 182
            G+T+ AI+C+S LLW  H L+ RGI+ AA IN +TTVAK++PL LF+++ + AF+++ F
Sbjct: 141 DGNTLPAILCSSALLWGYHALICRGIQGAALINIITTVAKLIPLALFLVLVVVAFRIETF 200

Query: 183 TADIWGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITV 242
           T D WG+  P+LGS+++QV++ MLVT WVFIGIEGASIFSSRAEK +DVGKAT+IGF   
Sbjct: 201 TLDFWGR--PELGSLVDQVKSTMLVTTWVFIGIEGASIFSSRAEKMADVGKATMIGFALS 258

Query: 243 LLLLVLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWV 302
           +LL V V++LS+GV++QPELA L+NPS A VL+  VG WGA L++ GL+IS+ GALL+W 
Sbjct: 259 ILLFVAVSMLSLGVLSQPELAALKNPSTAGVLKAAVGDWGAALMNAGLVISVGGALLAWT 318

Query: 303 LLCAEIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPY 362
           LL AE+ + A KD TMP FL + NA   P NAL LTN  VQ+FL++  F          Y
Sbjct: 319 LLAAEVPYLAGKDGTMPAFLGKTNAKGAPVNALLLTNGLVQLFLIITLFNG------SAY 372

Query: 363 TKMLLLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYAG 422
             +LLLATSMILIPY   A Y + + ++GE Y+ D R   KD +IA +   Y  WLLYA 
Sbjct: 373 LDLLLLATSMILIPYLLCALYAVKIAVRGEGYDGDLRAADKDKLIALLGSVYGCWLLYAA 432

Query: 423 GLKYLLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           G KYLLLS +LYAPG + + KA+ E G  +FT  E ++    VI  L+AA+ L  G LT+
Sbjct: 433 GPKYLLLSMVLYAPGILFYIKARREQGGVLFTRNELVLAGVAVILGLIAAFQLATGALTI 492


>TR:B2FPR1_STRMK B2FPR1 Putative arginine/ornithine antiporter (Precursor)
           OS=Stenotrophomonas maltophilia (strain K279a) GN=arcD
           PE=4 SV=1
          Length = 473

 Score =  540 bits (1390), Expect = 0.0
 Identities = 270/478 (56%), Positives = 359/478 (75%), Gaps = 8/478 (1%)

Query: 5   SSQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTL 64
           +SQ+L L ALTALVVGSM+G GIFSLPQN+A SA   A L+GWA++  GML LAFVFQ L
Sbjct: 4   TSQRLGLPALTALVVGSMVGAGIFSLPQNVARSAGPAAALLGWAVSGAGMLMLAFVFQAL 63

Query: 65  ANRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKG 124
           ANR+P+LD G+YAYA+ GFG+Y+GFS+AWGYW+++ LGN  +FVL+FS LG+F P+FG+G
Sbjct: 64  ANRRPDLDTGIYAYAREGFGNYIGFSAAWGYWVASVLGNASFFVLIFSGLGHFMPVFGEG 123

Query: 125 DTVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTA 184
           +T AA+  +S+LLW +H LVLRG++ AA +N + TVAK++P+ LF+++   AF++D+F A
Sbjct: 124 NTPAAVAASSLLLWTVHLLVLRGLRTAAIVNGLVTVAKLLPITLFLILAAGAFRMDVFRA 183

Query: 185 DIWGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLL 244
           D  G   P LG +  Q+R MMLVTVWVFIGIEGASI+S RA +R+DVG+ATVIGF+ V L
Sbjct: 184 DFLGA--PALGDLGQQLRGMMLVTVWVFIGIEGASIYSRRAARRADVGRATVIGFLGVWL 241

Query: 245 LLVLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLL 304
           LLVLV++LSMGV++Q ELA L NPSMA VL  +VG WGA +I VG +IS+LGALL+WVLL
Sbjct: 242 LLVLVSLLSMGVLSQAELAGLPNPSMAYVLRAIVGEWGATVIIVGSIISVLGALLAWVLL 301

Query: 305 CAEIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTK 364
           CAE+++AAA D TMP FL RENA  VPANALWL+N  +Q+FL++V   SG       YT 
Sbjct: 302 CAEVLYAAAGDGTMPAFLGRENARGVPANALWLSNGLIQLFLLLVLVNSGS------YTG 355

Query: 365 MLLLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYAGGL 424
           ++LLA SM L+PYF S A+G+ L  +G+ Y  +   R +D  +A +A AYA+WL+YAGGL
Sbjct: 356 LVLLAASMSLVPYFLSTAFGVQLAWRGDAYAGEPGVRWRDFAVALLASAYALWLVYAGGL 415

Query: 425 KYLLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
             LLLS LLY PG ++FA  + + G+ +FT  E ++F A+++ A+        G L L
Sbjct: 416 DNLLLSVLLYVPGVVVFALTRLQRGEQVFTRWEWVLFGAILVVAIATLVAFSRGELAL 473


>TR:B1G449_9BURK B1G449 Arginine/ornithine antiporter OS=Burkholderia graminis C4D1M
           GN=BgramDRAFT_4174 PE=4 SV=1
          Length = 493

 Score =  539 bits (1388), Expect = 0.0
 Identities = 263/476 (55%), Positives = 353/476 (74%), Gaps = 8/476 (1%)

Query: 5   SSQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTL 64
           +++ LRLG LTALV+GSMIG G+FSLPQNMA+ A   AVLIGW IT  GML LAFV+QTL
Sbjct: 24  AAKPLRLGLLTALVIGSMIGSGVFSLPQNMASGAGAAAVLIGWLITGAGMLMLAFVYQTL 83

Query: 65  ANRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKG 124
           A RK  LD G+YAYA+A  GD++GF+SAWGYW+SAW+GNVGY V++F TLGYFFP+FG G
Sbjct: 84  ATRKSLLDNGIYAYAQASAGDFVGFNSAWGYWVSAWIGNVGYLVIVFGTLGYFFPVFGDG 143

Query: 125 DTVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTA 184
           +T +A++ AS+ LW++H ++LRG++ AA +N +TT+AKV+PL LFI++   AF+  +   
Sbjct: 144 NTPSAVLAASIALWSMHAVILRGVRSAAVLNAITTIAKVIPLLLFIVLAALAFRSHVIAQ 203

Query: 185 DIWGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLL 244
           D WG  N  LGSV  QVR+ ML+TVWVFIGIEGA++FS+RA++R D+G+AT++GF  VLL
Sbjct: 204 DFWG--NAKLGSVFTQVRSTMLITVWVFIGIEGANVFSARAQRREDIGRATLLGFAVVLL 261

Query: 245 LLVLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLL 304
           LL+ V++LS+G+++Q ELA ++NPSMA VLE  VG WGAV+IS+GLL+S+ GALL+W LL
Sbjct: 262 LLMAVSLLSLGIVSQGELASMKNPSMAGVLEKAVGSWGAVVISLGLLVSVGGALLAWTLL 321

Query: 305 CAEIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTK 364
            AE +F  A    MP+FL R N++ VPANALW+TN  VQ+FL++   ++        Y  
Sbjct: 322 AAETLFTPANGGVMPKFLARSNSHGVPANALWVTNGLVQLFLIITLVSNA------TYQA 375

Query: 365 MLLLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYAGGL 424
           ++ LATSMILIPY +SA Y   + ++G+ Y      R++D++I   A AY  WLLYA G 
Sbjct: 376 LISLATSMILIPYLFSAVYATRIAMRGDGYAPGESARTRDMLIGSAATAYCCWLLYAAGP 435

Query: 425 KYLLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFL 480
           KYLLLSALLYAPG +L+  AK E G  +F   E +I AA+++ A VA + L  G L
Sbjct: 436 KYLLLSALLYAPGVLLYGWAKRERGARVFKPFEFVILAALLVLAAVAGWLLATGAL 491


>TR:I0KR90_STEMA I0KR90 Arginine/ornithine antiporter ArcD OS=Stenotrophomonas
           maltophilia D457 GN=arcD PE=4 SV=1
          Length = 484

 Score =  537 bits (1383), Expect = 0.0
 Identities = 269/478 (56%), Positives = 358/478 (74%), Gaps = 8/478 (1%)

Query: 5   SSQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTL 64
           +SQ+L L ALTALVVGSM+G GIFSLPQN+A SA   A LIGWA++  GML LAFVFQ L
Sbjct: 15  TSQRLGLPALTALVVGSMVGAGIFSLPQNVARSAGPAAALIGWAVSGAGMLMLAFVFQAL 74

Query: 65  ANRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKG 124
           ANR+P+LD G+YAYA+ GFG+Y+GFS+AWGYW+++ LGN  +FVL+FS LG+F P+ G+G
Sbjct: 75  ANRRPDLDTGIYAYAREGFGNYIGFSAAWGYWVASVLGNASFFVLIFSGLGHFVPVLGEG 134

Query: 125 DTVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTA 184
           +T AA+  +S+LLW +H LVLRG++ AA +N + TVAK++P+ LF+++   AF++D+F A
Sbjct: 135 NTPAAVAASSLLLWTVHLLVLRGLRTAAIVNGLVTVAKLLPIALFLILAAGAFRMDVFRA 194

Query: 185 DIWGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLL 244
           D  G   P LG +  Q+R MMLVTVWVFIGIEGASI+S RA +R+DVG+ATVIGF+ V L
Sbjct: 195 DFLG--TPALGDLGQQLRGMMLVTVWVFIGIEGASIYSRRAARRADVGRATVIGFLGVWL 252

Query: 245 LLVLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLL 304
           LLVLV++LSMGV++Q ELA L NPSMA VL  +VG WGA +I +G ++S+LGALL+WVLL
Sbjct: 253 LLVLVSLLSMGVLSQAELAGLPNPSMAYVLRAIVGEWGATVIIIGSIVSVLGALLAWVLL 312

Query: 305 CAEIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTK 364
           CAE+++AAA D TMP FL RENA  VPANALWL+N  +Q+FL++V  +SG       YT 
Sbjct: 313 CAEVLYAAAGDGTMPAFLGRENARGVPANALWLSNGLIQLFLLMVLVSSGS------YTG 366

Query: 365 MLLLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYAGGL 424
           ++LLA SM L+PYF S A+G+ L  +G+ Y  +   R +D  +A +A AYA+WL+YAGGL
Sbjct: 367 LVLLAASMSLVPYFLSTAFGVQLAWRGQAYAGEPGVRWRDFGVALLASAYALWLVYAGGL 426

Query: 425 KYLLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
             LLLS LLY PG +LFA  + + G+ +FT  E ++F A++  A+        G L L
Sbjct: 427 DNLLLSVLLYVPGVVLFALTRRQRGERVFTRWEWVLFGAILAVAIATLVAFCRGELAL 484


>TR:A1T4X6_MYCVP A1T4X6 Arginine:ornithine antiporter, APA family (Precursor)
           OS=Mycobacterium vanbaalenii (strain DSM 7251 / PYR-1)
           GN=Mvan_1392 PE=4 SV=1
          Length = 496

 Score =  537 bits (1384), Expect = 0.0
 Identities = 272/478 (56%), Positives = 351/478 (73%), Gaps = 11/478 (2%)

Query: 9   LRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLANRK 68
           L L ALTALVVGSMIG GIF+LP  MA SA  G +LIGW +T VGML LAFVFQTLA RK
Sbjct: 25  LGLAALTALVVGSMIGSGIFALPSQMAGSAAPGPLLIGWVVTGVGMLMLAFVFQTLATRK 84

Query: 69  PELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDTVA 128
           P++DGGVY YA+AGFG+Y+GF+SA+GYW+SAW+GNV Y VLLFSTLGYFFP F  G TV 
Sbjct: 85  PDVDGGVYGYARAGFGNYIGFTSAFGYWMSAWVGNVAYLVLLFSTLGYFFPSFEGGATVP 144

Query: 129 AIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTADIWG 188
           AI+ ASV+LW +H + LRG++ AA +N V T+AKVVP+ +FI +    FK  +FTAD WG
Sbjct: 145 AIIGASVVLWIVHAMTLRGVQTAALVNVVVTIAKVVPIVVFIALAAVGFKAGLFTADFWG 204

Query: 189 KS----NPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLL 244
           ++       LG  M QV+NMMLVTVWVFIGIEGA+++S RA +R+DVG+ATV+GF  VL 
Sbjct: 205 RTTEIDGAPLGDTMTQVKNMMLVTVWVFIGIEGAAVYSQRAARRADVGRATVLGFAAVLA 264

Query: 245 LLVLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLL 304
           LL+LVN+LS G++ Q ELA + +PSMA +LE+ VG WGA  IS+GL+ISLLGAL++WVLL
Sbjct: 265 LLLLVNLLSYGLVAQAELAGIPDPSMAGLLENEVGSWGAAFISIGLIISLLGALIAWVLL 324

Query: 305 CAEIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTK 364
           C EI+   A ++ MP+ L +ENA+  PA ALWLTN+CVQ  L+              YT 
Sbjct: 325 CVEILRLPALENVMPKALAKENAHGSPATALWLTNLCVQALLLWTLANE------STYTN 378

Query: 365 MLLLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYAGGL 424
           ++ LATS+IL+PY WSAAY +LL ++GETYE+    R+KDL++  +A+ YAVWLLYAGG 
Sbjct: 379 LIYLATSLILLPYLWSAAYQVLLAVRGETYES-GHGRTKDLLVGVVALVYAVWLLYAGGW 437

Query: 425 KYLLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           +YLL++A+ Y  G  L+  A+ E G P FT  E ++FA VV+ ++ A   L  G L +
Sbjct: 438 QYLLMAAVFYLVGTALYVWARRESGLPAFTKGELVVFAVVVVTSVAAIALLATGNLAV 495


>TR:C1DD79_LARHH C1DD79 ArcD OS=Laribacter hongkongensis (strain HLHK9) GN=arcD-2
           PE=4 SV=1
          Length = 478

 Score =  534 bits (1375), Expect = 0.0
 Identities = 272/483 (56%), Positives = 350/483 (72%), Gaps = 11/483 (2%)

Query: 2   SQESSQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVF 61
           S  +S KL+LGALTALV+GSMIGGGIFSLPQNMAA A  GA++IGW IT VGMLTLAFVF
Sbjct: 5   SHTTSDKLKLGALTALVIGSMIGGGIFSLPQNMAAGAGAGAIIIGWIITFVGMLTLAFVF 64

Query: 62  QTLANRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYF--FP 119
           Q LA+R+P++ GGVY YA+AGFG Y+GF+SAWGYWISAW+GNV YFV++FS  G F    
Sbjct: 65  QNLASRRPDIKGGVYGYARAGFGPYIGFNSAWGYWISAWIGNVSYFVVMFSAFGSFESLS 124

Query: 120 IFGKGDTVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKL 179
            FG+G+T  AI+CAS+LLW L +L+  G++ AAFINT+TT+AK+VPL +FIL+ ++ F++
Sbjct: 125 FFGEGNTGWAILCASILLWLLTWLIFNGVQSAAFINTLTTIAKLVPLAIFILVVIYGFQV 184

Query: 180 DIFTADIWGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGF 239
             F+ D WG  +P LGS+M QV++ MLVTVWVFIGIEGAS+FS RA+  +DVGKATVIGF
Sbjct: 185 KTFSLDFWG--SPALGSIMEQVKSTMLVTVWVFIGIEGASVFSERAQNMADVGKATVIGF 242

Query: 240 ITVLLLLVLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALL 299
           +  + +LV V+VLS+G+M Q ELA LQNPS A VL+ VVG WG  L+++GL+IS+ GALL
Sbjct: 243 LFTIAILVAVSVLSLGIMPQHELAALQNPSTAGVLKAVVGEWGFALMNIGLIISVAGALL 302

Query: 300 SWVLLCAEIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGM 359
           +W LL AEI+F A KD TMP+F    NA   P  ALW+TN  VQ+FL+   F+S      
Sbjct: 303 AWTLLAAEIVFLAGKDGTMPKFFAHVNAKGAPTYALWVTNGLVQLFLIWTLFSSAG---- 358

Query: 360 DPYTKMLLLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLL 419
             Y  +L LATSMILIPY   + Y  ++T+KG+ Y      + +DL+IA ++  Y +WL+
Sbjct: 359 --YLALLSLATSMILIPYLLCSLYAWMITVKGDAYATGG-SKGRDLLIAVVSTIYGIWLI 415

Query: 420 YAGGLKYLLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGF 479
           YA G KYL LS +LYAPG I +  A+ E  Q  F   E +I   VV+  L A Y L  G 
Sbjct: 416 YAAGPKYLFLSMVLYAPGLIFYIWARREQKQKPFNSAEGIIAIIVVVLGLYALYELVSGR 475

Query: 480 LTL 482
           L+L
Sbjct: 476 LSL 478


>TR:I2KUQ0_BURPE I2KUQ0 Amino acid permease OS=Burkholderia pseudomallei 1258b
           GN=BP1258B_4328 PE=4 SV=1
          Length = 496

 Score =  533 bits (1373), Expect = 0.0
 Identities = 266/476 (55%), Positives = 348/476 (73%), Gaps = 8/476 (1%)

Query: 7   QKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLAN 66
           ++L    LTALV+GSMIG GIFSLPQNMA+ A  GA++IGWAIT VGML LA V+QTLA+
Sbjct: 29  RQLPFALLTALVIGSMIGSGIFSLPQNMASGAGAGAIVIGWAITGVGMLMLALVYQTLAH 88

Query: 67  RKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDT 126
           RKPELD GVYAYA A  GD++GF+SAWGYW+SAW+GNVGY V++F TLGY FP FG G+T
Sbjct: 89  RKPELDNGVYAYAHASAGDFVGFNSAWGYWVSAWIGNVGYLVIVFGTLGYAFPAFGDGNT 148

Query: 127 VAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTADI 186
            AA++ AS++LW +H ++LRG++ AA +N +TT+AK+VPL LF+ +   AF+   FT D 
Sbjct: 149 RAAVIGASIVLWIMHAVILRGVRGAAILNALTTIAKIVPLVLFVALAALAFQPHRFTTDF 208

Query: 187 WGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLLL 246
           WG  N  L  V++QV++ ML+TVWVFIGIEGAS++S+RA+ R DVG+AT++GF+ VLLLL
Sbjct: 209 WG--NVHLAGVLDQVKSTMLITVWVFIGIEGASVYSARAKNRDDVGRATIVGFVVVLLLL 266

Query: 247 VLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLCA 306
           + V++LS+G+++QPELA ++NPSMA VLE  +G  G  +  VGLL+S+ GALL+W LL A
Sbjct: 267 MAVSLLSLGIVSQPELAAMKNPSMAGVLEKAIGRTGVAIAGVGLLVSVGGALLAWTLLAA 326

Query: 307 EIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKML 366
           E MF  AKD  MP FL RENA+ VPANALW TN  VQ+FL+V   ++        Y  ++
Sbjct: 327 EAMFTPAKDGVMPAFLSRENAHGVPANALWATNGLVQLFLLVTLVSNA------TYQALI 380

Query: 367 LLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYAGGLKY 426
            LATSMIL+PY +SA Y L++ +KGE Y      R +D  I  +A  Y  WLLYA G KY
Sbjct: 381 SLATSMILVPYLFSAVYALVIAIKGEGYAPGEAVRVRDATIGAVATVYCCWLLYAAGPKY 440

Query: 427 LLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           LLLSALLYAPGA+L+A AK E G+  F   E  I  A+V  A +A + +  G ++L
Sbjct: 441 LLLSALLYAPGALLYAWAKRERGEQPFKPFEAAILIALVAFASLAGWLVAAGRISL 496


>TR:I2KTK6_BURPE I2KTK6 Amino acid permease OS=Burkholderia pseudomallei 1258a
           GN=BP1258A_3923 PE=4 SV=1
          Length = 496

 Score =  533 bits (1373), Expect = 0.0
 Identities = 266/476 (55%), Positives = 348/476 (73%), Gaps = 8/476 (1%)

Query: 7   QKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLAN 66
           ++L    LTALV+GSMIG GIFSLPQNMA+ A  GA++IGWAIT VGML LA V+QTLA+
Sbjct: 29  RQLPFALLTALVIGSMIGSGIFSLPQNMASGAGAGAIVIGWAITGVGMLMLALVYQTLAH 88

Query: 67  RKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDT 126
           RKPELD GVYAYA A  GD++GF+SAWGYW+SAW+GNVGY V++F TLGY FP FG G+T
Sbjct: 89  RKPELDNGVYAYAHASAGDFVGFNSAWGYWVSAWIGNVGYLVIVFGTLGYAFPAFGDGNT 148

Query: 127 VAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTADI 186
            AA++ AS++LW +H ++LRG++ AA +N +TT+AK+VPL LF+ +   AF+   FT D 
Sbjct: 149 RAAVIGASIVLWIMHAVILRGVRGAAILNALTTIAKIVPLVLFVALAALAFQPHRFTTDF 208

Query: 187 WGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLLL 246
           WG  N  L  V++QV++ ML+TVWVFIGIEGAS++S+RA+ R DVG+AT++GF+ VLLLL
Sbjct: 209 WG--NVHLAGVLDQVKSTMLITVWVFIGIEGASVYSARAKNRDDVGRATIVGFVVVLLLL 266

Query: 247 VLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLCA 306
           + V++LS+G+++QPELA ++NPSMA VLE  +G  G  +  VGLL+S+ GALL+W LL A
Sbjct: 267 MAVSLLSLGIVSQPELAAMKNPSMAGVLEKAIGRTGVAIAGVGLLVSVGGALLAWTLLAA 326

Query: 307 EIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKML 366
           E MF  AKD  MP FL RENA+ VPANALW TN  VQ+FL+V   ++        Y  ++
Sbjct: 327 EAMFTPAKDGVMPAFLSRENAHGVPANALWATNGLVQLFLLVTLVSNA------TYQALI 380

Query: 367 LLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYAGGLKY 426
            LATSMIL+PY +SA Y L++ +KGE Y      R +D  I  +A  Y  WLLYA G KY
Sbjct: 381 SLATSMILVPYLFSAVYALVIAIKGEGYAPGEAVRVRDATIGAVATVYCCWLLYAAGPKY 440

Query: 427 LLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           LLLSALLYAPGA+L+A AK E G+  F   E  I  A+V  A +A + +  G ++L
Sbjct: 441 LLLSALLYAPGALLYAWAKRERGEQPFKPFEAAILIALVAFASLAGWLVAAGRISL 496


>TR:A3P5A8_BURP0 A3P5A8 Transporter, basic amino acid/polyamine antiporter (APA)
           family OS=Burkholderia pseudomallei (strain 1106a)
           GN=BURPS1106A_A1484 PE=4 SV=1
          Length = 496

 Score =  533 bits (1372), Expect = 0.0
 Identities = 266/476 (55%), Positives = 348/476 (73%), Gaps = 8/476 (1%)

Query: 7   QKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLAN 66
           ++L    LTALV+GSMIG GIFSLPQNMA+ A  GA++IGWAIT VGML LA V+QTLA+
Sbjct: 29  RQLPFALLTALVIGSMIGSGIFSLPQNMASGAGAGAIVIGWAITGVGMLMLALVYQTLAH 88

Query: 67  RKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDT 126
           RKPELD GVYAYA A  GD++GF+SAWGYW+SAW+GNVGY V++F TLGY FP FG G+T
Sbjct: 89  RKPELDNGVYAYAHASAGDFVGFNSAWGYWVSAWIGNVGYLVIVFGTLGYAFPAFGDGNT 148

Query: 127 VAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTADI 186
            AA++ AS++LW +H ++LRG++ AA +N +TT+AK+VPL LF+ +   AF+   FT D 
Sbjct: 149 RAAVIGASIVLWIMHAVILRGVRGAAILNALTTIAKIVPLVLFVALAALAFQPHRFTTDF 208

Query: 187 WGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLLL 246
           WG  N  L  V++QV++ ML+TVWVFIGIEGAS++S+RA+ R DVG+AT++GF+ VLLLL
Sbjct: 209 WG--NVHLAGVLDQVKSTMLITVWVFIGIEGASVYSARAKSRDDVGRATIVGFVVVLLLL 266

Query: 247 VLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLCA 306
           + V++LS+G+++QPELA ++NPSMA VLE  +G  G  +  VGLL+S+ GALL+W LL A
Sbjct: 267 MAVSLLSLGIVSQPELAAMKNPSMAGVLEKAIGRTGVAIAGVGLLVSVGGALLAWTLLAA 326

Query: 307 EIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKML 366
           E MF  AKD  MP FL RENA+ VPANALW TN  VQ+FL+V   ++        Y  ++
Sbjct: 327 EAMFTPAKDGVMPAFLSRENAHGVPANALWATNGLVQLFLLVTLVSNA------TYQALI 380

Query: 367 LLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYAGGLKY 426
            LATSMIL+PY +SA Y L++ +KGE Y      R +D  I  +A  Y  WLLYA G KY
Sbjct: 381 SLATSMILVPYLFSAVYALVIAIKGEGYAPGEAVRVRDATIGAVATVYCCWLLYAAGPKY 440

Query: 427 LLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           LLLSALLYAPGA+L+A AK E G+  F   E  I  A+V  A +A + +  G ++L
Sbjct: 441 LLLSALLYAPGALLYAWAKRERGERPFKPFEAAILIALVAFASLAGWLVAAGRISL 496


>TR:I2KYI7_BURPE I2KYI7 Amino acid permease OS=Burkholderia pseudomallei 1026a
           GN=BP1026A_2856 PE=4 SV=1
          Length = 496

 Score =  533 bits (1372), Expect = 0.0
 Identities = 266/476 (55%), Positives = 348/476 (73%), Gaps = 8/476 (1%)

Query: 7   QKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLAN 66
           ++L    LTALV+GSMIG GIFSLPQNMA+ A  GA++IGWAIT VGML LA V+QTLA+
Sbjct: 29  RQLPFALLTALVIGSMIGSGIFSLPQNMASGAGAGAIVIGWAITGVGMLMLALVYQTLAH 88

Query: 67  RKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDT 126
           RKPELD GVYAYA A  GD++GF+SAWGYW+SAW+GNVGY V++F TLGY FP FG G+T
Sbjct: 89  RKPELDNGVYAYAHASAGDFVGFNSAWGYWVSAWIGNVGYLVIVFGTLGYAFPAFGDGNT 148

Query: 127 VAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTADI 186
            AA++ AS++LW +H ++LRG++ AA +N +TT+AK+VPL LF+ +   AF+   FT D 
Sbjct: 149 RAAVIGASIVLWIMHAVILRGVRGAAILNALTTIAKIVPLVLFVALAALAFQPHRFTTDF 208

Query: 187 WGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLLL 246
           WG  N  L  V++QV++ ML+TVWVFIGIEGAS++S+RA+ R DVG+AT++GF+ VLLLL
Sbjct: 209 WG--NVHLAGVLDQVKSTMLITVWVFIGIEGASVYSARAKNRDDVGRATIVGFVVVLLLL 266

Query: 247 VLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLCA 306
           + V++LS+G+++QPELA ++NPSMA VLE  +G  G  +  VGLL+S+ GALL+W LL A
Sbjct: 267 MAVSLLSLGIVSQPELAAMKNPSMAGVLEKAIGRTGVAIAGVGLLVSVGGALLAWTLLAA 326

Query: 307 EIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKML 366
           E MF  AKD  MP FL RENA+ VPANALW TN  VQ+FL+V   ++        Y  ++
Sbjct: 327 EAMFTPAKDGVMPAFLSRENAHGVPANALWATNGLVQLFLLVTLVSNA------TYQALI 380

Query: 367 LLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYAGGLKY 426
            LATSMIL+PY +SA Y L++ +KGE Y      R +D  I  +A  Y  WLLYA G KY
Sbjct: 381 SLATSMILVPYLFSAVYALVIAIKGEGYAPGEAVRVRDATIGAVATVYCCWLLYAAGPKY 440

Query: 427 LLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           LLLSALLYAPGA+L+A AK E G+  F   E  I  A+V  A +A + +  G ++L
Sbjct: 441 LLLSALLYAPGALLYAWAKRERGERPFKPFEAAILIALVAFASLAGWLVAAGRISL 496


>TR:I1WT28_BURPE I1WT28 Amino acid permease OS=Burkholderia pseudomallei 1026b
           GN=BP1026B_II1175 PE=4 SV=1
          Length = 496

 Score =  533 bits (1372), Expect = 0.0
 Identities = 266/476 (55%), Positives = 348/476 (73%), Gaps = 8/476 (1%)

Query: 7   QKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLAN 66
           ++L    LTALV+GSMIG GIFSLPQNMA+ A  GA++IGWAIT VGML LA V+QTLA+
Sbjct: 29  RQLPFALLTALVIGSMIGSGIFSLPQNMASGAGAGAIVIGWAITGVGMLMLALVYQTLAH 88

Query: 67  RKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDT 126
           RKPELD GVYAYA A  GD++GF+SAWGYW+SAW+GNVGY V++F TLGY FP FG G+T
Sbjct: 89  RKPELDNGVYAYAHASAGDFVGFNSAWGYWVSAWIGNVGYLVIVFGTLGYAFPAFGDGNT 148

Query: 127 VAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTADI 186
            AA++ AS++LW +H ++LRG++ AA +N +TT+AK+VPL LF+ +   AF+   FT D 
Sbjct: 149 RAAVIGASIVLWIMHAVILRGVRGAAILNALTTIAKIVPLVLFVALAALAFQPHRFTTDF 208

Query: 187 WGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLLL 246
           WG  N  L  V++QV++ ML+TVWVFIGIEGAS++S+RA+ R DVG+AT++GF+ VLLLL
Sbjct: 209 WG--NVHLAGVLDQVKSTMLITVWVFIGIEGASVYSARAKNRDDVGRATIVGFVVVLLLL 266

Query: 247 VLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLCA 306
           + V++LS+G+++QPELA ++NPSMA VLE  +G  G  +  VGLL+S+ GALL+W LL A
Sbjct: 267 MAVSLLSLGIVSQPELAAMKNPSMAGVLEKAIGRTGVAIAGVGLLVSVGGALLAWTLLAA 326

Query: 307 EIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKML 366
           E MF  AKD  MP FL RENA+ VPANALW TN  VQ+FL+V   ++        Y  ++
Sbjct: 327 EAMFTPAKDGVMPAFLSRENAHGVPANALWATNGLVQLFLLVTLVSNA------TYQALI 380

Query: 367 LLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYAGGLKY 426
            LATSMIL+PY +SA Y L++ +KGE Y      R +D  I  +A  Y  WLLYA G KY
Sbjct: 381 SLATSMILVPYLFSAVYALVIAIKGEGYAPGEAVRVRDATIGAVATVYCCWLLYAAGPKY 440

Query: 427 LLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           LLLSALLYAPGA+L+A AK E G+  F   E  I  A+V  A +A + +  G ++L
Sbjct: 441 LLLSALLYAPGALLYAWAKRERGERPFKPFEAAILIALVAFASLAGWLVAAGRISL 496


>TR:C5ZL87_BURPE C5ZL87 Transporter, basic amino acid/polyamine antiporter (APA)
           family OS=Burkholderia pseudomallei 1106b
           GN=BURPS1106B_0505 PE=4 SV=1
          Length = 496

 Score =  533 bits (1372), Expect = 0.0
 Identities = 266/476 (55%), Positives = 348/476 (73%), Gaps = 8/476 (1%)

Query: 7   QKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLAN 66
           ++L    LTALV+GSMIG GIFSLPQNMA+ A  GA++IGWAIT VGML LA V+QTLA+
Sbjct: 29  RQLPFALLTALVIGSMIGSGIFSLPQNMASGAGAGAIVIGWAITGVGMLMLALVYQTLAH 88

Query: 67  RKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDT 126
           RKPELD GVYAYA A  GD++GF+SAWGYW+SAW+GNVGY V++F TLGY FP FG G+T
Sbjct: 89  RKPELDNGVYAYAHASAGDFVGFNSAWGYWVSAWIGNVGYLVIVFGTLGYAFPAFGDGNT 148

Query: 127 VAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTADI 186
            AA++ AS++LW +H ++LRG++ AA +N +TT+AK+VPL LF+ +   AF+   FT D 
Sbjct: 149 RAAVIGASIVLWIMHAVILRGVRGAAILNALTTIAKIVPLVLFVALAALAFQPHRFTTDF 208

Query: 187 WGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLLL 246
           WG  N  L  V++QV++ ML+TVWVFIGIEGAS++S+RA+ R DVG+AT++GF+ VLLLL
Sbjct: 209 WG--NVHLAGVLDQVKSTMLITVWVFIGIEGASVYSARAKSRDDVGRATIVGFVVVLLLL 266

Query: 247 VLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLCA 306
           + V++LS+G+++QPELA ++NPSMA VLE  +G  G  +  VGLL+S+ GALL+W LL A
Sbjct: 267 MAVSLLSLGIVSQPELAAMKNPSMAGVLEKAIGRTGVAIAGVGLLVSVGGALLAWTLLAA 326

Query: 307 EIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKML 366
           E MF  AKD  MP FL RENA+ VPANALW TN  VQ+FL+V   ++        Y  ++
Sbjct: 327 EAMFTPAKDGVMPAFLSRENAHGVPANALWATNGLVQLFLLVTLVSNA------TYQALI 380

Query: 367 LLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYAGGLKY 426
            LATSMIL+PY +SA Y L++ +KGE Y      R +D  I  +A  Y  WLLYA G KY
Sbjct: 381 SLATSMILVPYLFSAVYALVIAIKGEGYAPGEAVRVRDATIGAVATVYCCWLLYAAGPKY 440

Query: 427 LLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           LLLSALLYAPGA+L+A AK E G+  F   E  I  A+V  A +A + +  G ++L
Sbjct: 441 LLLSALLYAPGALLYAWAKRERGERPFKPFEAAILIALVAFASLAGWLVAAGRISL 496


>TR:I2MCW7_BURPE I2MCW7 Amino acid permease OS=Burkholderia pseudomallei 354a
           GN=BP354A_4439 PE=4 SV=1
          Length = 496

 Score =  532 bits (1371), Expect = 0.0
 Identities = 267/476 (56%), Positives = 348/476 (73%), Gaps = 8/476 (1%)

Query: 7   QKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLAN 66
           ++L    LTALV+GSMIG GIFSLPQNMA+ A  GA++IGWAIT VGML LA V+QTLA+
Sbjct: 29  RQLPFALLTALVIGSMIGSGIFSLPQNMASGAGAGAIVIGWAITGVGMLMLALVYQTLAH 88

Query: 67  RKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDT 126
           RKPELD GVYAYA A  GD++GF+SAWGYW+SAW+GNVGY V++F TLGY FP FG G+T
Sbjct: 89  RKPELDNGVYAYAHASAGDFVGFNSAWGYWVSAWIGNVGYLVIVFGTLGYAFPAFGDGNT 148

Query: 127 VAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTADI 186
            AA++ AS++LW +H ++LRG++ AA +N +TT+AK+VPL LF+ +   AF+   FT D 
Sbjct: 149 RAAVIGASIVLWIMHAVILRGVRGAAILNALTTIAKIVPLVLFVALAALAFQPHRFTTDF 208

Query: 187 WGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLLL 246
           WG  N  L  V++QV++ ML+TVWVFIGIEGAS++S+RA+ R DVG+AT++GF+ VLLLL
Sbjct: 209 WG--NVHLPGVLDQVKSTMLITVWVFIGIEGASVYSARAKNRDDVGRATIVGFVVVLLLL 266

Query: 247 VLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLCA 306
           + V++LS+GV++QPELA ++NPSMA VLE  +G  G  +  VGLL+S+ GALL+W LL A
Sbjct: 267 MAVSLLSLGVVSQPELAAMKNPSMAGVLEKAIGRTGVAIAGVGLLVSVGGALLAWTLLAA 326

Query: 307 EIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKML 366
           E MF  AKD  MP FL RENA+ VPANALW TN  VQ+FL+V   ++        Y  ++
Sbjct: 327 EAMFTPAKDGVMPAFLSRENAHGVPANALWATNGLVQLFLLVTLVSNA------TYQALI 380

Query: 367 LLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYAGGLKY 426
            LATSMIL+PY +SA Y L++ +KGE Y      R +D  I  +A  Y  WLLYA G KY
Sbjct: 381 SLATSMILVPYLFSAVYALVIAIKGEGYAPGEAVRVRDATIGAVATVYCCWLLYAAGPKY 440

Query: 427 LLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           LLLSALLYAPGA+L+A AK E G+  F   E  I  A+V  A +A + +  G ++L
Sbjct: 441 LLLSALLYAPGALLYAWAKRERGERPFKPFEAAILIALVAFASLAGWLVAAGRISL 496


>TR:I2M122_BURPE I2M122 Amino acid permease OS=Burkholderia pseudomallei 354e
           GN=BP354E_3627 PE=4 SV=1
          Length = 496

 Score =  532 bits (1371), Expect = 0.0
 Identities = 267/476 (56%), Positives = 348/476 (73%), Gaps = 8/476 (1%)

Query: 7   QKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLAN 66
           ++L    LTALV+GSMIG GIFSLPQNMA+ A  GA++IGWAIT VGML LA V+QTLA+
Sbjct: 29  RQLPFALLTALVIGSMIGSGIFSLPQNMASGAGAGAIVIGWAITGVGMLMLALVYQTLAH 88

Query: 67  RKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDT 126
           RKPELD GVYAYA A  GD++GF+SAWGYW+SAW+GNVGY V++F TLGY FP FG G+T
Sbjct: 89  RKPELDNGVYAYAHASAGDFVGFNSAWGYWVSAWIGNVGYLVIVFGTLGYAFPAFGDGNT 148

Query: 127 VAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTADI 186
            AA++ AS++LW +H ++LRG++ AA +N +TT+AK+VPL LF+ +   AF+   FT D 
Sbjct: 149 RAAVIGASIVLWIMHAVILRGVRGAAILNALTTIAKIVPLVLFVALAALAFQPHRFTTDF 208

Query: 187 WGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLLL 246
           WG  N  L  V++QV++ ML+TVWVFIGIEGAS++S+RA+ R DVG+AT++GF+ VLLLL
Sbjct: 209 WG--NVHLPGVLDQVKSTMLITVWVFIGIEGASVYSARAKNRDDVGRATIVGFVVVLLLL 266

Query: 247 VLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLCA 306
           + V++LS+GV++QPELA ++NPSMA VLE  +G  G  +  VGLL+S+ GALL+W LL A
Sbjct: 267 MAVSLLSLGVVSQPELAAMKNPSMAGVLEKAIGRTGVAIAGVGLLVSVGGALLAWTLLAA 326

Query: 307 EIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKML 366
           E MF  AKD  MP FL RENA+ VPANALW TN  VQ+FL+V   ++        Y  ++
Sbjct: 327 EAMFTPAKDGVMPAFLSRENAHGVPANALWATNGLVQLFLLVTLVSNA------TYQALI 380

Query: 367 LLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYAGGLKY 426
            LATSMIL+PY +SA Y L++ +KGE Y      R +D  I  +A  Y  WLLYA G KY
Sbjct: 381 SLATSMILVPYLFSAVYALVIAIKGEGYAPGEAVRVRDATIGAVATVYCCWLLYAAGPKY 440

Query: 427 LLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           LLLSALLYAPGA+L+A AK E G+  F   E  I  A+V  A +A + +  G ++L
Sbjct: 441 LLLSALLYAPGALLYAWAKRERGERPFKPFEAAILIALVAFASLAGWLVAAGRISL 496


>TR:Q63L96_BURPS Q63L96 Putative amino acid permease OS=Burkholderia pseudomallei
           (strain K96243) GN=BPSS1112 PE=4 SV=1
          Length = 496

 Score =  532 bits (1370), Expect = 0.0
 Identities = 266/476 (55%), Positives = 348/476 (73%), Gaps = 8/476 (1%)

Query: 7   QKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLAN 66
           ++L    LTALV+GSMIG GIFSLPQNMA+ A  GA++IGWAIT VGML LA V+QTLA+
Sbjct: 29  RQLPFALLTALVIGSMIGSGIFSLPQNMASGAGAGAIVIGWAITGVGMLMLALVYQTLAH 88

Query: 67  RKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDT 126
           RKPELD GVYAYA A  GD++GF+SAWGYW+SAW+GNVGY V++F TLGY FP FG G+T
Sbjct: 89  RKPELDNGVYAYAHASAGDFVGFNSAWGYWVSAWIGNVGYLVIVFGTLGYAFPAFGDGNT 148

Query: 127 VAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTADI 186
            AA++ AS++LW +H ++LRG++ AA +N +TT+AK+VPL LF+ +   AF+   FT D 
Sbjct: 149 RAAVIGASIVLWIMHAVILRGVRGAAILNALTTIAKIVPLVLFVALAALAFQPHRFTTDF 208

Query: 187 WGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLLL 246
           WG  N  L  V++QV++ ML+TVWVFIGIEGAS++S+RA+ R DVG+AT++GF+ VLLLL
Sbjct: 209 WG--NVHLAGVLDQVKSTMLITVWVFIGIEGASVYSARAKNRDDVGRATIVGFVVVLLLL 266

Query: 247 VLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLCA 306
           + V++LS+G+++QPELA ++NPSMA VLE  +G  G  +  VGLL+S+ GALL+W LL A
Sbjct: 267 MAVSLLSLGIVSQPELAAMKNPSMAGVLEKAIGRTGVAIAGVGLLVSVGGALLAWTLLAA 326

Query: 307 EIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKML 366
           E MF  AKD  MP FL RENA+ VPANALW TN  VQ+FL+V   ++        Y  ++
Sbjct: 327 EAMFTPAKDGVMPAFLSRENAHGVPANALWATNGLVQLFLLVTLVSNA------TYQALI 380

Query: 367 LLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYAGGLKY 426
            LATSMIL+PY +SA Y L++ +KGE Y      R +D  I  +A  Y  WLLYA G KY
Sbjct: 381 SLATSMILVPYLFSAVYALVIAIKGEGYAPGEAVRVRDATIGAVATVYCGWLLYAAGPKY 440

Query: 427 LLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           LLLSALLYAPGA+L+A AK E G+  F   E  I  A+V  A +A + +  G ++L
Sbjct: 441 LLLSALLYAPGALLYAWAKRERGERPFKPFEAAILIALVAFASLAGWLVAAGRISL 496


>TR:A4MHC5_BURPE A4MHC5 Transporter, basic amino acid/polyamine antiporter (APA)
           family OS=Burkholderia pseudomallei 305 GN=BURPS305_0890
           PE=4 SV=1
          Length = 496

 Score =  532 bits (1370), Expect = 0.0
 Identities = 266/476 (55%), Positives = 348/476 (73%), Gaps = 8/476 (1%)

Query: 7   QKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLAN 66
           ++L    LTALV+GSMIG GIFSLPQNMA+ A  GA++IGWAIT VGML LA V+QTLA+
Sbjct: 29  RQLPFALLTALVIGSMIGSGIFSLPQNMASGAGAGAIVIGWAITGVGMLMLALVYQTLAH 88

Query: 67  RKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDT 126
           RKPELD GVYAYA A  GD++GF+SAWGYW+SAW+GNVGY V++F TLGY FP FG G+T
Sbjct: 89  RKPELDNGVYAYAHASAGDFVGFNSAWGYWVSAWIGNVGYLVIVFGTLGYAFPAFGDGNT 148

Query: 127 VAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTADI 186
            AA++ AS++LW +H ++LRG++ AA +N +TT+AK+VPL LF+ +   AF+   FT D 
Sbjct: 149 RAAVIGASIVLWIMHAVILRGVRGAAILNALTTIAKIVPLVLFVALAALAFQPHRFTTDF 208

Query: 187 WGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLLL 246
           WG  N  L  V++QV++ ML+TVWVFIGIEGAS++S+RA+ R DVG+AT++GF+ VLLLL
Sbjct: 209 WG--NVHLAGVLDQVKSTMLITVWVFIGIEGASVYSARAKNRDDVGRATIVGFVVVLLLL 266

Query: 247 VLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLCA 306
           + V++LS+G+++QPELA ++NPSMA VLE  +G  G  +  VGLL+S+ GALL+W LL A
Sbjct: 267 MAVSLLSLGIVSQPELAAMKNPSMAGVLEKAIGRTGVAIAGVGLLVSVGGALLAWTLLAA 326

Query: 307 EIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKML 366
           E MF  AKD  MP FL RENA+ VPANALW TN  VQ+FL+V   ++        Y  ++
Sbjct: 327 EAMFTPAKDGVMPAFLSRENAHGVPANALWATNGLVQLFLLVTLVSNA------TYQALI 380

Query: 367 LLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYAGGLKY 426
            LATSMIL+PY +SA Y L++ +KGE Y      R +D  I  +A  Y  WLLYA G KY
Sbjct: 381 SLATSMILVPYLFSAVYALVIAIKGEGYAPGEAVRVRDATIGAVATVYCGWLLYAAGPKY 440

Query: 427 LLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           LLLSALLYAPGA+L+A AK E G+  F   E  I  A+V  A +A + +  G ++L
Sbjct: 441 LLLSALLYAPGALLYAWAKRERGERPFKPFEAAILIALVAFASLAGWLVAAGRISL 496


>TR:B7CER4_BURPE B7CER4 Transporter, basic amino acid/polyamine antiporter (APA)
           family OS=Burkholderia pseudomallei 576 GN=BUC_5723 PE=4
           SV=1
          Length = 496

 Score =  531 bits (1368), Expect = 0.0
 Identities = 266/476 (55%), Positives = 348/476 (73%), Gaps = 8/476 (1%)

Query: 7   QKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLAN 66
           ++L    LTALV+GSMIG GIFSLPQNMA+ A  GA++IGWAIT VGML LA V+QTLA+
Sbjct: 29  RQLPFALLTALVIGSMIGSGIFSLPQNMASGAGAGAIVIGWAITGVGMLMLALVYQTLAH 88

Query: 67  RKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDT 126
           RKPELD GVYAYA A  GD++GF+SAWGYW+SAW+GNVGY V++F TLGY FP FG G+T
Sbjct: 89  RKPELDNGVYAYAHASAGDFVGFNSAWGYWVSAWIGNVGYLVIVFGTLGYAFPAFGDGNT 148

Query: 127 VAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTADI 186
            AA++ AS++LW +H ++LRG++ AA +N +TT+AK+VPL LF+ +   AF+   FT D 
Sbjct: 149 RAAVIGASIVLWIMHAVILRGVRGAAILNALTTIAKIVPLVLFVALAALAFQPHRFTTDF 208

Query: 187 WGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLLL 246
           WG  N  L  V++QV++ ML+TVWVFIGIEGAS++S+RA+ R DVG+AT++GF+ VLLLL
Sbjct: 209 WG--NVHLPGVLDQVKSTMLITVWVFIGIEGASVYSARAKNRDDVGRATIVGFVVVLLLL 266

Query: 247 VLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLCA 306
           + V++LS+G+++QPELA ++NPSMA VLE  +G  G  +  VGLL+S+ GALL+W LL A
Sbjct: 267 MAVSLLSLGIVSQPELAAMKNPSMAGVLEKAIGRTGVAIAGVGLLVSVGGALLAWTLLAA 326

Query: 307 EIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKML 366
           E MF  AKD  MP FL RENA+ VPANALW TN  VQ+FL+V   ++        Y  ++
Sbjct: 327 EAMFTPAKDGVMPAFLSRENAHGVPANALWATNGLVQLFLLVTLVSNA------TYQALI 380

Query: 367 LLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYAGGLKY 426
            LATSMIL+PY +SA Y L++ +KGE Y      R +D  I  +A  Y  WLLYA G KY
Sbjct: 381 SLATSMILVPYLFSAVYALVIAIKGEGYAPGEAVRVRDATIGAVATVYCGWLLYAAGPKY 440

Query: 427 LLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           LLLSALLYAPGA+L+A AK E G+  F   E  I  A+V  A +A + +  G ++L
Sbjct: 441 LLLSALLYAPGALLYAWAKRERGERPFKPFEAAILIALVAFASLAGWLVAAGRISL 496


>TR:C0YAY2_BURPE C0YAY2 Transporter, basic amino acid/polyamine antiporter (APA)
           family OS=Burkholderia pseudomallei Pakistan 9
           GN=BUH_5808 PE=4 SV=1
          Length = 496

 Score =  531 bits (1367), Expect = 0.0
 Identities = 264/476 (55%), Positives = 347/476 (72%), Gaps = 8/476 (1%)

Query: 7   QKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLAN 66
           ++L    LTALV+GSMIG GIFSLPQNMA+ A  GA++IGWAIT VGML LA V+QTLA+
Sbjct: 29  RQLPFALLTALVIGSMIGSGIFSLPQNMASGAGAGAIVIGWAITGVGMLMLALVYQTLAH 88

Query: 67  RKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDT 126
           RKPELD G+YAYA A  GD++GF+SAWGYW+SAW+GNVGY V++F TLGY FP FG G+T
Sbjct: 89  RKPELDNGIYAYAHASAGDFVGFNSAWGYWVSAWIGNVGYLVIVFGTLGYAFPAFGDGNT 148

Query: 127 VAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTADI 186
            AA++ AS++LW +H ++LRG++ AA +N +TT+AK+VPL LF+ +   AF+   FT D 
Sbjct: 149 RAAVIGASIVLWIMHAVILRGVRGAAILNALTTIAKIVPLVLFVALAALAFQPHRFTTDF 208

Query: 187 WGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLLL 246
           WG  N  L  V++QV++ ML+TVWVFIGIEGAS++S+RA+ R DVG+AT++GF+ VLLLL
Sbjct: 209 WG--NVHLAGVLDQVKSTMLITVWVFIGIEGASVYSARAKNRDDVGRATIVGFVVVLLLL 266

Query: 247 VLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLCA 306
           + V++LS+G+++QPELA ++NPSMA VLE  +G  G  +  VGLL+S+ GALL+W LL  
Sbjct: 267 MAVSLLSLGIVSQPELAAMKNPSMAGVLEKAIGRTGVAIAGVGLLVSVGGALLAWTLLAV 326

Query: 307 EIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKML 366
           E MF  AKD  MP FL RENA+ VPANALW TN  VQ+FL+V   ++        Y  ++
Sbjct: 327 EAMFTPAKDGVMPAFLSRENAHGVPANALWATNGLVQLFLLVTLVSNA------TYQALI 380

Query: 367 LLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYAGGLKY 426
            LATSMIL+PY +SA Y L++ +KGE Y      R +D  I  +A  Y  WLLYA G KY
Sbjct: 381 SLATSMILVPYLFSAVYALVIAIKGEGYAPGEAVRVRDATIGAVATVYCCWLLYAAGPKY 440

Query: 427 LLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           LLLSALLYAPGA+L+A AK E G+  F   E  I  A+V  A +A + +  G ++L
Sbjct: 441 LLLSALLYAPGALLYAWAKRERGERPFKPFEAAILIALVAFASLAGWLVAAGRISL 496


>TR:F2KFR4_PSEBN F2KFR4 Arginine/ornithine antiporter OS=Pseudomonas brassicacearum
           (strain NFM421) GN=PSEBR_a2530 PE=4 SV=1
          Length = 497

 Score =  531 bits (1367), Expect = 0.0
 Identities = 266/476 (55%), Positives = 352/476 (73%), Gaps = 8/476 (1%)

Query: 7   QKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLAN 66
           ++L L  L ALVVGSMIG GIFSLPQNMAASA  GA+LIGW IT VGML+LA V+QTL+N
Sbjct: 30  RRLSLSLLIALVVGSMIGSGIFSLPQNMAASAGAGAILIGWLITGVGMLSLALVYQTLSN 89

Query: 67  RKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDT 126
           R+PELD GV+AYA+A  G+++GF+SAWGYWISAW+GNV Y V+LF+ L YFFP+FG+G+ 
Sbjct: 90  RQPELDNGVFAYARALGGEFLGFNSAWGYWISAWIGNVSYLVILFAALSYFFPVFGEGNN 149

Query: 127 VAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTADI 186
            AAI+ ASV+LWALH+++LRG++ AA  N +TT+AKVVPL LFI + + AF  D F  D 
Sbjct: 150 KAAILGASVVLWALHWMILRGMRTAAKANALTTIAKVVPLLLFIGLVIAAFSKDTFMVDF 209

Query: 187 WGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLLL 246
           WG   P LGS ++QV++ MLVTVWVFIGIEGA++FS+RA +R+DVG+ATVIGF+  LLLL
Sbjct: 210 WGA--PALGSTLDQVKSTMLVTVWVFIGIEGANVFSARAAERADVGRATVIGFVLTLLLL 267

Query: 247 VLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLCA 306
           + V++LS+GV+ QPELA L+NPSMA VLE V G WGAVLIS+GL++S+ GALL+W LL A
Sbjct: 268 IAVSLLSLGVLRQPELAALKNPSMAGVLEAVAGPWGAVLISIGLIVSVGGALLAWTLLAA 327

Query: 307 EIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKML 366
           E +F  AK+  MP  L  EN +  PANALW+TN C+Q+FL++  ++S        Y  ++
Sbjct: 328 ESVFTPAKEKVMPRLLATENQHGAPANALWITNGCIQLFLLLTLYSSAS------YLALI 381

Query: 367 LLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYAGGLKY 426
            LATSMIL+PY +S  Y L +T +G+TY      + +D+ IA +A  Y VWLLYA G +Y
Sbjct: 382 SLATSMILLPYLFSGLYALKMTWQGQTYAGHRGLQLRDMAIAVVATGYCVWLLYAAGPRY 441

Query: 427 LLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           +LLSALLYAPG++++  A+       F G    +   +   A+ A + L+ G L+L
Sbjct: 442 MLLSALLYAPGSLIYLSAQRARTGRAFNGFGWGLLLVIWAAAIFAGWMLWSGQLSL 497


>TR:Q988H8_RHILO Q988H8 Arginine/ornithine antiporter OS=Rhizobium loti (strain
           MAFF303099) GN=mlr6736 PE=4 SV=1
          Length = 476

 Score =  529 bits (1363), Expect = 0.0
 Identities = 262/483 (54%), Positives = 346/483 (71%), Gaps = 8/483 (1%)

Query: 1   MSQESSQKLRLGALTALVVGSMIGGGIFSLPQNM-AASADVGAVLIGWAITAVGMLTLAF 59
           M+ ++SQKL L ALTA+VVGSMIG GIF+LP+   AA+  +GAV I W I   GM TLA 
Sbjct: 1   MASQTSQKLSLAALTAMVVGSMIGAGIFALPRTFGAATGPIGAV-IAWCIAGTGMYTLAL 59

Query: 60  VFQTLANRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFP 119
           VFQ LA RKPELD G+++YAKAGFGDY GF SA+GYW+ A + +V Y+VL+ STLG FFP
Sbjct: 60  VFQALAARKPELDAGIFSYAKAGFGDYAGFLSAFGYWLVACIADVSYWVLIKSTLGAFFP 119

Query: 120 IFGKGDTVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKL 179
           +FG GDTV A+V +S+ LW  HF +LRGI+EAAFINTV TVAKV+P+ +FILI       
Sbjct: 120 VFGNGDTVPAVVVSSIALWLFHFTILRGIREAAFINTVVTVAKVIPILVFILILAGTSNA 179

Query: 180 DIFTADIWGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGF 239
           +IF  ++WG        +  Q+R  MLVT++VFIGIEGAS++S  A+ R+DVG+AT++GF
Sbjct: 180 NIFVTNLWGGELAARSGLFEQIRATMLVTIFVFIGIEGASVYSRYAKDRADVGRATILGF 239

Query: 240 ITVLLLLVLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALL 299
           I VL LLVLV +L   V+ Q E+A L+ PSMA VLE VVGHWGAV +SVGL++SLLGA L
Sbjct: 240 IGVLFLLVLVTLLPYAVLPQAEIAGLRQPSMAAVLEAVVGHWGAVFVSVGLIVSLLGAYL 299

Query: 300 SWVLLCAEIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGM 359
           +W L+C E++FAAAK   MP    REN N VPA ALWLTN+ +Q FL+   F+       
Sbjct: 300 AWSLICVEVLFAAAKSGDMPRIFARENRNNVPAAALWLTNVIIQAFLISTLFS------Q 353

Query: 360 DPYTKMLLLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLL 419
           D +  M+ L+++M+LIPY   A YG LL L+ ETY+ +  +RS+DL++AGIA  Y  +++
Sbjct: 354 DAFALMVKLSSAMVLIPYLLVAGYGFLLALRRETYDAEPAQRSRDLIVAGIATLYVAFMI 413

Query: 420 YAGGLKYLLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGF 479
           YAGGLK+LLLS++LYAPG +L+ + + E   P+  G+E ++ AA  IG LV  YG+  G 
Sbjct: 414 YAGGLKFLLLSSILYAPGTLLYVQVRREQNMPVLVGVEWIVLAAAAIGCLVGIYGIASGD 473

Query: 480 LTL 482
           + L
Sbjct: 474 IVL 476


>TR:C7LPM9_DESBD C7LPM9 Arginine/ornithine antiporter OS=Desulfomicrobium baculatum
           (strain DSM 4028 / VKM B-1378) GN=Dbac_2174 PE=4 SV=1
          Length = 492

 Score =  526 bits (1356), Expect = 0.0
 Identities = 265/480 (55%), Positives = 351/480 (73%), Gaps = 10/480 (2%)

Query: 5   SSQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTL 64
           + + L +  L ALVVGS IG GIF LPQNMAA A  GA+LIGWA+T VGML LA V+Q L
Sbjct: 21  AKESLGVALLVALVVGSTIGSGIFGLPQNMAAGAGAGAILIGWAVTGVGMLMLALVYQRL 80

Query: 65  ANRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKG 124
           A RKPELD GVYAYA+A  G+Y+GF+SAWGYWISAW+GNVGY V  F  LGYF+P FG G
Sbjct: 81  AIRKPELDNGVYAYARALSGEYVGFNSAWGYWISAWIGNVGYLVAAFGALGYFYPAFGAG 140

Query: 125 DTVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTA 184
           +T+++I+ ASV++W +H LVLRGI+ AA +N   T+AK+VPL LFI++   AF++D F+ 
Sbjct: 141 NTLSSIIGASVVVWVVHVLVLRGIQGAAVLNAAVTLAKIVPLVLFIILVAMAFQVDTFSF 200

Query: 185 DIWGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLL 244
           + WG  +P LGSV++QV++ MLVTVWVFIGIEGAS++S+RA +R+DVG+ATVIGF+  L+
Sbjct: 201 NFWG--DPGLGSVLDQVKSTMLVTVWVFIGIEGASVYSARARQRADVGRATVIGFLITLM 258

Query: 245 LLVLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLL 304
           LL+ V++LS+G+  QPELA L+NPSMA VLE  VG WGA+LI +GL++S+ G  L+W LL
Sbjct: 259 LLMSVSLLSLGIFAQPELAALKNPSMAGVLEKAVGTWGAILIYIGLIVSVGGGFLAWTLL 318

Query: 305 CAEIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTK 364
            AE +F  A D  MP +L R+N   VPANALWLT+  VQ+FL++  F+         Y  
Sbjct: 319 AAESLFTPAGDGVMPTWLARQNHKGVPANALWLTSSMVQIFLLLTLFSKAS------YLA 372

Query: 365 MLLLATSMILIPYFWSAAYGLLLTLKGETYE--NDARERSKDLVIAGIAVAYAVWLLYAG 422
           ++ L+T+MIL+PY +SA YGL LT + + +    +AR    D+ +A +A  Y +WLLYA 
Sbjct: 373 LISLSTAMILVPYLFSAVYGLSLTWRDKVHHGAGNARLNRLDIPVATLATIYCLWLLYAA 432

Query: 423 GLKYLLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           GLKYLLLSALLYAPGA+L+  AK + G+  FT  E+ I  A+++ AL + Y L  G L L
Sbjct: 433 GLKYLLLSALLYAPGAVLYLVAKRQRGERAFTARERFILGALIVLALASTYLLATGRLGL 492


>TR:C4I394_BURPE C4I394 Transporter, basic amino acid/polyamine antiporter
           OS=Burkholderia pseudomallei MSHR346 GN=GBP346_B0816
           PE=4 SV=1
          Length = 669

 Score =  533 bits (1372), Expect = 0.0
 Identities = 266/476 (55%), Positives = 348/476 (73%), Gaps = 8/476 (1%)

Query: 7   QKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLAN 66
           ++L    LTALV+GSMIG GIFSLPQNMA+ A  GA++IGWAIT VGML LA V+QTLA+
Sbjct: 202 RQLPFALLTALVIGSMIGSGIFSLPQNMASGAGAGAIVIGWAITGVGMLMLALVYQTLAH 261

Query: 67  RKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDT 126
           RKPELD GVYAYA A  GD++GF+SAWGYW+SAW+GNVGY V++F TLGY FP FG G+T
Sbjct: 262 RKPELDNGVYAYAHASAGDFVGFNSAWGYWVSAWIGNVGYLVIVFGTLGYAFPAFGDGNT 321

Query: 127 VAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTADI 186
            AA++ AS++LW +H ++LRG++ AA +N +TT+AK+VPL LF+ +   AF+   FT D 
Sbjct: 322 RAAVIGASIVLWIMHAVILRGVRGAAILNALTTIAKIVPLVLFVALAALAFQPHRFTTDF 381

Query: 187 WGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLLL 246
           WG  N  L  V++QV++ ML+TVWVFIGIEGAS++S+RA+ R DVG+AT++GF+ VLLLL
Sbjct: 382 WG--NVHLPGVLDQVKSTMLITVWVFIGIEGASVYSARAKNRDDVGRATIVGFVVVLLLL 439

Query: 247 VLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLCA 306
           + V++LS+G+++QPELA ++NPSMA VLE  +G  G  +  VGLL+S+ GALL+W LL A
Sbjct: 440 MAVSLLSLGIVSQPELAAMKNPSMASVLEKAIGRTGVAIAGVGLLVSVGGALLAWTLLAA 499

Query: 307 EIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKML 366
           E MF  AKD  MP FL RENA+ VPANALW TN  VQ+FL+V   ++        Y  ++
Sbjct: 500 EAMFTPAKDGVMPAFLSRENAHGVPANALWATNGLVQLFLLVTLVSNA------TYQALI 553

Query: 367 LLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYAGGLKY 426
            LATSMIL+PY +SA Y L++ +KGE Y      R +D  I  +A  Y  WLLYA G KY
Sbjct: 554 SLATSMILVPYLFSAVYALVIAIKGEGYAPGEAVRVRDATIGAVATVYCCWLLYAAGPKY 613

Query: 427 LLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           LLLSALLYAPGA+L+A AK E G+  F   E  I  A+V  A +A + +  G ++L
Sbjct: 614 LLLSALLYAPGALLYAWAKRERGERPFKPFEAAILIALVAFASLAGWLVAAGRISL 669


>TR:B1H6U3_BURPE B1H6U3 Transporter, basic amino acid/polyamine antiporter (APA)
           family OS=Burkholderia pseudomallei S13
           GN=BURPSS13_K0045 PE=4 SV=1
          Length = 671

 Score =  533 bits (1372), Expect = 0.0
 Identities = 266/476 (55%), Positives = 348/476 (73%), Gaps = 8/476 (1%)

Query: 7   QKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLAN 66
           ++L    LTALV+GSMIG GIFSLPQNMA+ A  GA++IGWAIT VGML LA V+QTLA+
Sbjct: 204 RQLPFALLTALVIGSMIGSGIFSLPQNMASGAGAGAIVIGWAITGVGMLMLALVYQTLAH 263

Query: 67  RKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDT 126
           RKPELD GVYAYA A  GD++GF+SAWGYW+SAW+GNVGY V++F TLGY FP FG G+T
Sbjct: 264 RKPELDNGVYAYAHASAGDFVGFNSAWGYWVSAWIGNVGYLVIVFGTLGYAFPAFGDGNT 323

Query: 127 VAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTADI 186
            AA++ AS++LW +H ++LRG++ AA +N +TT+AK+VPL LF+ +   AF+   FT D 
Sbjct: 324 RAAVIGASIVLWIMHAVILRGVRGAAILNALTTIAKIVPLVLFVALAALAFQPHRFTTDF 383

Query: 187 WGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLLL 246
           WG  N  L  V++QV++ ML+TVWVFIGIEGAS++S+RA+ R DVG+AT++GF+ VLLLL
Sbjct: 384 WG--NVHLAGVLDQVKSTMLITVWVFIGIEGASVYSARAKNRDDVGRATIVGFVVVLLLL 441

Query: 247 VLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLCA 306
           + V++LS+G+++QPELA ++NPSMA VLE  +G  G  +  VGLL+S+ GALL+W LL A
Sbjct: 442 MAVSLLSLGIVSQPELAAMKNPSMAGVLEKAIGRTGVAIAGVGLLVSVGGALLAWTLLAA 501

Query: 307 EIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKML 366
           E MF  AKD  MP FL RENA+ VPANALW TN  VQ+FL+V   ++        Y  ++
Sbjct: 502 EAMFTPAKDGVMPAFLSRENAHGVPANALWATNGLVQLFLLVTLVSNA------TYQALI 555

Query: 367 LLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYAGGLKY 426
            LATSMIL+PY +SA Y L++ +KGE Y      R +D  I  +A  Y  WLLYA G KY
Sbjct: 556 SLATSMILVPYLFSAVYALVIAIKGEGYAPGEAVRVRDATIGAVATVYCCWLLYAAGPKY 615

Query: 427 LLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           LLLSALLYAPGA+L+A AK E G+  F   E  I  A+V  A +A + +  G ++L
Sbjct: 616 LLLSALLYAPGALLYAWAKRERGERPFKPFEAAILIALVAFASLAGWLVAAGRISL 671


>TR:A8ELQ4_BURPE A8ELQ4 Transporter, basic amino acid/polyamine antiporter (APA)
           family OS=Burkholderia pseudomallei 406e
           GN=BURPS406E_G0630 PE=4 SV=1
          Length = 671

 Score =  533 bits (1372), Expect = 0.0
 Identities = 266/476 (55%), Positives = 348/476 (73%), Gaps = 8/476 (1%)

Query: 7   QKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLAN 66
           ++L    LTALV+GSMIG GIFSLPQNMA+ A  GA++IGWAIT VGML LA V+QTLA+
Sbjct: 204 RQLPFALLTALVIGSMIGSGIFSLPQNMASGAGAGAIVIGWAITGVGMLMLALVYQTLAH 263

Query: 67  RKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDT 126
           RKPELD GVYAYA A  GD++GF+SAWGYW+SAW+GNVGY V++F TLGY FP FG G+T
Sbjct: 264 RKPELDNGVYAYAHASAGDFVGFNSAWGYWVSAWIGNVGYLVIVFGTLGYAFPAFGDGNT 323

Query: 127 VAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTADI 186
            AA++ AS++LW +H ++LRG++ AA +N +TT+AK+VPL LF+ +   AF+   FT D 
Sbjct: 324 RAAVIGASIVLWIMHAVILRGVRGAAILNALTTIAKIVPLVLFVALAALAFQPHRFTTDF 383

Query: 187 WGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLLL 246
           WG  N  L  V++QV++ ML+TVWVFIGIEGAS++S+RA+ R DVG+AT++GF+ VLLLL
Sbjct: 384 WG--NVHLAGVLDQVKSTMLITVWVFIGIEGASVYSARAKNRDDVGRATIVGFVVVLLLL 441

Query: 247 VLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLCA 306
           + V++LS+G+++QPELA ++NPSMA VLE  +G  G  +  VGLL+S+ GALL+W LL A
Sbjct: 442 MAVSLLSLGIVSQPELAAMKNPSMAGVLEKAIGRTGVAIAGVGLLVSVGGALLAWTLLAA 501

Query: 307 EIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKML 366
           E MF  AKD  MP FL RENA+ VPANALW TN  VQ+FL+V   ++        Y  ++
Sbjct: 502 EAMFTPAKDGVMPAFLSRENAHGVPANALWATNGLVQLFLLVTLVSNA------TYQALI 555

Query: 367 LLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYAGGLKY 426
            LATSMIL+PY +SA Y L++ +KGE Y      R +D  I  +A  Y  WLLYA G KY
Sbjct: 556 SLATSMILVPYLFSAVYALVIAIKGEGYAPGEAVRVRDATIGAVATVYCCWLLYAAGPKY 615

Query: 427 LLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           LLLSALLYAPGA+L+A AK E G+  F   E  I  A+V  A +A + +  G ++L
Sbjct: 616 LLLSALLYAPGALLYAWAKRERGERPFKPFEAAILIALVAFASLAGWLVAAGRISL 671


>TR:Q01UC7_SOLUE Q01UC7 Arginine/ornithine antiporter (Precursor) OS=Solibacter
           usitatus (strain Ellin6076) GN=Acid_5796 PE=4 SV=1
          Length = 476

 Score =  525 bits (1352), Expect = 0.0
 Identities = 263/482 (54%), Positives = 345/482 (71%), Gaps = 6/482 (1%)

Query: 1   MSQESSQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFV 60
           M+  ++QK  L  LTA+VVGSM+G GIFSLPQ       V   L+ W I  VGML LA V
Sbjct: 1   MTTSATQKFSLPVLTAMVVGSMVGAGIFSLPQTFGRVTGVYGALVAWIIAGVGMLMLALV 60

Query: 61  FQTLANRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPI 120
           FQTLA RKP+LD GVYAYAKAGFG+Y GF SA GYW  + +GNV YFVL+ STLG FFP+
Sbjct: 61  FQTLAQRKPDLDAGVYAYAKAGFGNYWGFLSALGYWAGSCIGNVSYFVLIKSTLGAFFPV 120

Query: 121 FGKGDTVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLD 180
           FG G+T+ A++ +SV+LW  HF++LRGIK+AA +NT+ TVAK++P+ +FI+I  F F  D
Sbjct: 121 FGDGNTIQAVLVSSVILWTFHFMILRGIKQAAVLNTIATVAKLIPILIFIVILAFNFNAD 180

Query: 181 IFTADIWGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFI 240
           IF  ++WG +  +LG + +QVR  MLVTV+VF+GIEGAS++S  A+KRSDVG ATV+GF+
Sbjct: 181 IFRDNLWGGAGAELGGLFSQVRGTMLVTVFVFLGIEGASVYSRYAKKRSDVGVATVMGFL 240

Query: 241 TVLLLLVLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLS 300
            VL +LVLV +LS GV+ + +LA L+NPSMA VLE VVG WGA+ +S GL+IS+LGA LS
Sbjct: 241 GVLCILVLVTMLSYGVLPRADLAGLRNPSMAGVLESVVGRWGAIFVSAGLIISVLGAYLS 300

Query: 301 WVLLCAEIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMD 360
           W LLCAE++F+AA++ TMP  L  +NAN VP+ ALWLTN  VQ+FL++  F         
Sbjct: 301 WTLLCAEVLFSAAENETMPTMLAHQNANSVPSAALWLTNSVVQLFLILTLF------AQY 354

Query: 361 PYTKMLLLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLY 420
            +T  L L +SM LIP+F  AAY + L  KGETYE +   R +DL +A +A+ Y  WLL 
Sbjct: 355 AFTLALELTSSMTLIPFFLVAAYAVQLAWKGETYEAEPDRRRRDLTLASLALFYTAWLLL 414

Query: 421 AGGLKYLLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFL 480
           A GLK+LLLSA++Y PG +LF  A+ E    +FT  E++ FAA VI A+VA   L  G +
Sbjct: 415 AAGLKFLLLSAVIYGPGTVLFFLARREQNTYVFTPRERIAFAAAVIAAIVAIIKLASGSI 474

Query: 481 TL 482
           ++
Sbjct: 475 SI 476


>TR:Q3JMH2_BURP1 Q3JMH2 Amino acid permease OS=Burkholderia pseudomallei (strain
           1710b) GN=arcD PE=4 SV=1
          Length = 671

 Score =  532 bits (1370), Expect = 0.0
 Identities = 266/476 (55%), Positives = 348/476 (73%), Gaps = 8/476 (1%)

Query: 7   QKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLAN 66
           ++L    LTALV+GSMIG GIFSLPQNMA+ A  GA++IGWAIT VGML LA V+QTLA+
Sbjct: 204 RQLPFALLTALVIGSMIGSGIFSLPQNMASGAGAGAIVIGWAITGVGMLMLALVYQTLAH 263

Query: 67  RKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDT 126
           RKPELD GVYAYA A  GD++GF+SAWGYW+SAW+GNVGY V++F TLGY FP FG G+T
Sbjct: 264 RKPELDNGVYAYAHASAGDFVGFNSAWGYWVSAWIGNVGYLVIVFGTLGYAFPAFGDGNT 323

Query: 127 VAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTADI 186
            AA++ AS++LW +H ++LRG++ AA +N +TT+AK+VPL LF+ +   AF+   FT D 
Sbjct: 324 RAAVIGASIVLWIMHAVILRGVRGAAILNALTTIAKIVPLVLFVALAALAFQPHRFTTDF 383

Query: 187 WGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLLL 246
           WG  N  L  V++QV++ ML+TVWVFIGIEGAS++S+RA+ R DVG+AT++GF+ VLLLL
Sbjct: 384 WG--NVHLPGVLDQVKSTMLITVWVFIGIEGASVYSARAKNRDDVGRATIVGFVVVLLLL 441

Query: 247 VLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLCA 306
           + V++LS+G+++QPELA ++NPSMA VLE  +G  G  +  VGLL+S+ GALL+W LL A
Sbjct: 442 MAVSLLSLGIVSQPELAAMKNPSMAGVLEKAIGRTGVAIAGVGLLVSVGGALLAWTLLAA 501

Query: 307 EIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKML 366
           E MF  AKD  MP FL RENA+ VPANALW TN  VQ+FL+V   ++        Y  ++
Sbjct: 502 EAMFTPAKDGVMPAFLSRENAHGVPANALWATNGLVQLFLLVTLVSNA------TYQALI 555

Query: 367 LLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYAGGLKY 426
            LATSMIL+PY +SA Y L++ +KGE Y      R +D  I  +A  Y  WLLYA G KY
Sbjct: 556 SLATSMILVPYLFSAVYALVIAIKGEGYAPGEAVRVRDATIGAVATVYCCWLLYAAGPKY 615

Query: 427 LLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           LLLSALLYAPGA+L+A AK E G+  F   E  I  A+V  A +A + +  G ++L
Sbjct: 616 LLLSALLYAPGALLYAWAKRERGERPFKPFEAAILIALVAFASLAGWLVAAGRISL 671


>TR:C6U355_BURPE C6U355 Transporter, basic amino acid/polyamine antiporter (APA)
           family OS=Burkholderia pseudomallei 1710a
           GN=BURPS1710A_A0644 PE=4 SV=1
          Length = 671

 Score =  532 bits (1370), Expect = 0.0
 Identities = 266/476 (55%), Positives = 348/476 (73%), Gaps = 8/476 (1%)

Query: 7   QKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLAN 66
           ++L    LTALV+GSMIG GIFSLPQNMA+ A  GA++IGWAIT VGML LA V+QTLA+
Sbjct: 204 RQLPFALLTALVIGSMIGSGIFSLPQNMASGAGAGAIVIGWAITGVGMLMLALVYQTLAH 263

Query: 67  RKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDT 126
           RKPELD GVYAYA A  GD++GF+SAWGYW+SAW+GNVGY V++F TLGY FP FG G+T
Sbjct: 264 RKPELDNGVYAYAHASAGDFVGFNSAWGYWVSAWIGNVGYLVIVFGTLGYAFPAFGDGNT 323

Query: 127 VAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTADI 186
            AA++ AS++LW +H ++LRG++ AA +N +TT+AK+VPL LF+ +   AF+   FT D 
Sbjct: 324 RAAVIGASIVLWIMHAVILRGVRGAAILNALTTIAKIVPLVLFVALAALAFQPHRFTTDF 383

Query: 187 WGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLLL 246
           WG  N  L  V++QV++ ML+TVWVFIGIEGAS++S+RA+ R DVG+AT++GF+ VLLLL
Sbjct: 384 WG--NVHLPGVLDQVKSTMLITVWVFIGIEGASVYSARAKNRDDVGRATIVGFVVVLLLL 441

Query: 247 VLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLCA 306
           + V++LS+G+++QPELA ++NPSMA VLE  +G  G  +  VGLL+S+ GALL+W LL A
Sbjct: 442 MAVSLLSLGIVSQPELAAMKNPSMAGVLEKAIGRTGVAIAGVGLLVSVGGALLAWTLLAA 501

Query: 307 EIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKML 366
           E MF  AKD  MP FL RENA+ VPANALW TN  VQ+FL+V   ++        Y  ++
Sbjct: 502 EAMFTPAKDGVMPAFLSRENAHGVPANALWATNGLVQLFLLVTLVSNA------TYQALI 555

Query: 367 LLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYAGGLKY 426
            LATSMIL+PY +SA Y L++ +KGE Y      R +D  I  +A  Y  WLLYA G KY
Sbjct: 556 SLATSMILVPYLFSAVYALVIAIKGEGYAPGEAVRVRDATIGAVATVYCCWLLYAAGPKY 615

Query: 427 LLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           LLLSALLYAPGA+L+A AK E G+  F   E  I  A+V  A +A + +  G ++L
Sbjct: 616 LLLSALLYAPGALLYAWAKRERGERPFKPFEAAILIALVAFASLAGWLVAAGRISL 671


>TR:A3NJP6_BURP6 A3NJP6 Transporter, basic amino acid/polyamine antiporter (APA)
           family OS=Burkholderia pseudomallei (strain 668)
           GN=BURPS668_A1571 PE=4 SV=1
          Length = 663

 Score =  530 bits (1366), Expect = 0.0
 Identities = 266/476 (55%), Positives = 348/476 (73%), Gaps = 8/476 (1%)

Query: 7   QKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLAN 66
           ++L    LTALV+GSMIG GIFSLPQNMA+ A  GA++IGWAIT VGML LA V+QTLA+
Sbjct: 196 RQLPFTLLTALVIGSMIGSGIFSLPQNMASGAGAGAIVIGWAITGVGMLMLALVYQTLAH 255

Query: 67  RKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDT 126
           RKPELD GVYAYA A  GD++GF+SAWGYW+SAW+GNVGY V++F TLGY FP FG G+T
Sbjct: 256 RKPELDNGVYAYAHASAGDFVGFNSAWGYWVSAWIGNVGYLVIVFGTLGYAFPAFGDGNT 315

Query: 127 VAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTADI 186
            AA++ AS++LW +H ++LRG++ AA +N +TT+AK+VPL LF+ +   AF+   FT D 
Sbjct: 316 RAAVIGASIVLWIMHAVILRGVRGAAILNALTTIAKIVPLVLFVALAALAFQPHRFTTDF 375

Query: 187 WGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLLL 246
           WG  N  L  V++QV++ ML+TVWVFIGIEGAS++S+RA+ R DVG+AT++GF+ VLLLL
Sbjct: 376 WG--NVHLPGVLDQVKSTMLITVWVFIGIEGASVYSARAKNRDDVGRATIVGFVVVLLLL 433

Query: 247 VLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLCA 306
           + V++LS+G+++QPELA ++NPSMA VLE  +G  G  +  VGLL+S+ GALL+W LL A
Sbjct: 434 MAVSLLSLGIVSQPELAAMKNPSMAGVLEKAIGRTGVAIAGVGLLVSVGGALLAWTLLAA 493

Query: 307 EIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKML 366
           E MF  AKD  MP FL RENA+ VPANALW TN  VQ+FL+V   ++        Y  ++
Sbjct: 494 EAMFTPAKDGVMPAFLSRENAHGVPANALWATNGLVQLFLLVTLVSNA------TYQALI 547

Query: 367 LLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYAGGLKY 426
            LATSMIL+PY +SA Y L++ +KGE Y      R +D  I  +A  Y  WLLYA G KY
Sbjct: 548 SLATSMILVPYLFSAVYALVIAIKGEGYAPGEAVRVRDATIGAVATVYCGWLLYAAGPKY 607

Query: 427 LLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           LLLSALLYAPGA+L+A AK E G+  F   E  I  A+V  A +A + +  G ++L
Sbjct: 608 LLLSALLYAPGALLYAWAKRERGERPFKPFEAAILIALVAFASLAGWLVAAGRISL 663


>TR:A9IMZ2_BORPD A9IMZ2 Arginine/ornithine antiporter OS=Bordetella petrii (strain
           ATCC BAA-461 / DSM 12804 / CCUG 43448) GN=arcD1 PE=4
           SV=1
          Length = 475

 Score =  520 bits (1339), Expect = e-180
 Identities = 263/482 (54%), Positives = 347/482 (71%), Gaps = 7/482 (1%)

Query: 1   MSQESSQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFV 60
           M   +++K  L ALT +VVGSMIG GIFSLP+    +  V   +I W I   GM TLA V
Sbjct: 1   MEHSANKKFGLMALTGMVVGSMIGAGIFSLPRTFGGATGVVGAVIAWGIAGGGMYTLARV 60

Query: 61  FQTLANRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPI 120
           FQ+LA RKP+LD GV+AYAKAGFGDY+GF SA+GYWI + +GNV Y+VL+ STLG FFP+
Sbjct: 61  FQSLAERKPDLDAGVFAYAKAGFGDYLGFLSAFGYWIGSCIGNVSYWVLIKSTLGAFFPV 120

Query: 121 FGKGDTVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLD 180
           FG G+TV AI  ASV +W  HFL+LRG+++AAFIN V TVAKV+P+ LFI++ LFAFKLD
Sbjct: 121 FGDGNTVTAIAAASVGIWLFHFLILRGVQQAAFINAVVTVAKVIPILLFIVVLLFAFKLD 180

Query: 181 IFTADIWGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFI 240
           +F +++WG       S+  QVR  MLVTV+VF+GIEGAS++S  A +RS VG AT+IGF+
Sbjct: 181 LFRSNLWGAQGSGGASLFEQVRLTMLVTVFVFLGIEGASVYSRYASRRSHVGVATLIGFV 240

Query: 241 TVLLLLVLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLS 300
             L+L+VLV++L   VM Q ++A L+ PSMA VL  V G WGA+ IS GLLIS+LGA L+
Sbjct: 241 CALVLMVLVSLLPYAVMAQGDIAALRQPSMAGVLSAVAGPWGAIFISAGLLISVLGAYLA 300

Query: 301 WVLLCAEIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMD 360
           W L+CAE++FAA+K+  MP    REN N VPA ALWLTNI VQ+F++  ++++      D
Sbjct: 301 WSLICAEVLFAASKNRDMPRIFARENKNGVPAAALWLTNIIVQLFVISTYWSN------D 354

Query: 361 PYTKMLLLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLY 420
            +  ML L ++M LIPYF  AA+G +L  +GETYE  A  R++DLV+AGIA  Y  +++Y
Sbjct: 355 AFALMLSLTSAMSLIPYFLVAAFGFMLARRGETYEG-AAGRNRDLVLAGIAAFYTAFMIY 413

Query: 421 AGGLKYLLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFL 480
           AGGLK++LLSALLYAPG+ L+  A+ E GQ +FTG E  +F    IG + A  GL  G++
Sbjct: 414 AGGLKFVLLSALLYAPGSALYYWARREQGQRLFTGFELAVFVVAWIGCIAAIIGLVRGWI 473

Query: 481 TL 482
            +
Sbjct: 474 AI 475


>TR:G6Y6L9_9RHIZ G6Y6L9 Arginine/ornithine antiporter OS=Mesorhizobium amorphae
           CCNWGS0123 GN=MEA186_07919 PE=4 SV=1
          Length = 488

 Score =  520 bits (1338), Expect = e-180
 Identities = 254/477 (53%), Positives = 344/477 (72%), Gaps = 7/477 (1%)

Query: 5   SSQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTL 64
           +S KLRLG+LTALV+GSM+G G+FSLPQNMAA A   A+L+GWAITAVGML L FV+Q+L
Sbjct: 17  ASTKLRLGSLTALVIGSMVGSGVFSLPQNMAAGAGPLAILVGWAITAVGMLALVFVYQSL 76

Query: 65  ANRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKG 124
           A RKPELD G YAYAKAGFG ++GF+SAWGYWISAW+GNV Y V++FS L YFFP FG G
Sbjct: 77  ATRKPELDAGPYAYAKAGFGPFIGFNSAWGYWISAWVGNVSYAVIVFSALSYFFPAFGDG 136

Query: 125 DTVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTA 184
           +T  A++ AS+LLW +H L+L GI++AA +N + TVAK+ P+ LFI +   AFKL++++ 
Sbjct: 137 NTWQAVLGASILLWLIHVLILAGIRQAAVVNLIVTVAKIAPIVLFIGVVAVAFKLNVWSL 196

Query: 185 DIWGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLL 244
           D +G  N  LGS+  QV++ MLVT+WVFIGIEGAS+FS RAE+R D+  ATV+GF T L 
Sbjct: 197 DFYGLGNASLGSITAQVKSTMLVTLWVFIGIEGASVFSGRAERRKDIATATVLGFFTCLA 256

Query: 245 LLVLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLL 304
           L  LV++LS+G+++QPELA L+NPSMA VLE VVG WGA+LI++ L++S++GA LSW LL
Sbjct: 257 LYALVSLLSLGILSQPELAALKNPSMAGVLEAVVGPWGAILINIALVVSVVGAFLSWTLL 316

Query: 305 CAEIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTK 364
            AEI   A KD TMP+F  +E+   VPA +L +TN+ VQ FLV+  F          Y  
Sbjct: 317 AAEIPHVAGKDGTMPKFFGQESERGVPATSLLITNLLVQAFLVITLF------AQSTYQA 370

Query: 365 MLLLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYAGGL 424
           +  +A++ IL+PY +S AY   L L GE+Y++   +R+  L    +A  Y +WL+YA G 
Sbjct: 371 LFYIASAAILVPYIFSGAYAAKLALTGESYDS-GEQRAGPLFAGALATVYGLWLVYAAGP 429

Query: 425 KYLLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLT 481
            YL + A+LYAPG I +  A+ E  Q +F  +E  + AA+V  A++A Y ++ G ++
Sbjct: 430 AYLFMCAILYAPGIIFYVWARRETNQRVFHPVEAAVAAALVAVAMLAVYEMWTGAIS 486


>TR:H0F6X2_9BURK H0F6X2 Arginine/ornithine antiporter OS=Achromobacter
           arsenitoxydans SY8 GN=KYC_12913 PE=4 SV=1
          Length = 473

 Score =  513 bits (1322), Expect = e-177
 Identities = 264/482 (54%), Positives = 348/482 (72%), Gaps = 9/482 (1%)

Query: 1   MSQESSQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFV 60
           M   +++KL L ALT +VVGSMIG GIFSLP+    +  V   LI WAI A GM TLA V
Sbjct: 1   MESGTTKKLGLLALTGMVVGSMIGAGIFSLPRTFGGATGVIGALIAWAIAAAGMYTLARV 60

Query: 61  FQTLANRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPI 120
           FQ+LA RKPELD GV+AYAKAGFGDYMGF SA+GYWI + +GNV Y+VL+ STLG FFP+
Sbjct: 61  FQSLAERKPELDAGVFAYAKAGFGDYMGFLSAFGYWIGSCIGNVSYWVLIKSTLGAFFPV 120

Query: 121 FGKGDTVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLD 180
           FG G+TV AI  ASV +W  HF++LRGI++AAFIN + TVAK++P+ +FI++   AFK+D
Sbjct: 121 FGDGNTVIAIAAASVGIWLFHFMILRGIQQAAFINAIVTVAKIIPIIVFIVVLFIAFKVD 180

Query: 181 IFTADIWGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFI 240
           +F  + WG+ +    S+  QVR  MLVTV+VF+GIEGAS++S  A +RS VG AT+IGF 
Sbjct: 181 LFKINFWGELSG--YSLFEQVRRTMLVTVFVFLGIEGASVYSRFASQRSHVGVATLIGFA 238

Query: 241 TVLLLLVLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLS 300
           T LLL+VLV++L   VM Q ++A L+ PSMA VLE VVG WGAV +SVGLLIS+LGA L+
Sbjct: 239 TALLLMVLVSLLPYAVMQQSDIAGLRQPSMAGVLESVVGPWGAVFVSVGLLISVLGAYLA 298

Query: 301 WVLLCAEIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMD 360
           W L+CAE+M AAAK   MP    REN N VP  ALW+TNI VQ+F++  +++       D
Sbjct: 299 WSLICAEVMHAAAKTEDMPRAFARENKNGVPVVALWVTNIIVQLFVISTYWS------RD 352

Query: 361 PYTKMLLLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLY 420
            +  ML L ++M LIPY   A +G LL  +GETY +D ++R +DL++AGIA  Y +++++
Sbjct: 353 AFALMLSLTSAMSLIPYLLVAGFGYLLAKRGETYTDD-KDRKRDLILAGIAAVYTLFMIF 411

Query: 421 AGGLKYLLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFL 480
           AGGLK+LLLSALLYAPG++L+  A+ E G+  FTG E  +F    IGA+ A  GL  G++
Sbjct: 412 AGGLKFLLLSALLYAPGSVLYFWARREQGRSFFTGWELTVFIVASIGAVAAVVGLIYGWI 471

Query: 481 TL 482
            +
Sbjct: 472 AI 473


>TR:A1SJE3_NOCSJ A1SJE3 Arginine:ornithine antiporter, APA family (Precursor)
           OS=Nocardioides sp. (strain BAA-499 / JS614)
           GN=Noca_2423 PE=4 SV=1
          Length = 489

 Score =  511 bits (1317), Expect = e-176
 Identities = 260/481 (54%), Positives = 342/481 (71%), Gaps = 8/481 (1%)

Query: 2   SQESSQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVF 61
           S   +  L L AL ALVVGSMIG GIF+LP  MA SA  G +LIGW +T VGML LAFVF
Sbjct: 17  SARGAGTLALPALIALVVGSMIGSGIFALPSQMAGSAAPGPLLIGWLVTGVGMLMLAFVF 76

Query: 62  QTLANRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIF 121
           QTL+ RKP++DGGVY YA+AGFG+Y+GF+SAWGYWISAW+GNVGY VLL STLGYF P F
Sbjct: 77  QTLSRRKPDVDGGVYGYARAGFGNYLGFTSAWGYWISAWIGNVGYLVLLMSTLGYFVPAF 136

Query: 122 GKGDTVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDI 181
             G+TVAAI+ ASV+LW +  L LRG++ AAF+NT+ T+AK+VPL  FI I    FK  I
Sbjct: 137 EGGNTVAAIIGASVVLWVVQALTLRGVQSAAFVNTLVTIAKIVPLLTFIAIAAVGFKAGI 196

Query: 182 FTADIWGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFIT 241
           FTAD+WG S   LGS ++QV+NMMLVTVWVFIGIEGA+++S RA +RSDVG+ATVIGF+ 
Sbjct: 197 FTADVWGDS-AGLGSTLDQVKNMMLVTVWVFIGIEGAAVYSQRATRRSDVGRATVIGFVG 255

Query: 242 VLLLLVLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSW 301
           VL LL+ VNVLS G+M+Q +LA L++PSMA ++   VG WG   IS+GL +S+ GALL+W
Sbjct: 256 VLALLLAVNVLSYGLMSQAKLAGLEDPSMAGLMRQEVGAWGTGFISIGLAVSVAGALLAW 315

Query: 302 VLLCAEIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDP 361
           VLL  EI+   A++  +P  L  EN    P+ ALWLT+ CVQ+ L+            + 
Sbjct: 316 VLLSVEILRLPAREGVLPRQLGTENRYGAPSVALWLTSGCVQLMLLWTLVNE------NT 369

Query: 362 YTKMLLLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYA 421
           YT ++ LATS+IL+PY WSA Y + L + GE+Y      R++DL++  +A+AYAVWL+YA
Sbjct: 370 YTDLIYLATSLILLPYLWSALYQVKLAISGESYA-QGESRTRDLLVGLVALAYAVWLVYA 428

Query: 422 GGLKYLLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLT 481
           GG +Y+L++ + Y  G  L+  A+ +    IFT  E+ + A VV  ++    GL  GF++
Sbjct: 429 GGWEYVLVAGIFYLVGTALYVWARSQARAAIFTVAERAVVAVVVGLSIAGVIGLVQGFVS 488

Query: 482 L 482
           +
Sbjct: 489 I 489


>TR:Q0SWK4_CLOPS Q0SWK4 Arginine/ornithine antiporter OS=Clostridium perfringens
           (strain SM101 / Type A) GN=arcD PE=4 SV=1
          Length = 478

 Score =  510 bits (1313), Expect = e-176
 Identities = 253/479 (52%), Positives = 339/479 (70%), Gaps = 10/479 (2%)

Query: 6   SQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLA 65
           S+KL    L AL+VGSMIGGG F+LP +MA  A  GAV+IGW IT +GM+ LAFV+Q+LA
Sbjct: 8   SKKLGFAQLAALIVGSMIGGGAFNLPSDMARGAGTGAVIIGWIITGIGMIALAFVYQSLA 67

Query: 66  NRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGD 125
           NRKPEL GGVY+YAKAGFG+Y+GF+SAWGYW+SAW+GNV Y VLLF  +GYF P+FG G+
Sbjct: 68  NRKPELTGGVYSYAKAGFGEYIGFNSAWGYWLSAWIGNVSYSVLLFGAVGYFLPMFGAGN 127

Query: 126 TVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTAD 185
            VA+I+ ASVLLWA   L+L G+  AA IN +TT+AK+VP+FLFI+I LF F  D FT  
Sbjct: 128 NVASIIGASVLLWAFTLLILNGVSGAALINLITTIAKLVPIFLFIVISLFMFNFDKFTFQ 187

Query: 186 IWGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLL 245
            WG S  DLG ++ QV++ MLVT+W FIGIEGA + S RA+K+SDVGKATV+G I  L++
Sbjct: 188 FWGTS--DLGGIVTQVKSTMLVTLWCFIGIEGAVVVSGRAKKQSDVGKATVLGLIGTLII 245

Query: 246 LVLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLC 305
            +L+ ++++GVM + +L+ L+NPSMA VLE  VG WGAVLI++GL+ISL G+LL W LL 
Sbjct: 246 YMLITLMALGVMDRVKLSGLENPSMAYVLEFAVGKWGAVLINLGLIISLFGSLLGWALLA 305

Query: 306 AEIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKM 365
           AEI + AAKD  +P+   + N    P+ +L +TN+ VQ FL++    S        Y  +
Sbjct: 306 AEIPYVAAKDGVLPKVFAKLNKKGTPSGSLIITNLLVQAFLILTLVAS------STYQAL 359

Query: 366 LLLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYAGGLK 425
             +A++ IL+PY  SA YG  L L GETY+ D   R++D +  GIA  YA+WL YA GLK
Sbjct: 360 YSVASTAILVPYLLSAMYGFKLALTGETYDKDPTGRTRDKIFGGIATVYAIWLCYAAGLK 419

Query: 426 YLLLSALLYAPGAILF--AKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           YLLL  +LYA G I F   K ++     +F G EK++   V++ A++A   L++G +T+
Sbjct: 420 YLLLCFILYAVGIIFFYIGKKQNNKDSVVFVGKEKILAIIVLVIAIIAIVMLFNGAITI 478


>TR:G8AGS8_AZOBR G8AGS8 Putative arginine/ornithine antiporter transporter
           OS=Azospirillum brasilense Sp245 GN=ydgI PE=4 SV=1
          Length = 496

 Score =  510 bits (1313), Expect = e-176
 Identities = 257/477 (53%), Positives = 342/477 (71%), Gaps = 12/477 (2%)

Query: 6   SQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLA 65
           S KL L  L ALVVGSMIGGG+F+LP +M+  A  GA+LIGW IT +GM+ LAFV+Q LA
Sbjct: 23  SDKLTLLPLVALVVGSMIGGGVFNLPSDMSKGASPGAILIGWMITGIGMMMLAFVYQNLA 82

Query: 66  NRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGD 125
            RKP L+ G YAYAKAGFG ++GF+SAWGYW+SA+LGNV Y V +FS L +FFPIFG G+
Sbjct: 83  VRKPNLNAGPYAYAKAGFGPFVGFNSAWGYWLSAFLGNVAYAVAIFSALSHFFPIFGDGN 142

Query: 126 TVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTAD 185
            + +IV AS+ LW +H LVL GIK+AAF+N VT++AK+VPLFLF+L+ +  F  D FT D
Sbjct: 143 NLPSIVGASLCLWLIHALVLSGIKQAAFVNVVTSIAKLVPLFLFVLVAIVGFHWDRFTVD 202

Query: 186 IW----GKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFIT 241
            W    G     LGSVM QV++ MLVT+WVFIGIEGAS++S+RA +RSDVG+ATVIGF+ 
Sbjct: 203 FWGTGAGSGTGGLGSVMEQVKSTMLVTLWVFIGIEGASVYSARAARRSDVGRATVIGFVG 262

Query: 242 VLLLLVLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSW 301
            L + VLV++L+ GV+ QPELA L+ PSMA V E +VG WGA LI++GL+IS+ GA LSW
Sbjct: 263 ALGIYVLVSLLATGVLRQPELADLKVPSMAGVFESLVGPWGAALINIGLVISVGGAFLSW 322

Query: 302 VLLCAEIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDP 361
            LLCAEI +   +D T P++   ENAN  P NALW TN+ +Q+FL + FF+         
Sbjct: 323 TLLCAEIPYTCGRDGTFPKWFAAENANGSPVNALWATNLLIQLFLALSFFS------RSA 376

Query: 362 YTKMLLLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYA 421
           Y     +A+  IL PY  S AY L L L GE Y   A  R+K +++  +A AY +WL+YA
Sbjct: 377 YQFFYFIASVAILPPYVLSGAYALKLALTGEGY--GAESRTKGILVGALATAYGLWLVYA 434

Query: 422 GGLKYLLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDG 478
            GL+YLL+ A+L+APG +++ +A+ E G+  FTG+E  I AA+ + A++AA+ ++ G
Sbjct: 435 AGLQYLLMCAVLFAPGILVYVRARREHGERTFTGVEMAIAAAIAVLAVLAAWLMWTG 491


>TR:B1V191_CLOPF B1V191 Arginine/ornithine antiporter OS=Clostridium perfringens D
           str. JGS1721 GN=arcD PE=4 SV=1
          Length = 478

 Score =  509 bits (1311), Expect = e-176
 Identities = 252/478 (52%), Positives = 339/478 (70%), Gaps = 10/478 (2%)

Query: 7   QKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLAN 66
           +KL    L AL+VGSMIGGG F+LP +MA+ A  GAV+IGW IT +GM+ LAFV+Q+LAN
Sbjct: 9   KKLGFAQLAALIVGSMIGGGAFNLPSDMASGAGTGAVIIGWIITGIGMIALAFVYQSLAN 68

Query: 67  RKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDT 126
           RKPEL GGVY+YAKAGFG+Y+GF+SAWGYW+SAW+GNV Y VLLF  +GYF P+FG G+ 
Sbjct: 69  RKPELTGGVYSYAKAGFGEYIGFNSAWGYWLSAWIGNVSYSVLLFGAVGYFLPMFGAGNN 128

Query: 127 VAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTADI 186
           VA+I+ ASVLLWA   L+L G+  AA IN +TT+AK+VP+FLFI+I LF F  D FT   
Sbjct: 129 VASIIGASVLLWAFTLLILNGVSGAALINLITTIAKLVPIFLFIVISLFMFNFDKFTFQF 188

Query: 187 WGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLLL 246
           WG S  DLG ++ QV++ MLVT+W FIGIEGA + S RA+K+SDVGKATV+G I  L++ 
Sbjct: 189 WGTS--DLGGIVTQVKSTMLVTLWCFIGIEGAVVVSGRAKKQSDVGKATVLGLIGTLIIY 246

Query: 247 VLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLCA 306
           +L+ ++++GVM + +L+ L+NPSMA VLE  VG WGAVLI++GL+ISL G+LL W LL A
Sbjct: 247 MLITLMALGVMDRVKLSGLENPSMAYVLEFAVGKWGAVLINLGLIISLFGSLLGWALLAA 306

Query: 307 EIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKML 366
           EI + AAKD  +P+   + N    P+ +L +TN+ VQ FL++    S        Y  + 
Sbjct: 307 EIPYVAAKDGVLPKVFAKLNKKGTPSGSLIITNLLVQAFLILTLVAS------STYQALY 360

Query: 367 LLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYAGGLKY 426
            +A++ IL+PY  SA YG  L L GETY+ D   R++D +  GIA  YA+WL YA GLKY
Sbjct: 361 SVASTAILVPYLLSAMYGFKLALTGETYDKDPTGRTRDKIFGGIATVYAIWLCYAAGLKY 420

Query: 427 LLLSALLYAPGAILF--AKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           LLL  +LYA G I F   K ++     +F G EK++   V++ A++A   L++G +T+
Sbjct: 421 LLLCFILYAVGIIFFYIGKKQNNKDAEVFVGKEKILAIIVLVIAIIAIVMLFNGTITI 478


>TR:H7CRW8_CLOPF H7CRW8 Arginine/ornithine antiporter OS=Clostridium perfringens
           F262 GN=HA1_00873 PE=4 SV=1
          Length = 478

 Score =  508 bits (1309), Expect = e-175
 Identities = 252/478 (52%), Positives = 338/478 (70%), Gaps = 10/478 (2%)

Query: 7   QKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLAN 66
           +KL    L AL+VGSMIGGG F+LP +MA  A  GAV+IGW IT +GM+ LAFV+Q+LAN
Sbjct: 9   KKLGFAQLAALIVGSMIGGGAFNLPSDMARGAGTGAVIIGWIITGIGMIALAFVYQSLAN 68

Query: 67  RKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDT 126
           RKPEL GGVY+YAKAGFG+Y+GF+SAWGYW+SAW+GNV Y VLLF  +GYF P+FG G+ 
Sbjct: 69  RKPELTGGVYSYAKAGFGEYIGFNSAWGYWLSAWIGNVSYSVLLFGAVGYFLPMFGAGNN 128

Query: 127 VAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTADI 186
           VA+I+ ASVLLWA   L+L G+  AA IN +TT+AK+VP+FLFI+I LF F  D FT   
Sbjct: 129 VASIIGASVLLWAFTLLILNGVSGAALINLITTIAKLVPIFLFIVISLFMFNFDKFTFQF 188

Query: 187 WGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLLL 246
           WG S  DLG ++ QV++ MLVT+W FIGIEGA + S RA+K+SDVGKATV+G I  L++ 
Sbjct: 189 WGTS--DLGGIVTQVKSTMLVTLWCFIGIEGAVVVSGRAKKQSDVGKATVLGLIGTLIIY 246

Query: 247 VLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLCA 306
           +L+ ++++GVM + +L+ L+NPSMA VLE  VG WGAVLI++GL+ISL G+LL W LL A
Sbjct: 247 MLITLMALGVMDRVKLSGLENPSMAYVLEFAVGKWGAVLINLGLIISLFGSLLGWALLAA 306

Query: 307 EIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKML 366
           EI + AAKD  +P+   + N    P+ +L +TN+ VQ FL++    S        Y  + 
Sbjct: 307 EIPYVAAKDGVLPKVFAKLNKKGTPSGSLIITNLLVQAFLILTLVAS------STYQALY 360

Query: 367 LLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYAGGLKY 426
            +A++ IL+PY  SA YG  L L GETY+ D   R++D +  GIA  YA+WL YA GLKY
Sbjct: 361 SVASTAILVPYLLSAMYGFKLALTGETYDKDPTGRTRDKIFGGIATVYAIWLCYAAGLKY 420

Query: 427 LLLSALLYAPGAILF--AKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           LLL  +LYA G I F   K ++     +F G EK++   V++ A++A   L++G +T+
Sbjct: 421 LLLCFILYAVGIIFFYIGKKQNNKDAEVFVGKEKILAIIVLVIAIIAIVMLFNGTITI 478


>TR:H1CW31_CLOPF H1CW31 Arginine/ornithine antiporter OS=Clostridium perfringens
           WAL-14572 GN=HMPREF9476_02752 PE=4 SV=1
          Length = 478

 Score =  508 bits (1309), Expect = e-175
 Identities = 252/478 (52%), Positives = 338/478 (70%), Gaps = 10/478 (2%)

Query: 7   QKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLAN 66
           +KL    L AL+VGSMIGGG F+LP +MA  A  GAV+IGW IT +GM+ LAFV+Q+LAN
Sbjct: 9   KKLGFAQLAALIVGSMIGGGAFNLPSDMARGAGTGAVIIGWIITGIGMIALAFVYQSLAN 68

Query: 67  RKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDT 126
           RKPEL GGVY+YAKAGFG+Y+GF+SAWGYW+SAW+GNV Y VLLF  +GYF P+FG G+ 
Sbjct: 69  RKPELTGGVYSYAKAGFGEYIGFNSAWGYWLSAWIGNVSYSVLLFGAVGYFLPMFGAGNN 128

Query: 127 VAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTADI 186
           VA+I+ ASVLLWA   L+L G+  AA IN +TT+AK+VP+FLFI+I LF F  D FT   
Sbjct: 129 VASIIGASVLLWAFTLLILNGVSGAALINLITTIAKLVPIFLFIVISLFMFNFDKFTFQF 188

Query: 187 WGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLLL 246
           WG S  DLG ++ QV++ MLVT+W FIGIEGA + S RA+K+SDVGKATV+G I  L++ 
Sbjct: 189 WGTS--DLGGIVTQVKSTMLVTLWCFIGIEGAVVVSGRAKKQSDVGKATVLGLIGTLIIY 246

Query: 247 VLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLCA 306
           +L+ ++++GVM + +L+ L+NPSMA VLE  VG WGAVLI++GL+ISL G+LL W LL A
Sbjct: 247 MLITLMALGVMDRVKLSGLENPSMAYVLEFAVGKWGAVLINLGLIISLFGSLLGWALLAA 306

Query: 307 EIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKML 366
           EI + AAKD  +P+   + N    P+ +L +TN+ VQ FL++    S        Y  + 
Sbjct: 307 EIPYVAAKDGVLPKVFAKLNKKGTPSGSLIITNLLVQAFLILTLVAS------STYQALY 360

Query: 367 LLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYAGGLKY 426
            +A++ IL+PY  SA YG  L L GETY+ D   R++D +  GIA  YA+WL YA GLKY
Sbjct: 361 SVASTAILVPYLLSAMYGFKLALTGETYDKDPTGRTRDKIFGGIATVYAIWLCYAAGLKY 420

Query: 427 LLLSALLYAPGAILF--AKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           LLL  +LYA G I F   K ++     +F G EK++   V++ A++A   L++G +T+
Sbjct: 421 LLLCFILYAVGIIFFYIGKKQNNKDAEVFVGKEKILAIIVLVIAIIAIVMLFNGTITI 478


>TR:B1RQY3_CLOPF B1RQY3 Arginine/ornithine antiporter OS=Clostridium perfringens
           NCTC 8239 GN=arcD PE=4 SV=1
          Length = 478

 Score =  508 bits (1309), Expect = e-175
 Identities = 252/478 (52%), Positives = 338/478 (70%), Gaps = 10/478 (2%)

Query: 7   QKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLAN 66
           +KL    L AL+VGSMIGGG F+LP +MA  A  GAV+IGW IT +GM+ LAFV+Q+LAN
Sbjct: 9   KKLGFAQLAALIVGSMIGGGAFNLPSDMARGAGTGAVIIGWIITGIGMIALAFVYQSLAN 68

Query: 67  RKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDT 126
           RKPEL GGVY+YAKAGFG+Y+GF+SAWGYW+SAW+GNV Y VLLF  +GYF P+FG G+ 
Sbjct: 69  RKPELTGGVYSYAKAGFGEYIGFNSAWGYWLSAWIGNVSYSVLLFGAVGYFLPMFGAGNN 128

Query: 127 VAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTADI 186
           VA+I+ ASVLLWA   L+L G+  AA IN +TT+AK+VP+FLFI+I LF F  D FT   
Sbjct: 129 VASIIGASVLLWAFTLLILNGVSGAALINLITTIAKLVPIFLFIVISLFMFNFDKFTFQF 188

Query: 187 WGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLLL 246
           WG S  DLG ++ QV++ MLVT+W FIGIEGA + S RA+K+SDVGKATV+G I  L++ 
Sbjct: 189 WGTS--DLGGIVTQVKSTMLVTLWCFIGIEGAVVVSGRAKKQSDVGKATVLGLIGTLIIY 246

Query: 247 VLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLCA 306
           +L+ ++++GVM + +L+ L+NPSMA VLE  VG WGAVLI++GL+ISL G+LL W LL A
Sbjct: 247 MLITLMALGVMDRVKLSGLENPSMAYVLEFAVGKWGAVLINLGLIISLFGSLLGWALLAA 306

Query: 307 EIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKML 366
           EI + AAKD  +P+   + N    P+ +L +TN+ VQ FL++    S        Y  + 
Sbjct: 307 EIPYVAAKDGVLPKVFAKLNKKGTPSGSLIITNLLVQAFLILTLVAS------STYQALY 360

Query: 367 LLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYAGGLKY 426
            +A++ IL+PY  SA YG  L L GETY+ D   R++D +  GIA  YA+WL YA GLKY
Sbjct: 361 SVASTAILVPYLLSAMYGFKLALTGETYDKDPTGRTRDKIFGGIATVYAIWLCYAAGLKY 420

Query: 427 LLLSALLYAPGAILF--AKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           LLL  +LYA G I F   K ++     +F G EK++   V++ A++A   L++G +T+
Sbjct: 421 LLLCFILYAVGIIFFYIGKKQNNKDAEVFVGKEKILAIIVLVIAIIAIVMLFNGTITI 478


>TR:B1R7A7_CLOPF B1R7A7 Arginine/ornithine antiporter OS=Clostridium perfringens B
           str. ATCC 3626 GN=arcD PE=4 SV=1
          Length = 478

 Score =  508 bits (1309), Expect = e-175
 Identities = 252/478 (52%), Positives = 338/478 (70%), Gaps = 10/478 (2%)

Query: 7   QKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLAN 66
           +KL    L AL+VGSMIGGG F+LP +MA  A  GAV+IGW IT +GM+ LAFV+Q+LAN
Sbjct: 9   KKLGFAQLAALIVGSMIGGGAFNLPSDMARGAGTGAVIIGWIITGIGMIALAFVYQSLAN 68

Query: 67  RKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDT 126
           RKPEL GGVY+YAKAGFG+Y+GF+SAWGYW+SAW+GNV Y VLLF  +GYF P+FG G+ 
Sbjct: 69  RKPELTGGVYSYAKAGFGEYIGFNSAWGYWLSAWIGNVSYSVLLFGAVGYFLPMFGAGNN 128

Query: 127 VAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTADI 186
           VA+I+ ASVLLWA   L+L G+  AA IN +TT+AK+VP+FLFI+I LF F  D FT   
Sbjct: 129 VASIIGASVLLWAFTLLILNGVSGAALINLITTIAKLVPIFLFIVISLFMFNFDKFTFQF 188

Query: 187 WGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLLL 246
           WG S  DLG ++ QV++ MLVT+W FIGIEGA + S RA+K+SDVGKATV+G I  L++ 
Sbjct: 189 WGTS--DLGGIVTQVKSTMLVTLWCFIGIEGAVVVSGRAKKQSDVGKATVLGLIGTLIIY 246

Query: 247 VLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLCA 306
           +L+ ++++GVM + +L+ L+NPSMA VLE  VG WGAVLI++GL+ISL G+LL W LL A
Sbjct: 247 MLITLMALGVMDRVKLSGLENPSMAYVLEFAVGKWGAVLINLGLIISLFGSLLGWALLAA 306

Query: 307 EIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKML 366
           EI + AAKD  +P+   + N    P+ +L +TN+ VQ FL++    S        Y  + 
Sbjct: 307 EIPYVAAKDGVLPKVFAKLNKKGTPSGSLIITNLLVQAFLILTLVAS------STYQALY 360

Query: 367 LLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYAGGLKY 426
            +A++ IL+PY  SA YG  L L GETY+ D   R++D +  GIA  YA+WL YA GLKY
Sbjct: 361 SVASTAILVPYLLSAMYGFKLALTGETYDKDPTGRTRDKIFGGIATVYAIWLCYAAGLKY 420

Query: 427 LLLSALLYAPGAILF--AKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           LLL  +LYA G I F   K ++     +F G EK++   V++ A++A   L++G +T+
Sbjct: 421 LLLCFILYAVGIIFFYIGKKQNNKDAEVFVGKEKILAIIVLVIAIIAIVMLFNGTITI 478


>TR:B1BS27_CLOPF B1BS27 Arginine/ornithine antiporter OS=Clostridium perfringens E
           str. JGS1987 GN=arcD PE=4 SV=1
          Length = 478

 Score =  508 bits (1309), Expect = e-175
 Identities = 252/478 (52%), Positives = 338/478 (70%), Gaps = 10/478 (2%)

Query: 7   QKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLAN 66
           +KL    L AL+VGSMIGGG F+LP +MA  A  GAV+IGW IT +GM+ LAFV+Q+LAN
Sbjct: 9   KKLGFAQLAALIVGSMIGGGAFNLPSDMARGAGTGAVIIGWIITGIGMIALAFVYQSLAN 68

Query: 67  RKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDT 126
           RKPEL GGVY+YAKAGFG+Y+GF+SAWGYW+SAW+GNV Y VLLF  +GYF P+FG G+ 
Sbjct: 69  RKPELTGGVYSYAKAGFGEYIGFNSAWGYWLSAWIGNVSYSVLLFGAVGYFLPMFGAGNN 128

Query: 127 VAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTADI 186
           VA+I+ ASVLLWA   L+L G+  AA IN +TT+AK+VP+FLFI+I LF F  D FT   
Sbjct: 129 VASIIGASVLLWAFTLLILNGVSGAALINLITTIAKLVPIFLFIVISLFMFNFDKFTFQF 188

Query: 187 WGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLLL 246
           WG S  DLG ++ QV++ MLVT+W FIGIEGA + S RA+K+SDVGKATV+G I  L++ 
Sbjct: 189 WGTS--DLGGIVTQVKSTMLVTLWCFIGIEGAVVVSGRAKKQSDVGKATVLGLIGTLIIY 246

Query: 247 VLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLCA 306
           +L+ ++++GVM + +L+ L+NPSMA VLE  VG WGAVLI++GL+ISL G+LL W LL A
Sbjct: 247 MLITLMALGVMDRVKLSGLENPSMAYVLEFAVGKWGAVLINLGLIISLFGSLLGWALLAA 306

Query: 307 EIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKML 366
           EI + AAKD  +P+   + N    P+ +L +TN+ VQ FL++    S        Y  + 
Sbjct: 307 EIPYVAAKDGVLPKVFAKLNKKGTPSGSLIITNLLVQAFLILTLVAS------STYQALY 360

Query: 367 LLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYAGGLKY 426
            +A++ IL+PY  SA YG  L L GETY+ D   R++D +  GIA  YA+WL YA GLKY
Sbjct: 361 SVASTAILVPYLLSAMYGFKLALTGETYDKDPTGRTRDKIFGGIATVYAIWLCYAAGLKY 420

Query: 427 LLLSALLYAPGAILF--AKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           LLL  +LYA G I F   K ++     +F G EK++   V++ A++A   L++G +T+
Sbjct: 421 LLLCFILYAVGIIFFYIGKKQNNKDAEVFVGKEKILAIIVLVIAIIAIVMLFNGTITI 478


>TR:C4U894_YERAL C4U894 Arginine/ornithine antiporter OS=Yersinia aldovae ATCC 35236
           GN=yaldo0001_28710 PE=4 SV=1
          Length = 502

 Score =  508 bits (1309), Expect = e-175
 Identities = 260/508 (51%), Positives = 345/508 (67%), Gaps = 32/508 (6%)

Query: 1   MSQESSQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFV 60
           M+  ++ KL L ALT+LVVGSMIG GIFSLP     +      LI W I   GML LAFV
Sbjct: 1   MANSTTNKLSLPALTSLVVGSMIGAGIFSLPATFGRATGGFGALIAWCIAGGGMLMLAFV 60

Query: 61  FQTLANRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPI 120
           FQTLA RKP LD GV+ YAK GFGDY+GF+SA G+W    +GNV YFVL+ STLG FFPI
Sbjct: 61  FQTLAQRKPNLDSGVFIYAKEGFGDYLGFASALGFWAGTCIGNVSYFVLIKSTLGAFFPI 120

Query: 121 FGKGDTVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLD 180
           FG G+T+ A++ ASV+LW  HFL+LRG+KEAA INT+ T AK++P+F+F+++ +FAFK D
Sbjct: 121 FGDGNTIPAVLVASVILWGFHFLILRGVKEAAAINTIATFAKIIPIFIFVIVLIFAFKGD 180

Query: 181 IFTADIWGKSNPDLG--------------------------SVMNQVRNMMLVTVWVFIG 214
           +F  + WG  +   G                          S+ +QVR+ MLVTV+VF+G
Sbjct: 181 VFALNFWGTPDVVKGADLSHLNDYGYVGHAAATITTSVEPESLFSQVRSTMLVTVFVFLG 240

Query: 215 IEGASIFSSRAEKRSDVGKATVIGFITVLLLLVLVNVLSMGVMTQPELAKLQNPSMALVL 274
           IEGAS++S  A++RS VG ATV+GFI VL LLVL+ +LS GV+ +P+LA L+ PSMA VL
Sbjct: 241 IEGASVYSRYAKERSHVGIATVLGFIGVLCLLVLITMLSYGVLLRPDLAALRQPSMAGVL 300

Query: 275 EHVVGHWGAVLISVGLLISLLGALLSWVLLCAEIMFAAAKDHTMPEFLRRENANQVPANA 334
           E +VG WGA+ ISVGL+IS+LGA LSW LL AE++F+AAK  +MP+    EN+N VP+ A
Sbjct: 301 EAIVGRWGAIFISVGLIISVLGAYLSWSLLAAEVLFSAAKSKSMPKVFATENSNAVPSAA 360

Query: 335 LWLTNICVQVFLVVVFFTSGDPDGMDPYTKMLLLATSMILIPYFWSAAYGLLLTLKGETY 394
           +WLTNI +Q+FL++  FT         +   L L +S+ LIPY    AYGL L   GETY
Sbjct: 361 VWLTNIFIQIFLILTLFTD------YAFQLALELTSSLTLIPYLLVGAYGLKLAWTGETY 414

Query: 395 ENDARERSKDLVIAGIAVAYAVWLLYAGGLKYLLLSALLYAPGAILFAKAKHEVGQPIFT 454
           E +AR   KDL+ A IA  Y+  ++YAGGLKYLLLSA++Y PG IL+  AK E  Q  F 
Sbjct: 415 ETNARGHRKDLIFAIIATFYSALMIYAGGLKYLLLSAIIYGPGTILYLIAKREQHQKAFN 474

Query: 455 GIEKLIFAAVVIGALVAAYGLYDGFLTL 482
             E+++F  +++ A++A Y ++ G +T+
Sbjct: 475 TYERILFIVLIVAAVIALYSIFTGIITI 502


>TR:C4ULF1_YERRU C4ULF1 Arginine/ornithine antiporter OS=Yersinia ruckeri ATCC 29473
           GN=yruck0001_11980 PE=4 SV=1
          Length = 500

 Score =  508 bits (1307), Expect = e-175
 Identities = 261/506 (51%), Positives = 345/506 (68%), Gaps = 30/506 (5%)

Query: 1   MSQESSQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFV 60
           M   + +KL L +LT+LVVGSMIG GIFSLP     +      +I W I   GMLTLAFV
Sbjct: 1   MPTSAIKKLSLWSLTSLVVGSMIGAGIFSLPATFGRATGGFGAMIAWFIAGGGMLTLAFV 60

Query: 61  FQTLANRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPI 120
           FQTLA RKPELD GVY YA+ GFGDY GF+SA G+W  A +G+V YFVL+ STLG FFPI
Sbjct: 61  FQTLAQRKPELDAGVYIYAQKGFGDYAGFASAIGFWAGACIGSVSYFVLIKSTLGAFFPI 120

Query: 121 FGKGDTVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLD 180
            G G++++A++ AS++LW+ HF+VLRG+KEAA INT+ T AKV+P+ +FI++ +FAF   
Sbjct: 121 LGDGNSLSAVLIASMILWSFHFMVLRGVKEAATINTIATFAKVIPICIFIIVLIFAFDSH 180

Query: 181 IFTADIWGKSNPDLG------------------------SVMNQVRNMMLVTVWVFIGIE 216
           +F  + WG   P  G                        S+  QVR+ MLVTV+VF+GIE
Sbjct: 181 VFVQNFWGTQVPQSGADMAHWDDYGYVGYAATEINSSSVSLFTQVRSTMLVTVFVFVGIE 240

Query: 217 GASIFSSRAEKRSDVGKATVIGFITVLLLLVLVNVLSMGVMTQPELAKLQNPSMALVLEH 276
           GAS++S  A +R  VG ATV+GFI VL LLVLV +LS GV+ + +LA L+ PSMA VLEH
Sbjct: 241 GASVYSRYARERKHVGIATVLGFIGVLCLLVLVTMLSYGVLLRSDLAGLRQPSMAGVLEH 300

Query: 277 VVGHWGAVLISVGLLISLLGALLSWVLLCAEIMFAAAKDHTMPEFLRRENANQVPANALW 336
           +VG WGA+ IS+GL+IS++GA LSW LL AE +++AAK H +P+ L +EN   VP  A+W
Sbjct: 301 IVGRWGAIFISIGLIISVMGAYLSWTLLAAEALYSAAKSHILPKVLAKENKRGVPFAAVW 360

Query: 337 LTNICVQVFLVVVFFTSGDPDGMDPYTKMLLLATSMILIPYFWSAAYGLLLTLKGETYEN 396
           ++NI +Q FL+V  FT         +   L L +S++LIPY   AAYGL L  +GETYE 
Sbjct: 361 MSNIFIQFFLIVTLFTE------YAFQLALELTSSLVLIPYLLVAAYGLKLAWRGETYEM 414

Query: 397 DARERSKDLVIAGIAVAYAVWLLYAGGLKYLLLSALLYAPGAILFAKAKHEVGQPIFTGI 456
           D  +  KDL+IAGIA  YA+ ++YAGGLKY+LLSA++Y PG +LF  AK E   P+FT I
Sbjct: 415 DKTDHKKDLIIAGIATLYALLMVYAGGLKYVLLSAVIYGPGTLLFILAKREQHMPVFTVI 474

Query: 457 EKLIFAAVVIGALVAAYGLYDGFLTL 482
           EK++FA  ++ A  A YGL  G+++L
Sbjct: 475 EKMLFAVAIVAAAGAIYGLVIGYISL 500


>SP:ARCD_CLOPE Q46170 Arginine/ornithine antiporter OS=Clostridium perfringens
           (strain 13 / Type A) GN=arcD PE=3 SV=2
          Length = 478

 Score =  506 bits (1304), Expect = e-175
 Identities = 251/478 (52%), Positives = 338/478 (70%), Gaps = 10/478 (2%)

Query: 7   QKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLAN 66
           +KL    L AL+VGSMIGGG F+LP +MA  A  GAV+IGW IT +GM+ LAFV+Q+LAN
Sbjct: 9   KKLGFAQLAALIVGSMIGGGAFNLPSDMARGAGTGAVIIGWIITGIGMIALAFVYQSLAN 68

Query: 67  RKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDT 126
           RKPEL GGVY+YAKAGFG+Y+GF+SAWGYW+SAW+GNV Y VLLF  +GYF P+FG G+ 
Sbjct: 69  RKPELTGGVYSYAKAGFGEYIGFNSAWGYWLSAWIGNVSYSVLLFGAVGYFLPMFGAGNN 128

Query: 127 VAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTADI 186
           VA+I+ ASVLLWA   L+L G+  AA IN +TT+AK+VP+FLFI+I LF F  D FT   
Sbjct: 129 VASIIGASVLLWAFTLLILNGVSGAALINLITTIAKLVPIFLFIVISLFMFNFDKFTFQF 188

Query: 187 WGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLLL 246
           WG S  DLG ++ QV++ MLVT+W FIGIEGA + S RA+K+SDVGKATV+G I  L++ 
Sbjct: 189 WGTS--DLGGIVTQVKSTMLVTLWCFIGIEGAVVVSGRAKKQSDVGKATVLGLIGTLIIY 246

Query: 247 VLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLCA 306
           +L+ ++++GVM + +L+ L+NPSMA VLE  VG WGAVLI++GL+ISL G+LL W LL A
Sbjct: 247 MLITLMALGVMDRVKLSGLENPSMAYVLEFAVGKWGAVLINLGLIISLFGSLLGWALLAA 306

Query: 307 EIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKML 366
           EI + AAKD  +P+   + N    P+ +L +TN+ VQ FL++    S        Y  + 
Sbjct: 307 EIPYVAAKDGVLPKVFAKLNKKGTPSGSLIITNLLVQAFLILTLVAS------STYQALY 360

Query: 367 LLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYAGGLKY 426
            +A++ IL+PY  SA YG  L L GETY+ +   R++D +  GIA  YA+WL YA GLKY
Sbjct: 361 SVASTAILVPYLLSAMYGFKLALTGETYDKNPTGRTRDKIFGGIATVYAIWLCYAAGLKY 420

Query: 427 LLLSALLYAPGAILF--AKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           LLL  +LYA G I F   K ++     +F G EK++   V++ A++A   L++G +T+
Sbjct: 421 LLLCFILYAVGIIFFYIGKKQNNKDAEVFVGKEKILAIIVLVIAIIAIVMLFNGTITI 478


>TR:Q0TUR3_CLOP1 Q0TUR3 Arginine/ornithine antiporter OS=Clostridium perfringens
           (strain ATCC 13124 / NCTC 8237 / Type A) GN=arcD PE=4
           SV=1
          Length = 478

 Score =  506 bits (1304), Expect = e-175
 Identities = 251/478 (52%), Positives = 338/478 (70%), Gaps = 10/478 (2%)

Query: 7   QKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLAN 66
           +KL    L AL+VGSMIGGG F+LP +MA  A  GAV+IGW IT +GM+ LAFV+Q+LAN
Sbjct: 9   KKLGFAQLAALIVGSMIGGGAFNLPSDMARGAGTGAVIIGWIITGIGMIALAFVYQSLAN 68

Query: 67  RKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDT 126
           RKPEL GGVY+YAKAGFG+Y+GF+SAWGYW+SAW+GNV Y VLLF  +GYF P+FG G+ 
Sbjct: 69  RKPELTGGVYSYAKAGFGEYIGFNSAWGYWLSAWIGNVSYSVLLFGAVGYFLPMFGAGNN 128

Query: 127 VAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTADI 186
           VA+I+ ASVLLWA   L+L G+  AA IN +TT+AK+VP+FLFI+I LF F  D FT   
Sbjct: 129 VASIIGASVLLWAFTLLILNGVSGAALINLITTIAKLVPIFLFIVISLFMFNFDKFTFQF 188

Query: 187 WGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLLL 246
           WG S  DLG ++ QV++ MLVT+W FIGIEGA + S RA+K+SDVGKATV+G I  L++ 
Sbjct: 189 WGTS--DLGGIVTQVKSTMLVTLWCFIGIEGAVVVSGRAKKQSDVGKATVLGLIGTLIIY 246

Query: 247 VLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLCA 306
           +L+ ++++GVM + +L+ L+NPSMA VLE  VG WGAVLI++GL+ISL G+LL W LL A
Sbjct: 247 MLITLMALGVMDRVKLSGLENPSMAYVLEFAVGKWGAVLINLGLIISLFGSLLGWALLAA 306

Query: 307 EIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKML 366
           EI + AAKD  +P+   + N    P+ +L +TN+ VQ FL++    S        Y  + 
Sbjct: 307 EIPYVAAKDGVLPKVFAKLNKKGTPSGSLIITNLLVQAFLILTLVAS------STYQALY 360

Query: 367 LLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYAGGLKY 426
            +A++ IL+PY  SA YG  L L GETY+ +   R++D +  GIA  YA+WL YA GLKY
Sbjct: 361 SVASTAILVPYLLSAMYGFKLALTGETYDKNPTGRTRDKIFGGIATVYAIWLCYAAGLKY 420

Query: 427 LLLSALLYAPGAILF--AKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           LLL  +LYA G I F   K ++     +F G EK++   V++ A++A   L++G +T+
Sbjct: 421 LLLCFILYAVGIIFFYIGKKQNNKDAEVFVGKEKILAIIVLVIAIIAIVMLFNGTITI 478


>TR:B1RFC1_CLOPF B1RFC1 Arginine/ornithine antiporter OS=Clostridium perfringens CPE
           str. F4969 GN=arcD PE=4 SV=1
          Length = 478

 Score =  506 bits (1304), Expect = e-175
 Identities = 251/478 (52%), Positives = 338/478 (70%), Gaps = 10/478 (2%)

Query: 7   QKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLAN 66
           +KL    L AL+VGSMIGGG F+LP +MA  A  GAV+IGW IT +GM+ LAFV+Q+LAN
Sbjct: 9   KKLGFAQLAALIVGSMIGGGAFNLPSDMARGAGTGAVIIGWIITGIGMIALAFVYQSLAN 68

Query: 67  RKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDT 126
           RKPEL GGVY+YAKAGFG+Y+GF+SAWGYW+SAW+GNV Y VLLF  +GYF P+FG G+ 
Sbjct: 69  RKPELTGGVYSYAKAGFGEYIGFNSAWGYWLSAWIGNVSYSVLLFGAVGYFLPMFGAGNN 128

Query: 127 VAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTADI 186
           VA+I+ ASVLLWA   L+L G+  AA IN +TT+AK+VP+FLFI+I LF F  D FT   
Sbjct: 129 VASIIGASVLLWAFTLLILNGVSGAALINLITTIAKLVPIFLFIVISLFMFNFDKFTFQF 188

Query: 187 WGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLLL 246
           WG S  DLG ++ QV++ MLVT+W FIGIEGA + S RA+K+SDVGKATV+G I  L++ 
Sbjct: 189 WGTS--DLGGIVTQVKSTMLVTLWCFIGIEGAVVVSGRAKKQSDVGKATVLGLIGTLIIY 246

Query: 247 VLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLCA 306
           +L+ ++++GVM + +L+ L+NPSMA VLE  VG WGAVLI++GL+ISL G+LL W LL A
Sbjct: 247 MLITLMALGVMDRVKLSGLENPSMAYVLEFAVGKWGAVLINLGLIISLFGSLLGWALLAA 306

Query: 307 EIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKML 366
           EI + AAKD  +P+   + N    P+ +L +TN+ VQ FL++    S        Y  + 
Sbjct: 307 EIPYVAAKDWVLPKVFAKLNKKGTPSGSLIITNLLVQAFLILTLVAS------STYQALY 360

Query: 367 LLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYAGGLKY 426
            +A++ IL+PY  SA YG  L L GETY+ +   R++D +  GIA  YA+WL YA GLKY
Sbjct: 361 SVASTAILVPYLLSAMYGFKLALTGETYDKNPTGRTRDKIFGGIATVYAIWLCYAAGLKY 420

Query: 427 LLLSALLYAPGAILF--AKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           LLL  +LYA G I F   K ++     +F G EK++   V++ A++A   L++G +T+
Sbjct: 421 LLLCFILYAVGIIFFYIGKKQNNKDAEVFVGKEKILAIIVLVIAIIAIVMLFNGTITI 478


>TR:C4UQ95_YERRO C4UQ95 Arginine/ornithine antiporter OS=Yersinia rohdei ATCC 43380
           GN=yrohd0001_29210 PE=4 SV=1
          Length = 502

 Score =  507 bits (1306), Expect = e-175
 Identities = 265/506 (52%), Positives = 347/506 (68%), Gaps = 30/506 (5%)

Query: 1   MSQESSQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFV 60
           M+  S++KL L +LT+LVVGSMIG GIFSLP     +      LI W I   GMLTLAFV
Sbjct: 3   MTTSSNKKLSLWSLTSLVVGSMIGAGIFSLPATFGRATGGFGALIAWVIAGGGMLTLAFV 62

Query: 61  FQTLANRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPI 120
           FQTLA RKP+LD GVY YAK GFGDY GF++A G+W  A +G+V YF+L+ STLG FFPI
Sbjct: 63  FQTLAQRKPDLDSGVYIYAKTGFGDYAGFAAAIGFWAGACIGSVSYFILIKSTLGAFFPI 122

Query: 121 FGKGDTVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLD 180
           FG G+T++A++ AS++LW+ HF+VLRGIKEAA INT+ T AKV+P+F+FI++  FAF  D
Sbjct: 123 FGDGNTLSAVLIASLILWSFHFMVLRGIKEAAAINTIATFAKVIPIFIFIIVLAFAFHTD 182

Query: 181 IFTADIWGKSN----------PDLG--------------SVMNQVRNMMLVTVWVFIGIE 216
            F  + WG              D G              S+ +QVR+ MLVTV+VF+GIE
Sbjct: 183 TFALNFWGTQTLGAVGDLSHLDDYGYTGHAALEIAAGSESLFSQVRSTMLVTVFVFVGIE 242

Query: 217 GASIFSSRAEKRSDVGKATVIGFITVLLLLVLVNVLSMGVMTQPELAKLQNPSMALVLEH 276
           GAS++S  A++R  VG ATV+GFI VL LLVLV +LS GVM +P+LA L+ PSMA VLEH
Sbjct: 243 GASVYSRYAKERKHVGIATVLGFIGVLCLLVLVTMLSYGVMLRPDLAALRQPSMAGVLEH 302

Query: 277 VVGHWGAVLISVGLLISLLGALLSWVLLCAEIMFAAAKDHTMPEFLRRENANQVPANALW 336
           +VG WGA+ IS+GL+IS++GA LSW LL AE +++AAK   MP     EN + VP+ A+W
Sbjct: 303 IVGRWGAIFISIGLIISVMGAYLSWTLLAAEALYSAAKSDIMPRLFTTENKHGVPSAAVW 362

Query: 337 LTNICVQVFLVVVFFTSGDPDGMDPYTKMLLLATSMILIPYFWSAAYGLLLTLKGETYEN 396
           ++NI +Q+FL+V  FT         +   L L +S++LIPY   AAYGL LT   ETY  
Sbjct: 363 MSNIFIQLFLIVTLFTE------YAFQLALELTSSLVLIPYLLVAAYGLKLTWTRETYPV 416

Query: 397 DARERSKDLVIAGIAVAYAVWLLYAGGLKYLLLSALLYAPGAILFAKAKHEVGQPIFTGI 456
           D+ ER KDL+ A IA  YA+ ++YAGGLKY+LLSA++Y PG +LF  AK +  +PIFT  
Sbjct: 417 DSTERKKDLIFALIATLYALLMVYAGGLKYILLSAVIYGPGTLLFIIAKRQQTKPIFTFT 476

Query: 457 EKLIFAAVVIGALVAAYGLYDGFLTL 482
           EK +FA  +I A++A Y L  G +T+
Sbjct: 477 EKCLFAVALIAAVIALYCLATGIITV 502


>TR:D1B6P7_THEAS D1B6P7 Arginine/ornithine antiporter (Precursor)
           OS=Thermanaerovibrio acidaminovorans (strain ATCC 49978
           / DSM 6589 / Su883) GN=Taci_1458 PE=4 SV=1
          Length = 472

 Score =  506 bits (1303), Expect = e-175
 Identities = 242/478 (50%), Positives = 339/478 (70%), Gaps = 10/478 (2%)

Query: 5   SSQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTL 64
           S +KL L +L ALV+GSMIG G+FSLP ++A SA  GA+ +GW IT +GM+ LA  +Q L
Sbjct: 2   SDKKLGLFSLVALVIGSMIGAGVFSLPSDIARSAGPGAIALGWLITGIGMIALALTYQAL 61

Query: 65  ANRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKG 124
           ANRKPELDGG+Y+YAKAGFGD++GF+SAWGYW+SAWLGNV + VLLF  + YFFP+F   
Sbjct: 62  ANRKPELDGGIYSYAKAGFGDFIGFNSAWGYWLSAWLGNVAFLVLLFEAIAYFFPVFE-- 119

Query: 125 DTVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTA 184
           +   A++ ASV+LW +HFLVLRG+++AA +N +TTV K+VP+  F ++ + +FK DIF A
Sbjct: 120 NKTMAVLGASVILWGIHFLVLRGVRDAAIVNLITTVGKLVPIIFFAIVAVISFKADIFNA 179

Query: 185 DIWGKSNP-DLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVL 243
           D WG     D+  VM QVR+ M+VT+WVFIG+EGA + S RAE++SDVGKATV+G +  L
Sbjct: 180 DFWGTGGGFDMAKVMEQVRSTMMVTLWVFIGVEGAVVLSGRAERKSDVGKATVLGLVATL 239

Query: 244 LLLVLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVL 303
            L V++++ S+GVM + EL KL NP+ A +L+ VVG+WGA LI++GL+ISL GA L W L
Sbjct: 240 ALYVIISLASLGVMPKDELTKLANPTTAYILKSVVGNWGATLINLGLIISLSGATLGWTL 299

Query: 304 LCAEIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYT 363
           L AEI + AAKD  +P F  +EN N+ P N+LW+TN  +Q+FL++  F+         Y 
Sbjct: 300 LAAEIPYVAAKDKVLPSFFAKENENKAPVNSLWITNGLIQLFLIITLFSE------STYQ 353

Query: 364 KMLLLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYAGG 423
            +  +A++ IL+PY +SA Y L L+  GE Y +    ++ +L I+ +A  YA+WL+YA G
Sbjct: 354 ALYTIASAAILVPYLFSALYQLKLSSTGEGYAS-GESKAFELFISAVASVYALWLIYAAG 412

Query: 424 LKYLLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLT 481
           L+YLL+ A+LYAPGAI + KAK E G   F  IE ++   ++  A+ A Y +  G ++
Sbjct: 413 LEYLLMCAILYAPGAIFYWKAKREAGAKAFGPIETVLLMGLMAAAVTAIYLMSKGVIS 470


>TR:I2QQ17_9BRAD I2QQ17 Transporter, basic amino acid/polyamine antiporter (APA)
           family (Precursor) OS=Bradyrhizobium sp. WSM1253
           GN=Bra1253DRAFT_06747 PE=4 SV=1
          Length = 477

 Score =  504 bits (1297), Expect = e-174
 Identities = 248/478 (51%), Positives = 339/478 (70%), Gaps = 6/478 (1%)

Query: 5   SSQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTL 64
           S QKL L ALTA+VVGSM+G GIFSLP+    +      +  W I   GM  LA VFQTL
Sbjct: 6   SVQKLSLFALTAMVVGSMVGSGIFSLPRTFGIATGPFGAVFAWCIAGGGMYALARVFQTL 65

Query: 65  ANRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKG 124
           A RKPELD GVYAYAK GFGDY GF SA+GYWI + +GNV Y+VL+ STLG FFP+FG G
Sbjct: 66  AERKPELDAGVYAYAKEGFGDYPGFLSAFGYWIGSCIGNVSYWVLIKSTLGAFFPVFGDG 125

Query: 125 DTVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTA 184
           +TV AI+ AS+ +W  HF++LRG+++AA INT+ T+AK+VP+ +FI I +FAFK D+F A
Sbjct: 126 NTVTAIIVASIGIWLFHFMILRGVQQAAAINTIVTIAKIVPILVFIAILIFAFKADLFRA 185

Query: 185 DIWGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLL 244
           + WG       S+ +Q+R  MLVTV+VF+GIEGAS++S  A++R+ VG AT++GF  V  
Sbjct: 186 NFWGGEGMPDKSLFDQIRATMLVTVFVFLGIEGASVYSRYAKERAHVGAATILGFAIVTT 245

Query: 245 LLVLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLL 304
           L+VLV +L    + + E+A ++ PSMA VLE VVGHWGA+ +S+GLL+S+LGA L+W L+
Sbjct: 246 LMVLVTMLPYAALPRAEIAGMRQPSMATVLEAVVGHWGAIFVSIGLLVSVLGAYLAWSLI 305

Query: 305 CAEIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTK 364
           CAE++ AA +   MP     ENAN+VPA ALWLTN+ VQ+F++  +++       D +  
Sbjct: 306 CAEVLSAAGRTKDMPALFGTENANKVPAAALWLTNVIVQLFVISTYWS------QDAFAL 359

Query: 365 MLLLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYAGGL 424
           ML L + M LIP+F  AAYGLLL  +GETYE  +R+R +D++ AG+A+ Y ++L+YA G+
Sbjct: 360 MLNLTSVMSLIPFFLVAAYGLLLVRRGETYEKSSRDRKRDMIFAGVALVYTLFLIYAAGM 419

Query: 425 KYLLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           K+LLLS +LYAPG  L+  A+ E    +FT IE  +F A  +GA V  +GL  G++T+
Sbjct: 420 KFLLLSLILYAPGTALYFWARLEQKARVFTAIEWGLFIAAALGAAVGIHGLATGYITI 477


>TR:E7B548_YERE1 E7B548 Arginine/ornithine antiporter ArcD OS=Yersinia
           enterocolitica subsp. palearctica serotype O:3 (strain
           DSM 13030 / CIP 106945 / Y11) GN=Y11_37671 PE=4 SV=1
          Length = 502

 Score =  504 bits (1298), Expect = e-173
 Identities = 262/510 (51%), Positives = 343/510 (67%), Gaps = 36/510 (7%)

Query: 1   MSQESSQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFV 60
           M+  S+ KL L ALT+LVVGSMIG GIFSLP     +      LI W I   GML LAFV
Sbjct: 1   MANSSTNKLSLPALTSLVVGSMIGAGIFSLPATFGRATGGFGALIAWCIAGGGMLMLAFV 60

Query: 61  FQTLANRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPI 120
           FQTLA RKP LD GV+ YAK GFGDY+GF+SA G+W    +GNV YFVL+ STLG FFPI
Sbjct: 61  FQTLAQRKPNLDSGVFIYAKEGFGDYLGFASALGFWAGTCIGNVSYFVLIKSTLGAFFPI 120

Query: 121 FGKGDTVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLD 180
           FG G+T+ A++ ASV+LW  H L+LRG+KEAA INT+ T AK++P+F+F+++ +FAFK D
Sbjct: 121 FGDGNTIPAVLVASVILWGFHILILRGVKEAAAINTIATFAKIIPIFIFVIVLIFAFKGD 180

Query: 181 IFTADIWGKSNPDL----------------------------GSVMNQVRNMMLVTVWVF 212
           +F  + WG   PD+                             S+ +QVR+ MLVTV+VF
Sbjct: 181 VFALNFWG--TPDVVKSVDLSHLNDYGYVGHAAAVMPVVAEPESLFSQVRSTMLVTVFVF 238

Query: 213 IGIEGASIFSSRAEKRSDVGKATVIGFITVLLLLVLVNVLSMGVMTQPELAKLQNPSMAL 272
           +GIEGAS++S  A++RS VG ATV+GFI VL LLVL+ +LS GV+ +P+LA L+ PSMA 
Sbjct: 239 LGIEGASVYSRYAKERSHVGIATVLGFIGVLCLLVLITMLSYGVLLRPDLAALRQPSMAG 298

Query: 273 VLEHVVGHWGAVLISVGLLISLLGALLSWVLLCAEIMFAAAKDHTMPEFLRRENANQVPA 332
           VLE +VG WGA+ ISVGL+IS+LGA LSW LL AE++F+AAK  +MP+    EN+N VP+
Sbjct: 299 VLEAIVGRWGAIFISVGLIISVLGAYLSWSLLAAEVLFSAAKSKSMPKIFGTENSNAVPS 358

Query: 333 NALWLTNICVQVFLVVVFFTSGDPDGMDPYTKMLLLATSMILIPYFWSAAYGLLLTLKGE 392
            A+WLTNI +QVFL++  FT         +   L L +S+ LIPY    AYGL L   GE
Sbjct: 359 AAVWLTNIFIQVFLILTLFTD------YAFQLALELTSSLTLIPYLLVGAYGLKLAWTGE 412

Query: 393 TYENDARERSKDLVIAGIAVAYAVWLLYAGGLKYLLLSALLYAPGAILFAKAKHEVGQPI 452
           TYE +AR   KDL+ A IA  Y+  ++YAGGLKYLLLSA++Y PG IL+  AK E  Q  
Sbjct: 413 TYETNARGHRKDLIFALIATFYSALMIYAGGLKYLLLSAIIYGPGTILYLIAKREQHQKA 472

Query: 453 FTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           F   E+++F  +++ A+ A Y +  G +T+
Sbjct: 473 FNTYERILFIVLIVAAVAAIYSIATGIITI 502


>TR:A1JJ60_YERE8 A1JJ60 Arginine/ornithine antiporter (Precursor) OS=Yersinia
           enterocolitica serotype O:8 / biotype 1B (strain 8081)
           GN=arcD PE=4 SV=1
          Length = 502

 Score =  504 bits (1298), Expect = e-173
 Identities = 262/510 (51%), Positives = 343/510 (67%), Gaps = 36/510 (7%)

Query: 1   MSQESSQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFV 60
           M+  S+ KL L ALT+LVVGSMIG GIFSLP     +      LI W I   GML LAFV
Sbjct: 1   MANSSTNKLSLPALTSLVVGSMIGAGIFSLPATFGRATGGFGALIAWCIAGGGMLMLAFV 60

Query: 61  FQTLANRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPI 120
           FQTLA RKP LD GV+ YAK GFGDY+GF+SA G+W    +GNV YFVL+ STLG FFPI
Sbjct: 61  FQTLAQRKPNLDSGVFIYAKEGFGDYLGFASALGFWAGTCIGNVSYFVLIKSTLGAFFPI 120

Query: 121 FGKGDTVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLD 180
           FG G+T+ A++ ASV+LW  H L+LRG+KEAA INT+ T AK++P+F+F+++ +FAFK D
Sbjct: 121 FGDGNTIPAVLVASVILWGFHILILRGVKEAAAINTIATFAKIIPIFIFVIVLIFAFKGD 180

Query: 181 IFTADIWGKSNPDL----------------------------GSVMNQVRNMMLVTVWVF 212
           +F  + WG   PD+                             S+ +QVR+ MLVTV+VF
Sbjct: 181 VFALNFWG--TPDVVKSVDLSHLNDYGYVGHAAAVMPVVAEPESLFSQVRSTMLVTVFVF 238

Query: 213 IGIEGASIFSSRAEKRSDVGKATVIGFITVLLLLVLVNVLSMGVMTQPELAKLQNPSMAL 272
           +GIEGAS++S  A++RS VG ATV+GFI VL LLVL+ +LS GV+ +P+LA L+ PSMA 
Sbjct: 239 LGIEGASVYSRYAKERSHVGIATVLGFIGVLCLLVLITMLSYGVLLRPDLAALRQPSMAG 298

Query: 273 VLEHVVGHWGAVLISVGLLISLLGALLSWVLLCAEIMFAAAKDHTMPEFLRRENANQVPA 332
           VLE +VG WGA+ ISVGL+IS+LGA LSW LL AE++F+AAK  +MP+    EN+N VP+
Sbjct: 299 VLEAIVGRWGAIFISVGLIISVLGAYLSWSLLAAEVLFSAAKSKSMPKIFGTENSNAVPS 358

Query: 333 NALWLTNICVQVFLVVVFFTSGDPDGMDPYTKMLLLATSMILIPYFWSAAYGLLLTLKGE 392
            A+WLTNI +QVFL++  FT         +   L L +S+ LIPY    AYGL L   GE
Sbjct: 359 AAVWLTNIFIQVFLILTLFTD------YAFQLALELTSSLTLIPYLLVGAYGLKLAWTGE 412

Query: 393 TYENDARERSKDLVIAGIAVAYAVWLLYAGGLKYLLLSALLYAPGAILFAKAKHEVGQPI 452
           TYE +AR   KDL+ A IA  Y+  ++YAGGLKYLLLSA++Y PG IL+  AK E  Q  
Sbjct: 413 TYETNARGHRKDLIFALIATFYSALMIYAGGLKYLLLSAIIYGPGTILYLIAKREQHQKA 472

Query: 453 FTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           F   E+++F  +++ A+ A Y +  G +T+
Sbjct: 473 FNTYERILFIVLIVAAVAAIYSIATGIITI 502


>TR:G4KBR7_YEREN G4KBR7 Arginine/ornithine antiporter OS=Yersinia enterocolitica
           subsp. palearctica PhRBD_Ye1 GN=IOK_05841 PE=4 SV=1
          Length = 502

 Score =  504 bits (1298), Expect = e-173
 Identities = 262/510 (51%), Positives = 343/510 (67%), Gaps = 36/510 (7%)

Query: 1   MSQESSQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFV 60
           M+  S+ KL L ALT+LVVGSMIG GIFSLP     +      LI W I   GML LAFV
Sbjct: 1   MANSSTNKLSLPALTSLVVGSMIGAGIFSLPATFGRATGGFGALIAWCIAGGGMLMLAFV 60

Query: 61  FQTLANRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPI 120
           FQTLA RKP LD GV+ YAK GFGDY+GF+SA G+W    +GNV YFVL+ STLG FFPI
Sbjct: 61  FQTLAQRKPNLDSGVFIYAKEGFGDYLGFASALGFWAGTCIGNVSYFVLIKSTLGAFFPI 120

Query: 121 FGKGDTVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLD 180
           FG G+T+ A++ ASV+LW  H L+LRG+KEAA INT+ T AK++P+F+F+++ +FAFK D
Sbjct: 121 FGDGNTIPAVLVASVILWGFHILILRGVKEAAAINTIATFAKIIPIFIFVIVLIFAFKGD 180

Query: 181 IFTADIWGKSNPDL----------------------------GSVMNQVRNMMLVTVWVF 212
           +F  + WG   PD+                             S+ +QVR+ MLVTV+VF
Sbjct: 181 VFALNFWG--TPDVVKSVDLSHLNDYGYVGHAAAVMPVVAEPESLFSQVRSTMLVTVFVF 238

Query: 213 IGIEGASIFSSRAEKRSDVGKATVIGFITVLLLLVLVNVLSMGVMTQPELAKLQNPSMAL 272
           +GIEGAS++S  A++RS VG ATV+GFI VL LLVL+ +LS GV+ +P+LA L+ PSMA 
Sbjct: 239 LGIEGASVYSRYAKERSHVGIATVLGFIGVLCLLVLITMLSYGVLLRPDLAALRQPSMAG 298

Query: 273 VLEHVVGHWGAVLISVGLLISLLGALLSWVLLCAEIMFAAAKDHTMPEFLRRENANQVPA 332
           VLE +VG WGA+ ISVGL+IS+LGA LSW LL AE++F+AAK  +MP+    EN+N VP+
Sbjct: 299 VLEAIVGRWGAIFISVGLIISVLGAYLSWSLLAAEVLFSAAKSKSMPKIFGTENSNAVPS 358

Query: 333 NALWLTNICVQVFLVVVFFTSGDPDGMDPYTKMLLLATSMILIPYFWSAAYGLLLTLKGE 392
            A+WLTNI +QVFL++  FT         +   L L +S+ LIPY    AYGL L   GE
Sbjct: 359 AAVWLTNIFIQVFLILTLFTD------YAFQLALELTSSLTLIPYLLVGAYGLKLAWTGE 412

Query: 393 TYENDARERSKDLVIAGIAVAYAVWLLYAGGLKYLLLSALLYAPGAILFAKAKHEVGQPI 452
           TYE +AR   KDL+ A IA  Y+  ++YAGGLKYLLLSA++Y PG IL+  AK E  Q  
Sbjct: 413 TYETNARGHRKDLIFALIATFYSALMIYAGGLKYLLLSAIIYGPGTILYLIAKREQHQKA 472

Query: 453 FTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           F   E+++F  +++ A+ A Y +  G +T+
Sbjct: 473 FNTYERILFIVLIVAAVAAIYSIATGIITI 502


>TR:F4MW91_YEREN F4MW91 Arginine/ornithine antiporter OS=Yersinia enterocolitica
           W22703 GN=arcD PE=4 SV=1
          Length = 502

 Score =  504 bits (1298), Expect = e-173
 Identities = 262/510 (51%), Positives = 343/510 (67%), Gaps = 36/510 (7%)

Query: 1   MSQESSQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFV 60
           M+  S+ KL L ALT+LVVGSMIG GIFSLP     +      LI W I   GML LAFV
Sbjct: 1   MANSSTNKLSLPALTSLVVGSMIGAGIFSLPATFGRATGGFGALIAWCIAGGGMLMLAFV 60

Query: 61  FQTLANRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPI 120
           FQTLA RKP LD GV+ YAK GFGDY+GF+SA G+W    +GNV YFVL+ STLG FFPI
Sbjct: 61  FQTLAQRKPNLDSGVFIYAKEGFGDYLGFASALGFWAGTCIGNVSYFVLIKSTLGAFFPI 120

Query: 121 FGKGDTVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLD 180
           FG G+T+ A++ ASV+LW  H L+LRG+KEAA INT+ T AK++P+F+F+++ +FAFK D
Sbjct: 121 FGDGNTIPAVLVASVILWGFHILILRGVKEAAAINTIATFAKIIPIFIFVIVLIFAFKGD 180

Query: 181 IFTADIWGKSNPDL----------------------------GSVMNQVRNMMLVTVWVF 212
           +F  + WG   PD+                             S+ +QVR+ MLVTV+VF
Sbjct: 181 VFALNFWG--TPDVVKSVDLSHLNDYGYVGHAAAVMPVVAEPESLFSQVRSTMLVTVFVF 238

Query: 213 IGIEGASIFSSRAEKRSDVGKATVIGFITVLLLLVLVNVLSMGVMTQPELAKLQNPSMAL 272
           +GIEGAS++S  A++RS VG ATV+GFI VL LLVL+ +LS GV+ +P+LA L+ PSMA 
Sbjct: 239 LGIEGASVYSRYAKERSHVGIATVLGFIGVLCLLVLITMLSYGVLLRPDLAALRQPSMAG 298

Query: 273 VLEHVVGHWGAVLISVGLLISLLGALLSWVLLCAEIMFAAAKDHTMPEFLRRENANQVPA 332
           VLE +VG WGA+ ISVGL+IS+LGA LSW LL AE++F+AAK  +MP+    EN+N VP+
Sbjct: 299 VLEAIVGRWGAIFISVGLIISVLGAYLSWSLLAAEVLFSAAKSKSMPKIFGTENSNAVPS 358

Query: 333 NALWLTNICVQVFLVVVFFTSGDPDGMDPYTKMLLLATSMILIPYFWSAAYGLLLTLKGE 392
            A+WLTNI +QVFL++  FT         +   L L +S+ LIPY    AYGL L   GE
Sbjct: 359 AAVWLTNIFIQVFLILTLFTD------YAFQLALELTSSLTLIPYLLVGAYGLKLAWTGE 412

Query: 393 TYENDARERSKDLVIAGIAVAYAVWLLYAGGLKYLLLSALLYAPGAILFAKAKHEVGQPI 452
           TYE +AR   KDL+ A IA  Y+  ++YAGGLKYLLLSA++Y PG IL+  AK E  Q  
Sbjct: 413 TYETNARGHRKDLIFALIATFYSALMIYAGGLKYLLLSAIIYGPGTILYLIAKREQHQKA 472

Query: 453 FTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           F   E+++F  +++ A+ A Y +  G +T+
Sbjct: 473 FNTYERILFIVLIVAAVAAIYSIATGIITI 502


>TR:A1JM03_YERE8 A1JM03 Probable amino acid permease (Precursor) OS=Yersinia
           enterocolitica serotype O:8 / biotype 1B (strain 8081)
           GN=YE1750 PE=4 SV=1
          Length = 500

 Score =  504 bits (1297), Expect = e-173
 Identities = 265/506 (52%), Positives = 343/506 (67%), Gaps = 30/506 (5%)

Query: 1   MSQESSQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFV 60
           M+  S++KL L +LT+LVVGSMIG GIFSLP     +      LI W I   GMLTLAFV
Sbjct: 1   MAASSNKKLSLWSLTSLVVGSMIGAGIFSLPATFGRATGGFGALIAWVIAGGGMLTLAFV 60

Query: 61  FQTLANRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPI 120
           FQTLA RKPELD GVY YAK GFGDY GF+SA G+W  A +G+V YFVL+ STLG FFP+
Sbjct: 61  FQTLAQRKPELDSGVYIYAKTGFGDYAGFASAIGFWAGACIGSVSYFVLIKSTLGAFFPL 120

Query: 121 FGKGDTVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLD 180
           FG G+T++A++ AS +LW+ HF+VLRGIKEAA INT+ T AKV+P+F+FI++  FAF  D
Sbjct: 121 FGDGNTLSAVLIASFILWSFHFMVLRGIKEAAAINTIATFAKVIPIFIFIIVLAFAFHTD 180

Query: 181 IFTADIWGKSN----------PDLG--------------SVMNQVRNMMLVTVWVFIGIE 216
            F  + WG              D G              S+ +QVR+ MLVTV+VF+GIE
Sbjct: 181 TFALNFWGTQPLGAVGDLTHLDDYGYTGHAALEIGSGSESLFSQVRSTMLVTVFVFVGIE 240

Query: 217 GASIFSSRAEKRSDVGKATVIGFITVLLLLVLVNVLSMGVMTQPELAKLQNPSMALVLEH 276
           GAS++S  A++R  VG ATV+GFI VL LLVLV +LS GV+ +P+LA L+ PSMA VLEH
Sbjct: 241 GASVYSRYAKERKHVGIATVLGFIGVLCLLVLVTMLSYGVLLRPDLAALRQPSMAGVLEH 300

Query: 277 VVGHWGAVLISVGLLISLLGALLSWVLLCAEIMFAAAKDHTMPEFLRRENANQVPANALW 336
           +VG WGA+ IS+GL+IS++GA LSW LL AE ++ AAK H MP  L  EN + VP+ A+W
Sbjct: 301 IVGRWGAIFISIGLIISVMGAYLSWTLLAAEALYCAAKSHIMPSVLATENKHGVPSAAVW 360

Query: 337 LTNICVQVFLVVVFFTSGDPDGMDPYTKMLLLATSMILIPYFWSAAYGLLLTLKGETYEN 396
           ++NI +Q+FL+V  FT         +   L L +S++LIPY   AAYGL L    ETY  
Sbjct: 361 MSNIFIQLFLIVTLFTE------YAFQLALELTSSLVLIPYLLVAAYGLKLAWTRETYSV 414

Query: 397 DARERSKDLVIAGIAVAYAVWLLYAGGLKYLLLSALLYAPGAILFAKAKHEVGQPIFTGI 456
            A++  KD +IA IA  YAV ++YAGGLKY+LLSA++Y PG +LF  AK E  + +F+ I
Sbjct: 415 GAKDHKKDFIIALIATFYAVLMVYAGGLKYILLSAVIYGPGTLLFIIAKREQKKLVFSAI 474

Query: 457 EKLIFAAVVIGALVAAYGLYDGFLTL 482
           EK  FA  +I A+ A Y L  G +T+
Sbjct: 475 EKCAFAVALIAAVAALYSLATGIITV 500


>TR:G8VN41_PROAA G8VN41 Arginine/ornithine antiporter ArcD OS=Propionibacterium
           acnes TypeIA2 P.acn31 GN=TIA2EST36_02895 PE=4 SV=1
          Length = 493

 Score =  503 bits (1296), Expect = e-173
 Identities = 261/477 (54%), Positives = 340/477 (71%), Gaps = 9/477 (1%)

Query: 8   KLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLANR 67
           KL   A+ +LVVGSMIGGGIFSLPQN+AA+A  G ++IGW IT +GM+ LA V+Q LA R
Sbjct: 23  KLSFPAMLSLVVGSMIGGGIFSLPQNIAAAASPGPMVIGWTITGIGMICLAMVYQKLAIR 82

Query: 68  KPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDTV 127
           +P+LD G+YAYAKAGFGD++GF+SAWGYW+SA +GNVGY VLLFST+G F P F  G+TV
Sbjct: 83  RPDLDNGIYAYAKAGFGDFIGFNSAWGYWLSALIGNVGYLVLLFSTVGKFVPAFAGGNTV 142

Query: 128 AAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTADIW 187
            A++ ASVLLW  H LVL G++ AAF+NT+ T+AK+VPL  FI IC  AF + +FT D W
Sbjct: 143 WAVLAASVLLWLTHALVLAGVRTAAFVNTIATIAKIVPLITFIAICAVAFDVGVFTEDFW 202

Query: 188 GKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLLLV 247
           G S+  LGSV  Q ++MMLVTVWVFIGIEGASI+S RA KRSDVGKATV GF+ VL+LL+
Sbjct: 203 G-SHAGLGSVFAQTKSMMLVTVWVFIGIEGASIYSKRARKRSDVGKATVGGFLFVLVLLI 261

Query: 248 LVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLCAE 307
            VN+LSMG+M + +LA L + SM  VL  VVG WG+VL+S G++ISLLGALL+W+LLC E
Sbjct: 262 GVNLLSMGIMHRAKLAGLPDASMGDVLSSVVGPWGSVLVSAGVIISLLGALLAWILLCGE 321

Query: 308 IMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKMLL 367
            M    +D TMP+   R N ++ PA ALW+TNI  Q+ LV+     G       Y  M  
Sbjct: 322 TMQVPGEDGTMPKLFGRINKHEAPAPALWITNIVSQICLVMTVLWDG------AYLAMAT 375

Query: 368 LATSMILIPYFWSAAYGLLLTLKGETYENDAR-ERSKDLVIAGIAVAYAVWLLYAGGLKY 426
           LA ++IL+PY  SAA+ L + +KGETYEN  R +R +D V+A +A  Y +WL+ A G   
Sbjct: 376 LAAALILVPYLLSAAFALKMVIKGETYENGPRSQRVRDAVVATVATLYGIWLVVAAGTDA 435

Query: 427 LLLSALLYAPGAILFAKAKHEV-GQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           L+L+ALLY PGA +F  AK E+  + IF   E  +   + + ++V+   +  G L+L
Sbjct: 436 LMLAALLYLPGAAVFVWAKRELRAKRIFKPYEIGVLVLLALISVVSIISIVTGRLSL 492


>TR:G7UAA4_PROAA G7UAA4 Arginine/ornithine antiporter ArcD OS=Propionibacterium
           acnes ATCC 11828 GN=TIIST44_11555 PE=4 SV=1
          Length = 518

 Score =  504 bits (1298), Expect = e-173
 Identities = 263/477 (55%), Positives = 339/477 (71%), Gaps = 9/477 (1%)

Query: 8   KLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLANR 67
           KL   A+ +LVVGSMIGGGIFSLPQN+AA+A  G ++IGW IT +GM+ LA V+Q LA R
Sbjct: 48  KLSFPAMLSLVVGSMIGGGIFSLPQNIAAAASPGPMVIGWTITGIGMICLAMVYQKLAIR 107

Query: 68  KPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDTV 127
           +P+LD G+YAYAKAGFGD++GF+SAWGYW+SA +GNVGY VLLFST+G F P F  G+TV
Sbjct: 108 RPDLDNGIYAYAKAGFGDFIGFNSAWGYWLSALIGNVGYLVLLFSTVGKFVPAFAGGNTV 167

Query: 128 AAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTADIW 187
            A++ ASVLLW  H LVL G++ AAF+NT+ T+AK+VPL  FI IC  AF + +FT D W
Sbjct: 168 WAVLAASVLLWLTHALVLAGVRTAAFVNTIATIAKIVPLITFIAICAVAFDVGVFTEDFW 227

Query: 188 GKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLLLV 247
           G S+  LGSV  Q ++MMLVTVWVFIGIEGASI+S RA KRSDVGKATV GF+ VL+LL+
Sbjct: 228 G-SHAGLGSVFAQTKSMMLVTVWVFIGIEGASIYSKRARKRSDVGKATVGGFLFVLVLLI 286

Query: 248 LVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLCAE 307
            VN+LSMG+M + +LA L + SM  VL  VVG WG+VL+S G++ISLLGALL+W+LLC E
Sbjct: 287 GVNLLSMGIMRRAKLAGLPDASMGDVLSSVVGPWGSVLVSAGVIISLLGALLAWILLCGE 346

Query: 308 IMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKMLL 367
            M    +D TMP+   R N ++ PA ALW+TNI  Q+ LV+     G       Y  M  
Sbjct: 347 TMQVPGEDGTMPKLFGRINKHEAPAPALWITNIVSQICLVMTVLWDG------AYLAMAT 400

Query: 368 LATSMILIPYFWSAAYGLLLTLKGETYENDAR-ERSKDLVIAGIAVAYAVWLLYAGGLKY 426
           LA ++IL+PY  SAA+ L + +KGETYEN  R +R +D V+A IA  Y +WL+ A G   
Sbjct: 401 LAAALILVPYLLSAAFALKMVIKGETYENGPRSQRVRDAVVATIATLYGIWLVVAAGADA 460

Query: 427 LLLSALLYAPGAILFAKAKHEV-GQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           L+L+ALLY PGA +F  AK E   + IF   E  +   + + ++VA   +  G L+L
Sbjct: 461 LMLAALLYLPGAAVFVWAKREQRAKRIFKPYEIGVLVLLALISVVAIISIVTGRLSL 517


>TR:F1U5T1_PROAA F1U5T1 Arginine/ornithine antiporter OS=Propionibacterium acnes
           HL103PA1 GN=HMPREF9341_02139 PE=4 SV=1
          Length = 518

 Score =  504 bits (1298), Expect = e-173
 Identities = 263/477 (55%), Positives = 339/477 (71%), Gaps = 9/477 (1%)

Query: 8   KLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLANR 67
           KL   A+ +LVVGSMIGGGIFSLPQN+AA+A  G ++IGW IT +GM+ LA V+Q LA R
Sbjct: 48  KLSFPAMLSLVVGSMIGGGIFSLPQNIAAAASPGPMVIGWTITGIGMICLAMVYQKLAIR 107

Query: 68  KPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDTV 127
           +P+LD G+YAYAKAGFGD++GF+SAWGYW+SA +GNVGY VLLFST+G F P F  G+TV
Sbjct: 108 RPDLDNGIYAYAKAGFGDFIGFNSAWGYWLSALIGNVGYLVLLFSTVGKFVPAFAGGNTV 167

Query: 128 AAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTADIW 187
            A++ ASVLLW  H LVL G++ AAF+NT+ T+AK+VPL  FI IC  AF + +FT D W
Sbjct: 168 WAVLAASVLLWLTHALVLAGVRTAAFVNTIATIAKIVPLITFIAICAVAFDVGVFTEDFW 227

Query: 188 GKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLLLV 247
           G S+  LGSV  Q ++MMLVTVWVFIGIEGASI+S RA KRSDVGKATV GF+ VL+LL+
Sbjct: 228 G-SHAGLGSVFAQTKSMMLVTVWVFIGIEGASIYSKRARKRSDVGKATVGGFLFVLVLLI 286

Query: 248 LVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLCAE 307
            VN+LSMG+M + +LA L + SM  VL  VVG WG+VL+S G++ISLLGALL+W+LLC E
Sbjct: 287 GVNLLSMGIMRRAKLAGLPDASMGDVLSSVVGPWGSVLVSAGVIISLLGALLAWILLCGE 346

Query: 308 IMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKMLL 367
            M    +D TMP+   R N ++ PA ALW+TNI  Q+ LV+     G       Y  M  
Sbjct: 347 TMQVPGEDGTMPKLFGRINKHEAPAPALWITNIVSQICLVMTVLWDG------AYLAMAT 400

Query: 368 LATSMILIPYFWSAAYGLLLTLKGETYENDAR-ERSKDLVIAGIAVAYAVWLLYAGGLKY 426
           LA ++IL+PY  SAA+ L + +KGETYEN  R +R +D V+A IA  Y +WL+ A G   
Sbjct: 401 LAAALILVPYLLSAAFALKMVIKGETYENGPRSQRVRDAVVATIATLYGIWLVVAAGADA 460

Query: 427 LLLSALLYAPGAILFAKAKHEV-GQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           L+L+ALLY PGA +F  AK E   + IF   E  +   + + ++VA   +  G L+L
Sbjct: 461 LMLAALLYLPGAAVFVWAKREQRAKRIFKPYEIGVLVLLALISVVAIISIVTGRLSL 517


>TR:E6DAD3_PROAA E6DAD3 Arginine/ornithine antiporter OS=Propionibacterium acnes
           HL110PA4 GN=HMPREF9578_02557 PE=4 SV=1
          Length = 518

 Score =  504 bits (1298), Expect = e-173
 Identities = 263/477 (55%), Positives = 339/477 (71%), Gaps = 9/477 (1%)

Query: 8   KLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLANR 67
           KL   A+ +LVVGSMIGGGIFSLPQN+AA+A  G ++IGW IT +GM+ LA V+Q LA R
Sbjct: 48  KLSFPAMLSLVVGSMIGGGIFSLPQNIAAAASPGPMVIGWTITGIGMICLAMVYQKLAIR 107

Query: 68  KPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDTV 127
           +P+LD G+YAYAKAGFGD++GF+SAWGYW+SA +GNVGY VLLFST+G F P F  G+TV
Sbjct: 108 RPDLDNGIYAYAKAGFGDFIGFNSAWGYWLSALIGNVGYLVLLFSTVGKFVPAFAGGNTV 167

Query: 128 AAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTADIW 187
            A++ ASVLLW  H LVL G++ AAF+NT+ T+AK+VPL  FI IC  AF + +FT D W
Sbjct: 168 WAVLAASVLLWLTHALVLAGVRTAAFVNTIATIAKIVPLITFIAICAVAFDVGVFTEDFW 227

Query: 188 GKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLLLV 247
           G S+  LGSV  Q ++MMLVTVWVFIGIEGASI+S RA KRSDVGKATV GF+ VL+LL+
Sbjct: 228 G-SHAGLGSVFAQTKSMMLVTVWVFIGIEGASIYSKRARKRSDVGKATVGGFLFVLVLLI 286

Query: 248 LVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLCAE 307
            VN+LSMG+M + +LA L + SM  VL  VVG WG+VL+S G++ISLLGALL+W+LLC E
Sbjct: 287 GVNLLSMGIMRRAKLAGLPDASMGDVLSSVVGPWGSVLVSAGVIISLLGALLAWILLCGE 346

Query: 308 IMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKMLL 367
            M    +D TMP+   R N ++ PA ALW+TNI  Q+ LV+     G       Y  M  
Sbjct: 347 TMQVPGEDGTMPKLFGRINKHEAPAPALWITNIVSQICLVMTVLWDG------AYLAMAT 400

Query: 368 LATSMILIPYFWSAAYGLLLTLKGETYENDAR-ERSKDLVIAGIAVAYAVWLLYAGGLKY 426
           LA ++IL+PY  SAA+ L + +KGETYEN  R +R +D V+A IA  Y +WL+ A G   
Sbjct: 401 LAAALILVPYLLSAAFALKMVIKGETYENGPRSQRVRDAVVATIATLYGIWLVVAAGADA 460

Query: 427 LLLSALLYAPGAILFAKAKHEV-GQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           L+L+ALLY PGA +F  AK E   + IF   E  +   + + ++VA   +  G L+L
Sbjct: 461 LMLAALLYLPGAAVFVWAKREQRAKRIFKPYEIGVLVLLALISVVAIISIVTGRLSL 517


>TR:E6D1B9_PROAA E6D1B9 Arginine/ornithine antiporter OS=Propionibacterium acnes
           HL060PA1 GN=HMPREF9582_02552 PE=4 SV=1
          Length = 518

 Score =  504 bits (1298), Expect = e-173
 Identities = 263/477 (55%), Positives = 339/477 (71%), Gaps = 9/477 (1%)

Query: 8   KLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLANR 67
           KL   A+ +LVVGSMIGGGIFSLPQN+AA+A  G ++IGW IT +GM+ LA V+Q LA R
Sbjct: 48  KLSFPAMLSLVVGSMIGGGIFSLPQNIAAAASPGPMVIGWTITGIGMICLAMVYQKLAIR 107

Query: 68  KPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDTV 127
           +P+LD G+YAYAKAGFGD++GF+SAWGYW+SA +GNVGY VLLFST+G F P F  G+TV
Sbjct: 108 RPDLDNGIYAYAKAGFGDFIGFNSAWGYWLSALIGNVGYLVLLFSTVGKFVPAFAGGNTV 167

Query: 128 AAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTADIW 187
            A++ ASVLLW  H LVL G++ AAF+NT+ T+AK+VPL  FI IC  AF + +FT D W
Sbjct: 168 WAVLAASVLLWLTHALVLAGVRTAAFVNTIATIAKIVPLITFIAICAVAFDVGVFTEDFW 227

Query: 188 GKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLLLV 247
           G S+  LGSV  Q ++MMLVTVWVFIGIEGASI+S RA KRSDVGKATV GF+ VL+LL+
Sbjct: 228 G-SHAGLGSVFAQTKSMMLVTVWVFIGIEGASIYSKRARKRSDVGKATVGGFLFVLVLLI 286

Query: 248 LVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLCAE 307
            VN+LSMG+M + +LA L + SM  VL  VVG WG+VL+S G++ISLLGALL+W+LLC E
Sbjct: 287 GVNLLSMGIMRRAKLAGLPDASMGDVLSSVVGPWGSVLVSAGVIISLLGALLAWILLCGE 346

Query: 308 IMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKMLL 367
            M    +D TMP+   R N ++ PA ALW+TNI  Q+ LV+     G       Y  M  
Sbjct: 347 TMQVPGEDGTMPKLFGRINKHEAPAPALWITNIVSQICLVMTVLWDG------AYLAMAT 400

Query: 368 LATSMILIPYFWSAAYGLLLTLKGETYENDAR-ERSKDLVIAGIAVAYAVWLLYAGGLKY 426
           LA ++IL+PY  SAA+ L + +KGETYEN  R +R +D V+A IA  Y +WL+ A G   
Sbjct: 401 LAAALILVPYLLSAAFALKMVIKGETYENGPRSQRVRDAVVATIATLYGIWLVVAAGADA 460

Query: 427 LLLSALLYAPGAILFAKAKHEV-GQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           L+L+ALLY PGA +F  AK E   + IF   E  +   + + ++VA   +  G L+L
Sbjct: 461 LMLAALLYLPGAAVFVWAKREQRAKRIFKPYEIGVLVLLALISVVAIISIVTGRLSL 517


>TR:E6CNE8_PROAA E6CNE8 Arginine/ornithine antiporter OS=Propionibacterium acnes
           HL050PA2 GN=HMPREF9599_00533 PE=4 SV=1
          Length = 518

 Score =  504 bits (1298), Expect = e-173
 Identities = 263/477 (55%), Positives = 339/477 (71%), Gaps = 9/477 (1%)

Query: 8   KLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLANR 67
           KL   A+ +LVVGSMIGGGIFSLPQN+AA+A  G ++IGW IT +GM+ LA V+Q LA R
Sbjct: 48  KLSFPAMLSLVVGSMIGGGIFSLPQNIAAAASPGPMVIGWTITGIGMICLAMVYQKLAIR 107

Query: 68  KPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDTV 127
           +P+LD G+YAYAKAGFGD++GF+SAWGYW+SA +GNVGY VLLFST+G F P F  G+TV
Sbjct: 108 RPDLDNGIYAYAKAGFGDFIGFNSAWGYWLSALIGNVGYLVLLFSTVGKFVPAFAGGNTV 167

Query: 128 AAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTADIW 187
            A++ ASVLLW  H LVL G++ AAF+NT+ T+AK+VPL  FI IC  AF + +FT D W
Sbjct: 168 WAVLAASVLLWLTHALVLAGVRTAAFVNTIATIAKIVPLITFIAICAVAFDVGVFTEDFW 227

Query: 188 GKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLLLV 247
           G S+  LGSV  Q ++MMLVTVWVFIGIEGASI+S RA KRSDVGKATV GF+ VL+LL+
Sbjct: 228 G-SHAGLGSVFAQTKSMMLVTVWVFIGIEGASIYSKRARKRSDVGKATVGGFLFVLVLLI 286

Query: 248 LVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLCAE 307
            VN+LSMG+M + +LA L + SM  VL  VVG WG+VL+S G++ISLLGALL+W+LLC E
Sbjct: 287 GVNLLSMGIMRRAKLAGLPDASMGDVLSSVVGPWGSVLVSAGVIISLLGALLAWILLCGE 346

Query: 308 IMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKMLL 367
            M    +D TMP+   R N ++ PA ALW+TNI  Q+ LV+     G       Y  M  
Sbjct: 347 TMQVPGEDGTMPKLFGRINKHEAPAPALWITNIVSQICLVMTVLWDG------AYLAMAT 400

Query: 368 LATSMILIPYFWSAAYGLLLTLKGETYENDAR-ERSKDLVIAGIAVAYAVWLLYAGGLKY 426
           LA ++IL+PY  SAA+ L + +KGETYEN  R +R +D V+A IA  Y +WL+ A G   
Sbjct: 401 LAAALILVPYLLSAAFALKMVIKGETYENGPRSQRVRDAVVATIATLYGIWLVVAAGADA 460

Query: 427 LLLSALLYAPGAILFAKAKHEV-GQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           L+L+ALLY PGA +F  AK E   + IF   E  +   + + ++VA   +  G L+L
Sbjct: 461 LMLAALLYLPGAAVFVWAKREQRAKRIFKPYEIGVLVLLALISVVAIISIVTGRLSL 517


>TR:E4GXX4_PROAA E4GXX4 Arginine/ornithine antiporter OS=Propionibacterium acnes
           HL082PA2 GN=HMPREF9619_01167 PE=4 SV=1
          Length = 518

 Score =  504 bits (1298), Expect = e-173
 Identities = 263/477 (55%), Positives = 339/477 (71%), Gaps = 9/477 (1%)

Query: 8   KLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLANR 67
           KL   A+ +LVVGSMIGGGIFSLPQN+AA+A  G ++IGW IT +GM+ LA V+Q LA R
Sbjct: 48  KLSFPAMLSLVVGSMIGGGIFSLPQNIAAAASPGPMVIGWTITGIGMICLAMVYQKLAIR 107

Query: 68  KPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDTV 127
           +P+LD G+YAYAKAGFGD++GF+SAWGYW+SA +GNVGY VLLFST+G F P F  G+TV
Sbjct: 108 RPDLDNGIYAYAKAGFGDFIGFNSAWGYWLSALIGNVGYLVLLFSTVGKFVPAFAGGNTV 167

Query: 128 AAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTADIW 187
            A++ ASVLLW  H LVL G++ AAF+NT+ T+AK+VPL  FI IC  AF + +FT D W
Sbjct: 168 WAVLAASVLLWLTHALVLAGVRTAAFVNTIATIAKIVPLITFIAICAVAFDVGVFTEDFW 227

Query: 188 GKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLLLV 247
           G S+  LGSV  Q ++MMLVTVWVFIGIEGASI+S RA KRSDVGKATV GF+ VL+LL+
Sbjct: 228 G-SHAGLGSVFAQTKSMMLVTVWVFIGIEGASIYSKRARKRSDVGKATVGGFLFVLVLLI 286

Query: 248 LVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLCAE 307
            VN+LSMG+M + +LA L + SM  VL  VVG WG+VL+S G++ISLLGALL+W+LLC E
Sbjct: 287 GVNLLSMGIMRRAKLAGLPDASMGDVLSSVVGPWGSVLVSAGVIISLLGALLAWILLCGE 346

Query: 308 IMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKMLL 367
            M    +D TMP+   R N ++ PA ALW+TNI  Q+ LV+     G       Y  M  
Sbjct: 347 TMQVPGEDGTMPKLFGRINKHEAPAPALWITNIVSQICLVMTVLWDG------AYLAMAT 400

Query: 368 LATSMILIPYFWSAAYGLLLTLKGETYENDAR-ERSKDLVIAGIAVAYAVWLLYAGGLKY 426
           LA ++IL+PY  SAA+ L + +KGETYEN  R +R +D V+A IA  Y +WL+ A G   
Sbjct: 401 LAAALILVPYLLSAAFALKMVIKGETYENGPRSQRVRDAVVATIATLYGIWLVVAAGADA 460

Query: 427 LLLSALLYAPGAILFAKAKHEV-GQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           L+L+ALLY PGA +F  AK E   + IF   E  +   + + ++VA   +  G L+L
Sbjct: 461 LMLAALLYLPGAAVFVWAKREQRAKRIFKPYEIGVLVLLALISVVAIISIVTGRLSL 517


>TR:E4BD25_PROAA E4BD25 Arginine/ornithine antiporter OS=Propionibacterium acnes
           HL110PA3 GN=HMPREF9577_02522 PE=4 SV=1
          Length = 518

 Score =  504 bits (1298), Expect = e-173
 Identities = 263/477 (55%), Positives = 339/477 (71%), Gaps = 9/477 (1%)

Query: 8   KLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLANR 67
           KL   A+ +LVVGSMIGGGIFSLPQN+AA+A  G ++IGW IT +GM+ LA V+Q LA R
Sbjct: 48  KLSFPAMLSLVVGSMIGGGIFSLPQNIAAAASPGPMVIGWTITGIGMICLAMVYQKLAIR 107

Query: 68  KPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDTV 127
           +P+LD G+YAYAKAGFGD++GF+SAWGYW+SA +GNVGY VLLFST+G F P F  G+TV
Sbjct: 108 RPDLDNGIYAYAKAGFGDFIGFNSAWGYWLSALIGNVGYLVLLFSTVGKFVPAFAGGNTV 167

Query: 128 AAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTADIW 187
            A++ ASVLLW  H LVL G++ AAF+NT+ T+AK+VPL  FI IC  AF + +FT D W
Sbjct: 168 WAVLAASVLLWLTHALVLAGVRTAAFVNTIATIAKIVPLITFIAICAVAFDVGVFTEDFW 227

Query: 188 GKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLLLV 247
           G S+  LGSV  Q ++MMLVTVWVFIGIEGASI+S RA KRSDVGKATV GF+ VL+LL+
Sbjct: 228 G-SHAGLGSVFAQTKSMMLVTVWVFIGIEGASIYSKRARKRSDVGKATVGGFLFVLVLLI 286

Query: 248 LVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLCAE 307
            VN+LSMG+M + +LA L + SM  VL  VVG WG+VL+S G++ISLLGALL+W+LLC E
Sbjct: 287 GVNLLSMGIMRRAKLAGLPDASMGDVLSSVVGPWGSVLVSAGVIISLLGALLAWILLCGE 346

Query: 308 IMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKMLL 367
            M    +D TMP+   R N ++ PA ALW+TNI  Q+ LV+     G       Y  M  
Sbjct: 347 TMQVPGEDGTMPKLFGRINKHEAPAPALWITNIVSQICLVMTVLWDG------AYLAMAT 400

Query: 368 LATSMILIPYFWSAAYGLLLTLKGETYENDAR-ERSKDLVIAGIAVAYAVWLLYAGGLKY 426
           LA ++IL+PY  SAA+ L + +KGETYEN  R +R +D V+A IA  Y +WL+ A G   
Sbjct: 401 LAAALILVPYLLSAAFALKMVIKGETYENGPRSQRVRDAVVATIATLYGIWLVVAAGADA 460

Query: 427 LLLSALLYAPGAILFAKAKHEV-GQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           L+L+ALLY PGA +F  AK E   + IF   E  +   + + ++VA   +  G L+L
Sbjct: 461 LMLAALLYLPGAAVFVWAKREQRAKRIFKPYEIGVLVLLALISVVAIISIVTGRLSL 517


>TR:D1YBM9_PROAA D1YBM9 Arginine/ornithine antiporter OS=Propionibacterium acnes
           J139 GN=arcD PE=4 SV=1
          Length = 518

 Score =  504 bits (1298), Expect = e-173
 Identities = 263/477 (55%), Positives = 339/477 (71%), Gaps = 9/477 (1%)

Query: 8   KLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLANR 67
           KL   A+ +LVVGSMIGGGIFSLPQN+AA+A  G ++IGW IT +GM+ LA V+Q LA R
Sbjct: 48  KLSFPAMLSLVVGSMIGGGIFSLPQNIAAAASPGPMVIGWTITGIGMICLAMVYQKLAIR 107

Query: 68  KPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDTV 127
           +P+LD G+YAYAKAGFGD++GF+SAWGYW+SA +GNVGY VLLFST+G F P F  G+TV
Sbjct: 108 RPDLDNGIYAYAKAGFGDFIGFNSAWGYWLSALIGNVGYLVLLFSTVGKFVPAFAGGNTV 167

Query: 128 AAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTADIW 187
            A++ ASVLLW  H LVL G++ AAF+NT+ T+AK+VPL  FI IC  AF + +FT D W
Sbjct: 168 WAVLAASVLLWLTHALVLAGVRTAAFVNTIATIAKIVPLITFIAICAVAFDVGVFTEDFW 227

Query: 188 GKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLLLV 247
           G S+  LGSV  Q ++MMLVTVWVFIGIEGASI+S RA KRSDVGKATV GF+ VL+LL+
Sbjct: 228 G-SHAGLGSVFAQTKSMMLVTVWVFIGIEGASIYSKRARKRSDVGKATVGGFLFVLVLLI 286

Query: 248 LVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLCAE 307
            VN+LSMG+M + +LA L + SM  VL  VVG WG+VL+S G++ISLLGALL+W+LLC E
Sbjct: 287 GVNLLSMGIMRRAKLAGLPDASMGDVLSSVVGPWGSVLVSAGVIISLLGALLAWILLCGE 346

Query: 308 IMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKMLL 367
            M    +D TMP+   R N ++ PA ALW+TNI  Q+ LV+     G       Y  M  
Sbjct: 347 TMQVPGEDGTMPKLFGRINKHEAPAPALWITNIVSQICLVMTVLWDG------AYLAMAT 400

Query: 368 LATSMILIPYFWSAAYGLLLTLKGETYENDAR-ERSKDLVIAGIAVAYAVWLLYAGGLKY 426
           LA ++IL+PY  SAA+ L + +KGETYEN  R +R +D V+A IA  Y +WL+ A G   
Sbjct: 401 LAAALILVPYLLSAAFALKMVIKGETYENGPRSQRVRDAVVATIATLYGIWLVVAAGADA 460

Query: 427 LLLSALLYAPGAILFAKAKHEV-GQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           L+L+ALLY PGA +F  AK E   + IF   E  +   + + ++VA   +  G L+L
Sbjct: 461 LMLAALLYLPGAAVFVWAKREQRAKRIFKPYEIGVLVLLALISVVAIISIVTGRLSL 517


>TR:C4SY29_YERIN C4SY29 Arginine/ornithine antiporter OS=Yersinia intermedia ATCC
           29909 GN=yinte0001_15210 PE=4 SV=1
          Length = 504

 Score =  503 bits (1295), Expect = e-173
 Identities = 260/506 (51%), Positives = 344/506 (67%), Gaps = 30/506 (5%)

Query: 1   MSQESSQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFV 60
           M+  S++KL L +LT+LVVGSMIG GIFSLP     +      +I W I   GMLTLAFV
Sbjct: 5   MAASSNKKLSLWSLTSLVVGSMIGAGIFSLPATFGRATGGFGAIIAWVIAGGGMLTLAFV 64

Query: 61  FQTLANRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPI 120
           FQTLA RKP+LD GVY YAK GFGDY GF+SA G+W  A +G+V YFVL+ STLG FFP+
Sbjct: 65  FQTLAQRKPDLDSGVYIYAKTGFGDYAGFASAIGFWAGACIGSVSYFVLIKSTLGAFFPL 124

Query: 121 FGKGDTVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLD 180
           FG G+T++A++ AS++LW+ HF+VLRGIKEAA INT+ T AKV+P+F+F+++  FAF  D
Sbjct: 125 FGDGNTLSAVLIASLILWSFHFMVLRGIKEAAAINTIATFAKVIPIFIFVIVLAFAFHTD 184

Query: 181 IFTADIWGKSN----------PDLG--------------SVMNQVRNMMLVTVWVFIGIE 216
            F  + WG  +           D G              ++ +QVR+ MLVTV+VF+GIE
Sbjct: 185 TFALNFWGSQSLSGIGDLSHLDDYGYTGHAALEIGTASETLFSQVRSTMLVTVFVFVGIE 244

Query: 217 GASIFSSRAEKRSDVGKATVIGFITVLLLLVLVNVLSMGVMTQPELAKLQNPSMALVLEH 276
           GAS++S  A++R  VG ATV+GFI VL LLVLV +LS GV+ +P+LA L+ PSMA VLEH
Sbjct: 245 GASVYSRYAKERKHVGIATVLGFIGVLCLLVLVTMLSYGVLLRPDLAALRQPSMAGVLEH 304

Query: 277 VVGHWGAVLISVGLLISLLGALLSWVLLCAEIMFAAAKDHTMPEFLRRENANQVPANALW 336
           +VG WGA+ IS+GL+IS++GA LSW LL AE +++AAK + MP+    EN   VP+ A+W
Sbjct: 305 IVGRWGAIFISIGLIISVMGAYLSWTLLAAEALYSAAKSNIMPQIFATENKRGVPSAAVW 364

Query: 337 LTNICVQVFLVVVFFTSGDPDGMDPYTKMLLLATSMILIPYFWSAAYGLLLTLKGETYEN 396
           ++NI +Q+FL+V  FT         +   L L +S++LIPY   AAYGL L    ETY  
Sbjct: 365 MSNIFIQLFLIVTLFTE------YAFQLALELTSSLVLIPYLLVAAYGLKLAWTQETYAI 418

Query: 397 DARERSKDLVIAGIAVAYAVWLLYAGGLKYLLLSALLYAPGAILFAKAKHEVGQPIFTGI 456
           D+ ER KD + A IA  YA+ ++YAGGLKY+LLSA++Y PG +LF  AK E  + IF  I
Sbjct: 419 DSAERKKDFIFALIATLYAILMVYAGGLKYILLSAVIYGPGTVLFIIAKREQKRSIFAPI 478

Query: 457 EKLIFAAVVIGALVAAYGLYDGFLTL 482
           EK +FA  +I AL A Y L  G + +
Sbjct: 479 EKCLFAVAIIAALAAVYSLATGIIAV 504


>TR:D4HCA1_PROAS D4HCA1 Arginine/ornithine antiporter ArcD OS=Propionibacterium
           acnes (strain SK137) GN=HMPREF0675_3643 PE=4 SV=1
          Length = 518

 Score =  503 bits (1296), Expect = e-173
 Identities = 261/477 (54%), Positives = 340/477 (71%), Gaps = 9/477 (1%)

Query: 8   KLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLANR 67
           KL   A+ +LVVGSMIGGGIFSLPQN+AA+A  G ++IGW IT +GM+ LA V+Q LA R
Sbjct: 48  KLSFPAMLSLVVGSMIGGGIFSLPQNIAAAASPGPMVIGWTITGIGMICLAMVYQKLAIR 107

Query: 68  KPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDTV 127
           +P+LD G+YAYAKAGFGD++GF+SAWGYW+SA +GNVGY VLLFST+G F P F  G+TV
Sbjct: 108 RPDLDNGIYAYAKAGFGDFIGFNSAWGYWLSALIGNVGYLVLLFSTVGKFVPAFAGGNTV 167

Query: 128 AAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTADIW 187
            A++ ASVLLW  H LVL G++ AAF+NT+ T+AK+VPL  FI IC  AF + +FT D W
Sbjct: 168 WAVLAASVLLWLTHALVLAGVRTAAFVNTIATIAKIVPLITFIAICAVAFDVGVFTEDFW 227

Query: 188 GKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLLLV 247
           G S+  LGSV  Q ++MMLVTVWVFIGIEGASI+S RA KRSDVGKATV GF+ VL+LL+
Sbjct: 228 G-SHAGLGSVFAQTKSMMLVTVWVFIGIEGASIYSKRARKRSDVGKATVGGFLFVLVLLI 286

Query: 248 LVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLCAE 307
            VN+LSMG+M + +LA L + SM  VL  VVG WG+VL+S G++ISLLGALL+W+LLC E
Sbjct: 287 GVNLLSMGIMHRAKLAGLPDASMGDVLSSVVGPWGSVLVSAGVIISLLGALLAWILLCGE 346

Query: 308 IMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKMLL 367
            M    +D TMP+   R N ++ PA ALW+TNI  Q+ LV+     G       Y  M  
Sbjct: 347 TMQVPGEDGTMPKLFGRINKHEAPAPALWITNIVSQICLVMTVLWDG------AYLAMAT 400

Query: 368 LATSMILIPYFWSAAYGLLLTLKGETYENDAR-ERSKDLVIAGIAVAYAVWLLYAGGLKY 426
           LA ++IL+PY  SAA+ L + +KGETYEN  R +R +D V+A +A  Y +WL+ A G   
Sbjct: 401 LAAALILVPYLLSAAFALKMVIKGETYENGPRSQRVRDAVVATVATLYGIWLVVAAGADA 460

Query: 427 LLLSALLYAPGAILFAKAKHEV-GQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           L+L+ALLY PGA +F  AK E+  + IF   E  +   + + ++V+   +  G L+L
Sbjct: 461 LMLAALLYLPGAAVFVWAKRELRAKRIFKPYEIGVLVLLALISVVSIISIVTGRLSL 517


>TR:G8VJ81_PROAA G8VJ81 Arginine/ornithine antiporter ArcD OS=Propionibacterium
           acnes TypeIA2 P.acn17 GN=TIA2EST22_02920 PE=4 SV=1
          Length = 518

 Score =  503 bits (1296), Expect = e-173
 Identities = 261/477 (54%), Positives = 340/477 (71%), Gaps = 9/477 (1%)

Query: 8   KLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLANR 67
           KL   A+ +LVVGSMIGGGIFSLPQN+AA+A  G ++IGW IT +GM+ LA V+Q LA R
Sbjct: 48  KLSFPAMLSLVVGSMIGGGIFSLPQNIAAAASPGPMVIGWTITGIGMICLAMVYQKLAIR 107

Query: 68  KPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDTV 127
           +P+LD G+YAYAKAGFGD++GF+SAWGYW+SA +GNVGY VLLFST+G F P F  G+TV
Sbjct: 108 RPDLDNGIYAYAKAGFGDFIGFNSAWGYWLSALIGNVGYLVLLFSTVGKFVPAFAGGNTV 167

Query: 128 AAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTADIW 187
            A++ ASVLLW  H LVL G++ AAF+NT+ T+AK+VPL  FI IC  AF + +FT D W
Sbjct: 168 WAVLAASVLLWLTHALVLAGVRTAAFVNTIATIAKIVPLITFIAICAVAFDVGVFTEDFW 227

Query: 188 GKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLLLV 247
           G S+  LGSV  Q ++MMLVTVWVFIGIEGASI+S RA KRSDVGKATV GF+ VL+LL+
Sbjct: 228 G-SHAGLGSVFAQTKSMMLVTVWVFIGIEGASIYSKRARKRSDVGKATVGGFLFVLVLLI 286

Query: 248 LVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLCAE 307
            VN+LSMG+M + +LA L + SM  VL  VVG WG+VL+S G++ISLLGALL+W+LLC E
Sbjct: 287 GVNLLSMGIMHRAKLAGLPDASMGDVLSSVVGPWGSVLVSAGVIISLLGALLAWILLCGE 346

Query: 308 IMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKMLL 367
            M    +D TMP+   R N ++ PA ALW+TNI  Q+ LV+     G       Y  M  
Sbjct: 347 TMQVPGEDGTMPKLFGRINKHEAPAPALWITNIVSQICLVMTVLWDG------AYLAMAT 400

Query: 368 LATSMILIPYFWSAAYGLLLTLKGETYENDAR-ERSKDLVIAGIAVAYAVWLLYAGGLKY 426
           LA ++IL+PY  SAA+ L + +KGETYEN  R +R +D V+A +A  Y +WL+ A G   
Sbjct: 401 LAAALILVPYLLSAAFALKMVIKGETYENGPRSQRVRDAVVATVATLYGIWLVVAAGADA 460

Query: 427 LLLSALLYAPGAILFAKAKHEV-GQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           L+L+ALLY PGA +F  AK E+  + IF   E  +   + + ++V+   +  G L+L
Sbjct: 461 LMLAALLYLPGAAVFVWAKRELRAKRIFKPYEIGVLVLLALISVVSIISIVTGRLSL 517


>TR:G8VAP1_PROAA G8VAP1 Arginine/ornithine antiporter ArcD OS=Propionibacterium
           acnes TypeIA2 P.acn33 GN=TIA2EST2_02840 PE=4 SV=1
          Length = 518

 Score =  503 bits (1296), Expect = e-173
 Identities = 261/477 (54%), Positives = 340/477 (71%), Gaps = 9/477 (1%)

Query: 8   KLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLANR 67
           KL   A+ +LVVGSMIGGGIFSLPQN+AA+A  G ++IGW IT +GM+ LA V+Q LA R
Sbjct: 48  KLSFPAMLSLVVGSMIGGGIFSLPQNIAAAASPGPMVIGWTITGIGMICLAMVYQKLAIR 107

Query: 68  KPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDTV 127
           +P+LD G+YAYAKAGFGD++GF+SAWGYW+SA +GNVGY VLLFST+G F P F  G+TV
Sbjct: 108 RPDLDNGIYAYAKAGFGDFIGFNSAWGYWLSALIGNVGYLVLLFSTVGKFVPAFAGGNTV 167

Query: 128 AAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTADIW 187
            A++ ASVLLW  H LVL G++ AAF+NT+ T+AK+VPL  FI IC  AF + +FT D W
Sbjct: 168 WAVLAASVLLWLTHALVLAGVRTAAFVNTIATIAKIVPLITFIAICAVAFDVGVFTEDFW 227

Query: 188 GKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLLLV 247
           G S+  LGSV  Q ++MMLVTVWVFIGIEGASI+S RA KRSDVGKATV GF+ VL+LL+
Sbjct: 228 G-SHAGLGSVFAQTKSMMLVTVWVFIGIEGASIYSKRARKRSDVGKATVGGFLFVLVLLI 286

Query: 248 LVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLCAE 307
            VN+LSMG+M + +LA L + SM  VL  VVG WG+VL+S G++ISLLGALL+W+LLC E
Sbjct: 287 GVNLLSMGIMHRAKLAGLPDASMGDVLSSVVGPWGSVLVSAGVIISLLGALLAWILLCGE 346

Query: 308 IMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKMLL 367
            M    +D TMP+   R N ++ PA ALW+TNI  Q+ LV+     G       Y  M  
Sbjct: 347 TMQVPGEDGTMPKLFGRINKHEAPAPALWITNIVSQICLVMTVLWDG------AYLAMAT 400

Query: 368 LATSMILIPYFWSAAYGLLLTLKGETYENDAR-ERSKDLVIAGIAVAYAVWLLYAGGLKY 426
           LA ++IL+PY  SAA+ L + +KGETYEN  R +R +D V+A +A  Y +WL+ A G   
Sbjct: 401 LAAALILVPYLLSAAFALKMVIKGETYENGPRSQRVRDAVVATVATLYGIWLVVAAGADA 460

Query: 427 LLLSALLYAPGAILFAKAKHEV-GQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           L+L+ALLY PGA +F  AK E+  + IF   E  +   + + ++V+   +  G L+L
Sbjct: 461 LMLAALLYLPGAAVFVWAKRELRAKRIFKPYEIGVLVLLALISVVSIISIVTGRLSL 517


>TR:F3D0Q2_PROAA F3D0Q2 Arginine/ornithine antiporter OS=Propionibacterium acnes
           HL025PA2 GN=HMPREF9588_00119 PE=4 SV=1
          Length = 518

 Score =  503 bits (1296), Expect = e-173
 Identities = 261/477 (54%), Positives = 340/477 (71%), Gaps = 9/477 (1%)

Query: 8   KLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLANR 67
           KL   A+ +LVVGSMIGGGIFSLPQN+AA+A  G ++IGW IT +GM+ LA V+Q LA R
Sbjct: 48  KLSFPAMLSLVVGSMIGGGIFSLPQNIAAAASPGPMVIGWTITGIGMICLAMVYQKLAIR 107

Query: 68  KPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDTV 127
           +P+LD G+YAYAKAGFGD++GF+SAWGYW+SA +GNVGY VLLFST+G F P F  G+TV
Sbjct: 108 RPDLDNGIYAYAKAGFGDFIGFNSAWGYWLSALIGNVGYLVLLFSTVGKFVPAFAGGNTV 167

Query: 128 AAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTADIW 187
            A++ ASVLLW  H LVL G++ AAF+NT+ T+AK+VPL  FI IC  AF + +FT D W
Sbjct: 168 WAVLAASVLLWLTHALVLAGVRTAAFVNTIATIAKIVPLITFIAICAVAFDVGVFTEDFW 227

Query: 188 GKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLLLV 247
           G S+  LGSV  Q ++MMLVTVWVFIGIEGASI+S RA KRSDVGKATV GF+ VL+LL+
Sbjct: 228 G-SHAGLGSVFAQTKSMMLVTVWVFIGIEGASIYSKRARKRSDVGKATVGGFLFVLVLLI 286

Query: 248 LVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLCAE 307
            VN+LSMG+M + +LA L + SM  VL  VVG WG+VL+S G++ISLLGALL+W+LLC E
Sbjct: 287 GVNLLSMGIMHRAKLAGLPDASMGDVLSSVVGPWGSVLVSAGVIISLLGALLAWILLCGE 346

Query: 308 IMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKMLL 367
            M    +D TMP+   R N ++ PA ALW+TNI  Q+ LV+     G       Y  M  
Sbjct: 347 TMQVPGEDGTMPKLFGRINKHEAPAPALWITNIVSQICLVMTVLWDG------AYLAMAT 400

Query: 368 LATSMILIPYFWSAAYGLLLTLKGETYENDAR-ERSKDLVIAGIAVAYAVWLLYAGGLKY 426
           LA ++IL+PY  SAA+ L + +KGETYEN  R +R +D V+A +A  Y +WL+ A G   
Sbjct: 401 LAAALILVPYLLSAAFALKMVIKGETYENGPRSQRVRDAVVATVATLYGIWLVVAAGADA 460

Query: 427 LLLSALLYAPGAILFAKAKHEV-GQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           L+L+ALLY PGA +F  AK E+  + IF   E  +   + + ++V+   +  G L+L
Sbjct: 461 LMLAALLYLPGAAVFVWAKRELRAKRIFKPYEIGVLVLLALISVVSIISIVTGRLSL 517


>TR:F3CSK2_PROAA F3CSK2 Arginine/ornithine antiporter OS=Propionibacterium acnes
           HL087PA1 GN=HMPREF9579_02345 PE=4 SV=1
          Length = 518

 Score =  503 bits (1296), Expect = e-173
 Identities = 261/477 (54%), Positives = 340/477 (71%), Gaps = 9/477 (1%)

Query: 8   KLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLANR 67
           KL   A+ +LVVGSMIGGGIFSLPQN+AA+A  G ++IGW IT +GM+ LA V+Q LA R
Sbjct: 48  KLSFPAMLSLVVGSMIGGGIFSLPQNIAAAASPGPMVIGWTITGIGMICLAMVYQKLAIR 107

Query: 68  KPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDTV 127
           +P+LD G+YAYAKAGFGD++GF+SAWGYW+SA +GNVGY VLLFST+G F P F  G+TV
Sbjct: 108 RPDLDNGIYAYAKAGFGDFIGFNSAWGYWLSALIGNVGYLVLLFSTVGKFVPAFAGGNTV 167

Query: 128 AAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTADIW 187
            A++ ASVLLW  H LVL G++ AAF+NT+ T+AK+VPL  FI IC  AF + +FT D W
Sbjct: 168 WAVLAASVLLWLTHALVLAGVRTAAFVNTIATIAKIVPLITFIAICAVAFDVGVFTEDFW 227

Query: 188 GKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLLLV 247
           G S+  LGSV  Q ++MMLVTVWVFIGIEGASI+S RA KRSDVGKATV GF+ VL+LL+
Sbjct: 228 G-SHAGLGSVFAQTKSMMLVTVWVFIGIEGASIYSKRARKRSDVGKATVGGFLFVLVLLI 286

Query: 248 LVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLCAE 307
            VN+LSMG+M + +LA L + SM  VL  VVG WG+VL+S G++ISLLGALL+W+LLC E
Sbjct: 287 GVNLLSMGIMHRAKLAGLPDASMGDVLSSVVGPWGSVLVSAGVIISLLGALLAWILLCGE 346

Query: 308 IMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKMLL 367
            M    +D TMP+   R N ++ PA ALW+TNI  Q+ LV+     G       Y  M  
Sbjct: 347 TMQVPGEDGTMPKLFGRINKHEAPAPALWITNIVSQICLVMTVLWDG------AYLAMAT 400

Query: 368 LATSMILIPYFWSAAYGLLLTLKGETYENDAR-ERSKDLVIAGIAVAYAVWLLYAGGLKY 426
           LA ++IL+PY  SAA+ L + +KGETYEN  R +R +D V+A +A  Y +WL+ A G   
Sbjct: 401 LAAALILVPYLLSAAFALKMVIKGETYENGPRSQRVRDAVVATVATLYGIWLVVAAGADA 460

Query: 427 LLLSALLYAPGAILFAKAKHEV-GQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           L+L+ALLY PGA +F  AK E+  + IF   E  +   + + ++V+   +  G L+L
Sbjct: 461 LMLAALLYLPGAAVFVWAKRELRAKRIFKPYEIGVLVLLALISVVSIISIVTGRLSL 517


>TR:F3BW59_PROAA F3BW59 Arginine/ornithine antiporter OS=Propionibacterium acnes
           HL099PA1 GN=HMPREF9343_02063 PE=4 SV=1
          Length = 518

 Score =  503 bits (1296), Expect = e-173
 Identities = 261/477 (54%), Positives = 340/477 (71%), Gaps = 9/477 (1%)

Query: 8   KLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLANR 67
           KL   A+ +LVVGSMIGGGIFSLPQN+AA+A  G ++IGW IT +GM+ LA V+Q LA R
Sbjct: 48  KLSFPAMLSLVVGSMIGGGIFSLPQNIAAAASPGPMVIGWTITGIGMICLAMVYQKLAIR 107

Query: 68  KPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDTV 127
           +P+LD G+YAYAKAGFGD++GF+SAWGYW+SA +GNVGY VLLFST+G F P F  G+TV
Sbjct: 108 RPDLDNGIYAYAKAGFGDFIGFNSAWGYWLSALIGNVGYLVLLFSTVGKFVPAFAGGNTV 167

Query: 128 AAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTADIW 187
            A++ ASVLLW  H LVL G++ AAF+NT+ T+AK+VPL  FI IC  AF + +FT D W
Sbjct: 168 WAVLAASVLLWLTHALVLAGVRTAAFVNTIATIAKIVPLITFIAICAVAFDVGVFTEDFW 227

Query: 188 GKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLLLV 247
           G S+  LGSV  Q ++MMLVTVWVFIGIEGASI+S RA KRSDVGKATV GF+ VL+LL+
Sbjct: 228 G-SHAGLGSVFAQTKSMMLVTVWVFIGIEGASIYSKRARKRSDVGKATVGGFLFVLVLLI 286

Query: 248 LVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLCAE 307
            VN+LSMG+M + +LA L + SM  VL  VVG WG+VL+S G++ISLLGALL+W+LLC E
Sbjct: 287 GVNLLSMGIMHRAKLAGLPDASMGDVLSSVVGPWGSVLVSAGVIISLLGALLAWILLCGE 346

Query: 308 IMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKMLL 367
            M    +D TMP+   R N ++ PA ALW+TNI  Q+ LV+     G       Y  M  
Sbjct: 347 TMQVPGEDGTMPKLFGRINKHEAPAPALWITNIVSQICLVMTVLWDG------AYLAMAT 400

Query: 368 LATSMILIPYFWSAAYGLLLTLKGETYENDAR-ERSKDLVIAGIAVAYAVWLLYAGGLKY 426
           LA ++IL+PY  SAA+ L + +KGETYEN  R +R +D V+A +A  Y +WL+ A G   
Sbjct: 401 LAAALILVPYLLSAAFALKMVIKGETYENGPRSQRVRDAVVATVATLYGIWLVVAAGADA 460

Query: 427 LLLSALLYAPGAILFAKAKHEV-GQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           L+L+ALLY PGA +F  AK E+  + IF   E  +   + + ++V+   +  G L+L
Sbjct: 461 LMLAALLYLPGAAVFVWAKRELRAKRIFKPYEIGVLVLLALISVVSIISIVTGRLSL 517


>TR:F1VEX4_PROAA F1VEX4 Arginine/ornithine antiporter OS=Propionibacterium acnes
           HL043PA2 GN=HMPREF9571_02141 PE=4 SV=1
          Length = 518

 Score =  503 bits (1296), Expect = e-173
 Identities = 261/477 (54%), Positives = 340/477 (71%), Gaps = 9/477 (1%)

Query: 8   KLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLANR 67
           KL   A+ +LVVGSMIGGGIFSLPQN+AA+A  G ++IGW IT +GM+ LA V+Q LA R
Sbjct: 48  KLSFPAMLSLVVGSMIGGGIFSLPQNIAAAASPGPMVIGWTITGIGMICLAMVYQKLAIR 107

Query: 68  KPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDTV 127
           +P+LD G+YAYAKAGFGD++GF+SAWGYW+SA +GNVGY VLLFST+G F P F  G+TV
Sbjct: 108 RPDLDNGIYAYAKAGFGDFIGFNSAWGYWLSALIGNVGYLVLLFSTVGKFVPAFAGGNTV 167

Query: 128 AAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTADIW 187
            A++ ASVLLW  H LVL G++ AAF+NT+ T+AK+VPL  FI IC  AF + +FT D W
Sbjct: 168 WAVLAASVLLWLTHALVLAGVRTAAFVNTIATIAKIVPLITFIAICAVAFDVGVFTEDFW 227

Query: 188 GKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLLLV 247
           G S+  LGSV  Q ++MMLVTVWVFIGIEGASI+S RA KRSDVGKATV GF+ VL+LL+
Sbjct: 228 G-SHAGLGSVFAQTKSMMLVTVWVFIGIEGASIYSKRARKRSDVGKATVGGFLFVLVLLI 286

Query: 248 LVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLCAE 307
            VN+LSMG+M + +LA L + SM  VL  VVG WG+VL+S G++ISLLGALL+W+LLC E
Sbjct: 287 GVNLLSMGIMHRAKLAGLPDASMGDVLSSVVGPWGSVLVSAGVIISLLGALLAWILLCGE 346

Query: 308 IMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKMLL 367
            M    +D TMP+   R N ++ PA ALW+TNI  Q+ LV+     G       Y  M  
Sbjct: 347 TMQVPGEDGTMPKLFGRINKHEAPAPALWITNIVSQICLVMTVLWDG------AYLAMAT 400

Query: 368 LATSMILIPYFWSAAYGLLLTLKGETYENDAR-ERSKDLVIAGIAVAYAVWLLYAGGLKY 426
           LA ++IL+PY  SAA+ L + +KGETYEN  R +R +D V+A +A  Y +WL+ A G   
Sbjct: 401 LAAALILVPYLLSAAFALKMVIKGETYENGPRSQRVRDAVVATVATLYGIWLVVAAGADA 460

Query: 427 LLLSALLYAPGAILFAKAKHEV-GQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           L+L+ALLY PGA +F  AK E+  + IF   E  +   + + ++V+   +  G L+L
Sbjct: 461 LMLAALLYLPGAAVFVWAKRELRAKRIFKPYEIGVLVLLALISVVSIISIVTGRLSL 517


>TR:F1V8T7_PROAA F1V8T7 Arginine/ornithine antiporter OS=Propionibacterium acnes
           HL087PA3 GN=HMPREF9581_02585 PE=4 SV=1
          Length = 518

 Score =  503 bits (1296), Expect = e-173
 Identities = 261/477 (54%), Positives = 340/477 (71%), Gaps = 9/477 (1%)

Query: 8   KLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLANR 67
           KL   A+ +LVVGSMIGGGIFSLPQN+AA+A  G ++IGW IT +GM+ LA V+Q LA R
Sbjct: 48  KLSFPAMLSLVVGSMIGGGIFSLPQNIAAAASPGPMVIGWTITGIGMICLAMVYQKLAIR 107

Query: 68  KPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDTV 127
           +P+LD G+YAYAKAGFGD++GF+SAWGYW+SA +GNVGY VLLFST+G F P F  G+TV
Sbjct: 108 RPDLDNGIYAYAKAGFGDFIGFNSAWGYWLSALIGNVGYLVLLFSTVGKFVPAFAGGNTV 167

Query: 128 AAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTADIW 187
            A++ ASVLLW  H LVL G++ AAF+NT+ T+AK+VPL  FI IC  AF + +FT D W
Sbjct: 168 WAVLAASVLLWLTHALVLAGVRTAAFVNTIATIAKIVPLITFIAICAVAFDVGVFTEDFW 227

Query: 188 GKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLLLV 247
           G S+  LGSV  Q ++MMLVTVWVFIGIEGASI+S RA KRSDVGKATV GF+ VL+LL+
Sbjct: 228 G-SHAGLGSVFAQTKSMMLVTVWVFIGIEGASIYSKRARKRSDVGKATVGGFLFVLVLLI 286

Query: 248 LVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLCAE 307
            VN+LSMG+M + +LA L + SM  VL  VVG WG+VL+S G++ISLLGALL+W+LLC E
Sbjct: 287 GVNLLSMGIMHRAKLAGLPDASMGDVLSSVVGPWGSVLVSAGVIISLLGALLAWILLCGE 346

Query: 308 IMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKMLL 367
            M    +D TMP+   R N ++ PA ALW+TNI  Q+ LV+     G       Y  M  
Sbjct: 347 TMQVPGEDGTMPKLFGRINKHEAPAPALWITNIVSQICLVMTVLWDG------AYLAMAT 400

Query: 368 LATSMILIPYFWSAAYGLLLTLKGETYENDAR-ERSKDLVIAGIAVAYAVWLLYAGGLKY 426
           LA ++IL+PY  SAA+ L + +KGETYEN  R +R +D V+A +A  Y +WL+ A G   
Sbjct: 401 LAAALILVPYLLSAAFALKMVIKGETYENGPRSQRVRDAVVATVATLYGIWLVVAAGADA 460

Query: 427 LLLSALLYAPGAILFAKAKHEV-GQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           L+L+ALLY PGA +F  AK E+  + IF   E  +   + + ++V+   +  G L+L
Sbjct: 461 LMLAALLYLPGAAVFVWAKRELRAKRIFKPYEIGVLVLLALISVVSIISIVTGRLSL 517


>TR:F1UXD3_PROAA F1UXD3 Arginine/ornithine antiporter OS=Propionibacterium acnes
           HL092PA1 GN=HMPREF9584_01091 PE=4 SV=1
          Length = 518

 Score =  503 bits (1296), Expect = e-173
 Identities = 261/477 (54%), Positives = 340/477 (71%), Gaps = 9/477 (1%)

Query: 8   KLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLANR 67
           KL   A+ +LVVGSMIGGGIFSLPQN+AA+A  G ++IGW IT +GM+ LA V+Q LA R
Sbjct: 48  KLSFPAMLSLVVGSMIGGGIFSLPQNIAAAASPGPMVIGWTITGIGMICLAMVYQKLAIR 107

Query: 68  KPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDTV 127
           +P+LD G+YAYAKAGFGD++GF+SAWGYW+SA +GNVGY VLLFST+G F P F  G+TV
Sbjct: 108 RPDLDNGIYAYAKAGFGDFIGFNSAWGYWLSALIGNVGYLVLLFSTVGKFVPAFAGGNTV 167

Query: 128 AAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTADIW 187
            A++ ASVLLW  H LVL G++ AAF+NT+ T+AK+VPL  FI IC  AF + +FT D W
Sbjct: 168 WAVLAASVLLWLTHALVLAGVRTAAFVNTIATIAKIVPLITFIAICAVAFDVGVFTEDFW 227

Query: 188 GKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLLLV 247
           G S+  LGSV  Q ++MMLVTVWVFIGIEGASI+S RA KRSDVGKATV GF+ VL+LL+
Sbjct: 228 G-SHAGLGSVFAQTKSMMLVTVWVFIGIEGASIYSKRARKRSDVGKATVGGFLFVLVLLI 286

Query: 248 LVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLCAE 307
            VN+LSMG+M + +LA L + SM  VL  VVG WG+VL+S G++ISLLGALL+W+LLC E
Sbjct: 287 GVNLLSMGIMHRAKLAGLPDASMGDVLSSVVGPWGSVLVSAGVIISLLGALLAWILLCGE 346

Query: 308 IMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKMLL 367
            M    +D TMP+   R N ++ PA ALW+TNI  Q+ LV+     G       Y  M  
Sbjct: 347 TMQVPGEDGTMPKLFGRINKHEAPAPALWITNIVSQICLVMTVLWDG------AYLAMAT 400

Query: 368 LATSMILIPYFWSAAYGLLLTLKGETYENDAR-ERSKDLVIAGIAVAYAVWLLYAGGLKY 426
           LA ++IL+PY  SAA+ L + +KGETYEN  R +R +D V+A +A  Y +WL+ A G   
Sbjct: 401 LAAALILVPYLLSAAFALKMVIKGETYENGPRSQRVRDAVVATVATLYGIWLVVAAGADA 460

Query: 427 LLLSALLYAPGAILFAKAKHEV-GQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           L+L+ALLY PGA +F  AK E+  + IF   E  +   + + ++V+   +  G L+L
Sbjct: 461 LMLAALLYLPGAAVFVWAKRELRAKRIFKPYEIGVLVLLALISVVSIISIVTGRLSL 517


>TR:F1ULH4_PROAA F1ULH4 Arginine/ornithine antiporter OS=Propionibacterium acnes
           HL043PA1 GN=HMPREF9570_02538 PE=4 SV=1
          Length = 518

 Score =  503 bits (1296), Expect = e-173
 Identities = 261/477 (54%), Positives = 340/477 (71%), Gaps = 9/477 (1%)

Query: 8   KLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLANR 67
           KL   A+ +LVVGSMIGGGIFSLPQN+AA+A  G ++IGW IT +GM+ LA V+Q LA R
Sbjct: 48  KLSFPAMLSLVVGSMIGGGIFSLPQNIAAAASPGPMVIGWTITGIGMICLAMVYQKLAIR 107

Query: 68  KPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDTV 127
           +P+LD G+YAYAKAGFGD++GF+SAWGYW+SA +GNVGY VLLFST+G F P F  G+TV
Sbjct: 108 RPDLDNGIYAYAKAGFGDFIGFNSAWGYWLSALIGNVGYLVLLFSTVGKFVPAFAGGNTV 167

Query: 128 AAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTADIW 187
            A++ ASVLLW  H LVL G++ AAF+NT+ T+AK+VPL  FI IC  AF + +FT D W
Sbjct: 168 WAVLAASVLLWLTHALVLAGVRTAAFVNTIATIAKIVPLITFIAICAVAFDVGVFTEDFW 227

Query: 188 GKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLLLV 247
           G S+  LGSV  Q ++MMLVTVWVFIGIEGASI+S RA KRSDVGKATV GF+ VL+LL+
Sbjct: 228 G-SHAGLGSVFAQTKSMMLVTVWVFIGIEGASIYSKRARKRSDVGKATVGGFLFVLVLLI 286

Query: 248 LVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLCAE 307
            VN+LSMG+M + +LA L + SM  VL  VVG WG+VL+S G++ISLLGALL+W+LLC E
Sbjct: 287 GVNLLSMGIMHRAKLAGLPDASMGDVLSSVVGPWGSVLVSAGVIISLLGALLAWILLCGE 346

Query: 308 IMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKMLL 367
            M    +D TMP+   R N ++ PA ALW+TNI  Q+ LV+     G       Y  M  
Sbjct: 347 TMQVPGEDGTMPKLFGRINKHEAPAPALWITNIVSQICLVMTVLWDG------AYLAMAT 400

Query: 368 LATSMILIPYFWSAAYGLLLTLKGETYENDAR-ERSKDLVIAGIAVAYAVWLLYAGGLKY 426
           LA ++IL+PY  SAA+ L + +KGETYEN  R +R +D V+A +A  Y +WL+ A G   
Sbjct: 401 LAAALILVPYLLSAAFALKMVIKGETYENGPRSQRVRDAVVATVATLYGIWLVVAAGADA 460

Query: 427 LLLSALLYAPGAILFAKAKHEV-GQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           L+L+ALLY PGA +F  AK E+  + IF   E  +   + + ++V+   +  G L+L
Sbjct: 461 LMLAALLYLPGAAVFVWAKRELRAKRIFKPYEIGVLVLLALISVVSIISIVTGRLSL 517


>TR:F1TX73_PROAA F1TX73 Arginine/ornithine antiporter OS=Propionibacterium acnes
           HL096PA2 GN=HMPREF9338_01639 PE=4 SV=1
          Length = 518

 Score =  503 bits (1296), Expect = e-173
 Identities = 261/477 (54%), Positives = 340/477 (71%), Gaps = 9/477 (1%)

Query: 8   KLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLANR 67
           KL   A+ +LVVGSMIGGGIFSLPQN+AA+A  G ++IGW IT +GM+ LA V+Q LA R
Sbjct: 48  KLSFPAMLSLVVGSMIGGGIFSLPQNIAAAASPGPMVIGWTITGIGMICLAMVYQKLAIR 107

Query: 68  KPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDTV 127
           +P+LD G+YAYAKAGFGD++GF+SAWGYW+SA +GNVGY VLLFST+G F P F  G+TV
Sbjct: 108 RPDLDNGIYAYAKAGFGDFIGFNSAWGYWLSALIGNVGYLVLLFSTVGKFVPAFAGGNTV 167

Query: 128 AAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTADIW 187
            A++ ASVLLW  H LVL G++ AAF+NT+ T+AK+VPL  FI IC  AF + +FT D W
Sbjct: 168 WAVLAASVLLWLTHALVLAGVRTAAFVNTIATIAKIVPLITFIAICAVAFDVGVFTEDFW 227

Query: 188 GKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLLLV 247
           G S+  LGSV  Q ++MMLVTVWVFIGIEGASI+S RA KRSDVGKATV GF+ VL+LL+
Sbjct: 228 G-SHAGLGSVFAQTKSMMLVTVWVFIGIEGASIYSKRARKRSDVGKATVGGFLFVLVLLI 286

Query: 248 LVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLCAE 307
            VN+LSMG+M + +LA L + SM  VL  VVG WG+VL+S G++ISLLGALL+W+LLC E
Sbjct: 287 GVNLLSMGIMHRAKLAGLPDASMGDVLSSVVGPWGSVLVSAGVIISLLGALLAWILLCGE 346

Query: 308 IMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKMLL 367
            M    +D TMP+   R N ++ PA ALW+TNI  Q+ LV+     G       Y  M  
Sbjct: 347 TMQVPGEDGTMPKLFGRINKHEAPAPALWITNIVSQICLVMTVLWDG------AYLAMAT 400

Query: 368 LATSMILIPYFWSAAYGLLLTLKGETYENDAR-ERSKDLVIAGIAVAYAVWLLYAGGLKY 426
           LA ++IL+PY  SAA+ L + +KGETYEN  R +R +D V+A +A  Y +WL+ A G   
Sbjct: 401 LAAALILVPYLLSAAFALKMVIKGETYENGPRSQRVRDAVVATVATLYGIWLVVAAGADA 460

Query: 427 LLLSALLYAPGAILFAKAKHEV-GQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           L+L+ALLY PGA +F  AK E+  + IF   E  +   + + ++V+   +  G L+L
Sbjct: 461 LMLAALLYLPGAAVFVWAKRELRAKRIFKPYEIGVLVLLALISVVSIISIVTGRLSL 517


>TR:E6EIL9_PROAA E6EIL9 Arginine/ornithine antiporter OS=Propionibacterium acnes
           HL046PA1 GN=HMPREF9592_01878 PE=4 SV=1
          Length = 518

 Score =  503 bits (1296), Expect = e-173
 Identities = 261/477 (54%), Positives = 340/477 (71%), Gaps = 9/477 (1%)

Query: 8   KLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLANR 67
           KL   A+ +LVVGSMIGGGIFSLPQN+AA+A  G ++IGW IT +GM+ LA V+Q LA R
Sbjct: 48  KLSFPAMLSLVVGSMIGGGIFSLPQNIAAAASPGPMVIGWTITGIGMICLAMVYQKLAIR 107

Query: 68  KPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDTV 127
           +P+LD G+YAYAKAGFGD++GF+SAWGYW+SA +GNVGY VLLFST+G F P F  G+TV
Sbjct: 108 RPDLDNGIYAYAKAGFGDFIGFNSAWGYWLSALIGNVGYLVLLFSTVGKFVPAFAGGNTV 167

Query: 128 AAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTADIW 187
            A++ ASVLLW  H LVL G++ AAF+NT+ T+AK+VPL  FI IC  AF + +FT D W
Sbjct: 168 WAVLAASVLLWLTHALVLAGVRTAAFVNTIATIAKIVPLITFIAICAVAFDVGVFTEDFW 227

Query: 188 GKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLLLV 247
           G S+  LGSV  Q ++MMLVTVWVFIGIEGASI+S RA KRSDVGKATV GF+ VL+LL+
Sbjct: 228 G-SHAGLGSVFAQTKSMMLVTVWVFIGIEGASIYSKRARKRSDVGKATVGGFLFVLVLLI 286

Query: 248 LVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLCAE 307
            VN+LSMG+M + +LA L + SM  VL  VVG WG+VL+S G++ISLLGALL+W+LLC E
Sbjct: 287 GVNLLSMGIMHRAKLAGLPDASMGDVLSSVVGPWGSVLVSAGVIISLLGALLAWILLCGE 346

Query: 308 IMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKMLL 367
            M    +D TMP+   R N ++ PA ALW+TNI  Q+ LV+     G       Y  M  
Sbjct: 347 TMQVPGEDGTMPKLFGRINKHEAPAPALWITNIVSQICLVMTVLWDG------AYLAMAT 400

Query: 368 LATSMILIPYFWSAAYGLLLTLKGETYENDAR-ERSKDLVIAGIAVAYAVWLLYAGGLKY 426
           LA ++IL+PY  SAA+ L + +KGETYEN  R +R +D V+A +A  Y +WL+ A G   
Sbjct: 401 LAAALILVPYLLSAAFALKMVIKGETYENGPRSQRVRDAVVATVATLYGIWLVVAAGADA 460

Query: 427 LLLSALLYAPGAILFAKAKHEV-GQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           L+L+ALLY PGA +F  AK E+  + IF   E  +   + + ++V+   +  G L+L
Sbjct: 461 LMLAALLYLPGAAVFVWAKRELRAKRIFKPYEIGVLVLLALISVVSIISIVTGRLSL 517


>TR:E6EBU9_PROAA E6EBU9 Arginine/ornithine antiporter OS=Propionibacterium acnes
           HL078PA1 GN=HMPREF9569_02414 PE=4 SV=1
          Length = 518

 Score =  503 bits (1296), Expect = e-173
 Identities = 261/477 (54%), Positives = 340/477 (71%), Gaps = 9/477 (1%)

Query: 8   KLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLANR 67
           KL   A+ +LVVGSMIGGGIFSLPQN+AA+A  G ++IGW IT +GM+ LA V+Q LA R
Sbjct: 48  KLSFPAMLSLVVGSMIGGGIFSLPQNIAAAASPGPMVIGWTITGIGMICLAMVYQKLAIR 107

Query: 68  KPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDTV 127
           +P+LD G+YAYAKAGFGD++GF+SAWGYW+SA +GNVGY VLLFST+G F P F  G+TV
Sbjct: 108 RPDLDNGIYAYAKAGFGDFIGFNSAWGYWLSALIGNVGYLVLLFSTVGKFVPAFAGGNTV 167

Query: 128 AAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTADIW 187
            A++ ASVLLW  H LVL G++ AAF+NT+ T+AK+VPL  FI IC  AF + +FT D W
Sbjct: 168 WAVLAASVLLWLTHALVLAGVRTAAFVNTIATIAKIVPLITFIAICAVAFDVGVFTEDFW 227

Query: 188 GKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLLLV 247
           G S+  LGSV  Q ++MMLVTVWVFIGIEGASI+S RA KRSDVGKATV GF+ VL+LL+
Sbjct: 228 G-SHAGLGSVFAQTKSMMLVTVWVFIGIEGASIYSKRARKRSDVGKATVGGFLFVLVLLI 286

Query: 248 LVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLCAE 307
            VN+LSMG+M + +LA L + SM  VL  VVG WG+VL+S G++ISLLGALL+W+LLC E
Sbjct: 287 GVNLLSMGIMHRAKLAGLPDASMGDVLSSVVGPWGSVLVSAGVIISLLGALLAWILLCGE 346

Query: 308 IMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKMLL 367
            M    +D TMP+   R N ++ PA ALW+TNI  Q+ LV+     G       Y  M  
Sbjct: 347 TMQVPGEDGTMPKLFGRINKHEAPAPALWITNIVSQICLVMTVLWDG------AYLAMAT 400

Query: 368 LATSMILIPYFWSAAYGLLLTLKGETYENDAR-ERSKDLVIAGIAVAYAVWLLYAGGLKY 426
           LA ++IL+PY  SAA+ L + +KGETYEN  R +R +D V+A +A  Y +WL+ A G   
Sbjct: 401 LAAALILVPYLLSAAFALKMVIKGETYENGPRSQRVRDAVVATVATLYGIWLVVAAGADA 460

Query: 427 LLLSALLYAPGAILFAKAKHEV-GQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           L+L+ALLY PGA +F  AK E+  + IF   E  +   + + ++V+   +  G L+L
Sbjct: 461 LMLAALLYLPGAAVFVWAKRELRAKRIFKPYEIGVLVLLALISVVSIISIVTGRLSL 517


>TR:E6CSF8_PROAA E6CSF8 Arginine/ornithine antiporter OS=Propionibacterium acnes
           HL038PA1 GN=HMPREF9583_01171 PE=4 SV=1
          Length = 518

 Score =  503 bits (1296), Expect = e-173
 Identities = 261/477 (54%), Positives = 340/477 (71%), Gaps = 9/477 (1%)

Query: 8   KLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLANR 67
           KL   A+ +LVVGSMIGGGIFSLPQN+AA+A  G ++IGW IT +GM+ LA V+Q LA R
Sbjct: 48  KLSFPAMLSLVVGSMIGGGIFSLPQNIAAAASPGPMVIGWTITGIGMICLAMVYQKLAIR 107

Query: 68  KPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDTV 127
           +P+LD G+YAYAKAGFGD++GF+SAWGYW+SA +GNVGY VLLFST+G F P F  G+TV
Sbjct: 108 RPDLDNGIYAYAKAGFGDFIGFNSAWGYWLSALIGNVGYLVLLFSTVGKFVPAFAGGNTV 167

Query: 128 AAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTADIW 187
            A++ ASVLLW  H LVL G++ AAF+NT+ T+AK+VPL  FI IC  AF + +FT D W
Sbjct: 168 WAVLAASVLLWLTHALVLAGVRTAAFVNTIATIAKIVPLITFIAICAVAFDVGVFTEDFW 227

Query: 188 GKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLLLV 247
           G S+  LGSV  Q ++MMLVTVWVFIGIEGASI+S RA KRSDVGKATV GF+ VL+LL+
Sbjct: 228 G-SHAGLGSVFAQTKSMMLVTVWVFIGIEGASIYSKRARKRSDVGKATVGGFLFVLVLLI 286

Query: 248 LVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLCAE 307
            VN+LSMG+M + +LA L + SM  VL  VVG WG+VL+S G++ISLLGALL+W+LLC E
Sbjct: 287 GVNLLSMGIMHRAKLAGLPDASMGDVLSSVVGPWGSVLVSAGVIISLLGALLAWILLCGE 346

Query: 308 IMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKMLL 367
            M    +D TMP+   R N ++ PA ALW+TNI  Q+ LV+     G       Y  M  
Sbjct: 347 TMQVPGEDGTMPKLFGRINKHEAPAPALWITNIVSQICLVMTVLWDG------AYLAMAT 400

Query: 368 LATSMILIPYFWSAAYGLLLTLKGETYENDAR-ERSKDLVIAGIAVAYAVWLLYAGGLKY 426
           LA ++IL+PY  SAA+ L + +KGETYEN  R +R +D V+A +A  Y +WL+ A G   
Sbjct: 401 LAAALILVPYLLSAAFALKMVIKGETYENGPRSQRVRDAVVATVATLYGIWLVVAAGADA 460

Query: 427 LLLSALLYAPGAILFAKAKHEV-GQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           L+L+ALLY PGA +F  AK E+  + IF   E  +   + + ++V+   +  G L+L
Sbjct: 461 LMLAALLYLPGAAVFVWAKRELRAKRIFKPYEIGVLVLLALISVVSIISIVTGRLSL 517


>TR:E6C908_PROAA E6C908 Arginine/ornithine antiporter OS=Propionibacterium acnes
           HL030PA2 GN=HMPREF9602_01713 PE=4 SV=1
          Length = 518

 Score =  503 bits (1296), Expect = e-173
 Identities = 261/477 (54%), Positives = 340/477 (71%), Gaps = 9/477 (1%)

Query: 8   KLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLANR 67
           KL   A+ +LVVGSMIGGGIFSLPQN+AA+A  G ++IGW IT +GM+ LA V+Q LA R
Sbjct: 48  KLSFPAMLSLVVGSMIGGGIFSLPQNIAAAASPGPMVIGWTITGIGMICLAMVYQKLAIR 107

Query: 68  KPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDTV 127
           +P+LD G+YAYAKAGFGD++GF+SAWGYW+SA +GNVGY VLLFST+G F P F  G+TV
Sbjct: 108 RPDLDNGIYAYAKAGFGDFIGFNSAWGYWLSALIGNVGYLVLLFSTVGKFVPAFAGGNTV 167

Query: 128 AAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTADIW 187
            A++ ASVLLW  H LVL G++ AAF+NT+ T+AK+VPL  FI IC  AF + +FT D W
Sbjct: 168 WAVLAASVLLWLTHALVLAGVRTAAFVNTIATIAKIVPLITFIAICAVAFDVGVFTEDFW 227

Query: 188 GKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLLLV 247
           G S+  LGSV  Q ++MMLVTVWVFIGIEGASI+S RA KRSDVGKATV GF+ VL+LL+
Sbjct: 228 G-SHAGLGSVFAQTKSMMLVTVWVFIGIEGASIYSKRARKRSDVGKATVGGFLFVLVLLI 286

Query: 248 LVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLCAE 307
            VN+LSMG+M + +LA L + SM  VL  VVG WG+VL+S G++ISLLGALL+W+LLC E
Sbjct: 287 GVNLLSMGIMHRAKLAGLPDASMGDVLSSVVGPWGSVLVSAGVIISLLGALLAWILLCGE 346

Query: 308 IMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKMLL 367
            M    +D TMP+   R N ++ PA ALW+TNI  Q+ LV+     G       Y  M  
Sbjct: 347 TMQVPGEDGTMPKLFGRINKHEAPAPALWITNIVSQICLVMTVLWDG------AYLAMAT 400

Query: 368 LATSMILIPYFWSAAYGLLLTLKGETYENDAR-ERSKDLVIAGIAVAYAVWLLYAGGLKY 426
           LA ++IL+PY  SAA+ L + +KGETYEN  R +R +D V+A +A  Y +WL+ A G   
Sbjct: 401 LAAALILVPYLLSAAFALKMVIKGETYENGPRSQRVRDAVVATVATLYGIWLVVAAGADA 460

Query: 427 LLLSALLYAPGAILFAKAKHEV-GQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           L+L+ALLY PGA +F  AK E+  + IF   E  +   + + ++V+   +  G L+L
Sbjct: 461 LMLAALLYLPGAAVFVWAKRELRAKRIFKPYEIGVLVLLALISVVSIISIVTGRLSL 517


>TR:E6BYL3_PROAA E6BYL3 Arginine/ornithine antiporter OS=Propionibacterium acnes
           HL059PA2 GN=HMPREF9590_00279 PE=4 SV=1
          Length = 518

 Score =  503 bits (1296), Expect = e-173
 Identities = 261/477 (54%), Positives = 340/477 (71%), Gaps = 9/477 (1%)

Query: 8   KLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLANR 67
           KL   A+ +LVVGSMIGGGIFSLPQN+AA+A  G ++IGW IT +GM+ LA V+Q LA R
Sbjct: 48  KLSFPAMLSLVVGSMIGGGIFSLPQNIAAAASPGPMVIGWTITGIGMICLAMVYQKLAIR 107

Query: 68  KPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDTV 127
           +P+LD G+YAYAKAGFGD++GF+SAWGYW+SA +GNVGY VLLFST+G F P F  G+TV
Sbjct: 108 RPDLDNGIYAYAKAGFGDFIGFNSAWGYWLSALIGNVGYLVLLFSTVGKFVPAFAGGNTV 167

Query: 128 AAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTADIW 187
            A++ ASVLLW  H LVL G++ AAF+NT+ T+AK+VPL  FI IC  AF + +FT D W
Sbjct: 168 WAVLAASVLLWLTHALVLAGVRTAAFVNTIATIAKIVPLITFIAICAVAFDVGVFTEDFW 227

Query: 188 GKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLLLV 247
           G S+  LGSV  Q ++MMLVTVWVFIGIEGASI+S RA KRSDVGKATV GF+ VL+LL+
Sbjct: 228 G-SHAGLGSVFAQTKSMMLVTVWVFIGIEGASIYSKRARKRSDVGKATVGGFLFVLVLLI 286

Query: 248 LVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLCAE 307
            VN+LSMG+M + +LA L + SM  VL  VVG WG+VL+S G++ISLLGALL+W+LLC E
Sbjct: 287 GVNLLSMGIMHRAKLAGLPDASMGDVLSSVVGPWGSVLVSAGVIISLLGALLAWILLCGE 346

Query: 308 IMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKMLL 367
            M    +D TMP+   R N ++ PA ALW+TNI  Q+ LV+     G       Y  M  
Sbjct: 347 TMQVPGEDGTMPKLFGRINKHEAPAPALWITNIVSQICLVMTVLWDG------AYLAMAT 400

Query: 368 LATSMILIPYFWSAAYGLLLTLKGETYENDAR-ERSKDLVIAGIAVAYAVWLLYAGGLKY 426
           LA ++IL+PY  SAA+ L + +KGETYEN  R +R +D V+A +A  Y +WL+ A G   
Sbjct: 401 LAAALILVPYLLSAAFALKMVIKGETYENGPRSQRVRDAVVATVATLYGIWLVVAAGADA 460

Query: 427 LLLSALLYAPGAILFAKAKHEV-GQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           L+L+ALLY PGA +F  AK E+  + IF   E  +   + + ++V+   +  G L+L
Sbjct: 461 LMLAALLYLPGAAVFVWAKRELRAKRIFKPYEIGVLVLLALISVVSIISIVTGRLSL 517


>TR:E4I2E7_PROAA E4I2E7 Arginine/ornithine antiporter OS=Propionibacterium acnes
           HL005PA4 GN=HMPREF9597_01908 PE=4 SV=1
          Length = 518

 Score =  503 bits (1296), Expect = e-173
 Identities = 261/477 (54%), Positives = 340/477 (71%), Gaps = 9/477 (1%)

Query: 8   KLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLANR 67
           KL   A+ +LVVGSMIGGGIFSLPQN+AA+A  G ++IGW IT +GM+ LA V+Q LA R
Sbjct: 48  KLSFPAMLSLVVGSMIGGGIFSLPQNIAAAASPGPMVIGWTITGIGMICLAMVYQKLAIR 107

Query: 68  KPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDTV 127
           +P+LD G+YAYAKAGFGD++GF+SAWGYW+SA +GNVGY VLLFST+G F P F  G+TV
Sbjct: 108 RPDLDNGIYAYAKAGFGDFIGFNSAWGYWLSALIGNVGYLVLLFSTVGKFVPAFAGGNTV 167

Query: 128 AAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTADIW 187
            A++ ASVLLW  H LVL G++ AAF+NT+ T+AK+VPL  FI IC  AF + +FT D W
Sbjct: 168 WAVLAASVLLWLTHALVLAGVRTAAFVNTIATIAKIVPLITFIAICAVAFDVGVFTEDFW 227

Query: 188 GKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLLLV 247
           G S+  LGSV  Q ++MMLVTVWVFIGIEGASI+S RA KRSDVGKATV GF+ VL+LL+
Sbjct: 228 G-SHAGLGSVFAQTKSMMLVTVWVFIGIEGASIYSKRARKRSDVGKATVGGFLFVLVLLI 286

Query: 248 LVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLCAE 307
            VN+LSMG+M + +LA L + SM  VL  VVG WG+VL+S G++ISLLGALL+W+LLC E
Sbjct: 287 GVNLLSMGIMHRAKLAGLPDASMGDVLSSVVGPWGSVLVSAGVIISLLGALLAWILLCGE 346

Query: 308 IMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKMLL 367
            M    +D TMP+   R N ++ PA ALW+TNI  Q+ LV+     G       Y  M  
Sbjct: 347 TMQVPGEDGTMPKLFGRINKHEAPAPALWITNIVSQICLVMTVLWDG------AYLAMAT 400

Query: 368 LATSMILIPYFWSAAYGLLLTLKGETYENDAR-ERSKDLVIAGIAVAYAVWLLYAGGLKY 426
           LA ++IL+PY  SAA+ L + +KGETYEN  R +R +D V+A +A  Y +WL+ A G   
Sbjct: 401 LAAALILVPYLLSAAFALKMVIKGETYENGPRSQRVRDAVVATVATLYGIWLVVAAGADA 460

Query: 427 LLLSALLYAPGAILFAKAKHEV-GQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           L+L+ALLY PGA +F  AK E+  + IF   E  +   + + ++V+   +  G L+L
Sbjct: 461 LMLAALLYLPGAAVFVWAKRELRAKRIFKPYEIGVLVLLALISVVSIISIVTGRLSL 517


>TR:E4HA02_PROAA E4HA02 Arginine/ornithine antiporter OS=Propionibacterium acnes
           HL067PA1 GN=HMPREF9608_00300 PE=4 SV=1
          Length = 518

 Score =  503 bits (1296), Expect = e-173
 Identities = 261/477 (54%), Positives = 340/477 (71%), Gaps = 9/477 (1%)

Query: 8   KLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLANR 67
           KL   A+ +LVVGSMIGGGIFSLPQN+AA+A  G ++IGW IT +GM+ LA V+Q LA R
Sbjct: 48  KLSFPAMLSLVVGSMIGGGIFSLPQNIAAAASPGPMVIGWTITGIGMICLAMVYQKLAIR 107

Query: 68  KPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDTV 127
           +P+LD G+YAYAKAGFGD++GF+SAWGYW+SA +GNVGY VLLFST+G F P F  G+TV
Sbjct: 108 RPDLDNGIYAYAKAGFGDFIGFNSAWGYWLSALIGNVGYLVLLFSTVGKFVPAFAGGNTV 167

Query: 128 AAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTADIW 187
            A++ ASVLLW  H LVL G++ AAF+NT+ T+AK+VPL  FI IC  AF + +FT D W
Sbjct: 168 WAVLAASVLLWLTHALVLAGVRTAAFVNTIATIAKIVPLITFIAICAVAFDVGVFTEDFW 227

Query: 188 GKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLLLV 247
           G S+  LGSV  Q ++MMLVTVWVFIGIEGASI+S RA KRSDVGKATV GF+ VL+LL+
Sbjct: 228 G-SHAGLGSVFAQTKSMMLVTVWVFIGIEGASIYSKRARKRSDVGKATVGGFLFVLVLLI 286

Query: 248 LVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLCAE 307
            VN+LSMG+M + +LA L + SM  VL  VVG WG+VL+S G++ISLLGALL+W+LLC E
Sbjct: 287 GVNLLSMGIMHRAKLAGLPDASMGDVLSSVVGPWGSVLVSAGVIISLLGALLAWILLCGE 346

Query: 308 IMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKMLL 367
            M    +D TMP+   R N ++ PA ALW+TNI  Q+ LV+     G       Y  M  
Sbjct: 347 TMQVPGEDGTMPKLFGRINKHEAPAPALWITNIVSQICLVMTVLWDG------AYLAMAT 400

Query: 368 LATSMILIPYFWSAAYGLLLTLKGETYENDAR-ERSKDLVIAGIAVAYAVWLLYAGGLKY 426
           LA ++IL+PY  SAA+ L + +KGETYEN  R +R +D V+A +A  Y +WL+ A G   
Sbjct: 401 LAAALILVPYLLSAAFALKMVIKGETYENGPRSQRVRDAVVATVATLYGIWLVVAAGADA 460

Query: 427 LLLSALLYAPGAILFAKAKHEV-GQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           L+L+ALLY PGA +F  AK E+  + IF   E  +   + + ++V+   +  G L+L
Sbjct: 461 LMLAALLYLPGAAVFVWAKRELRAKRIFKPYEIGVLVLLALISVVSIISIVTGRLSL 517


>TR:E4GUK0_PROAA E4GUK0 Arginine/ornithine antiporter OS=Propionibacterium acnes
           HL005PA1 GN=HMPREF9594_02651 PE=4 SV=1
          Length = 518

 Score =  503 bits (1296), Expect = e-173
 Identities = 261/477 (54%), Positives = 340/477 (71%), Gaps = 9/477 (1%)

Query: 8   KLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLANR 67
           KL   A+ +LVVGSMIGGGIFSLPQN+AA+A  G ++IGW IT +GM+ LA V+Q LA R
Sbjct: 48  KLSFPAMLSLVVGSMIGGGIFSLPQNIAAAASPGPMVIGWTITGIGMICLAMVYQKLAIR 107

Query: 68  KPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDTV 127
           +P+LD G+YAYAKAGFGD++GF+SAWGYW+SA +GNVGY VLLFST+G F P F  G+TV
Sbjct: 108 RPDLDNGIYAYAKAGFGDFIGFNSAWGYWLSALIGNVGYLVLLFSTVGKFVPAFAGGNTV 167

Query: 128 AAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTADIW 187
            A++ ASVLLW  H LVL G++ AAF+NT+ T+AK+VPL  FI IC  AF + +FT D W
Sbjct: 168 WAVLAASVLLWLTHALVLAGVRTAAFVNTIATIAKIVPLITFIAICAVAFDVGVFTEDFW 227

Query: 188 GKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLLLV 247
           G S+  LGSV  Q ++MMLVTVWVFIGIEGASI+S RA KRSDVGKATV GF+ VL+LL+
Sbjct: 228 G-SHAGLGSVFAQTKSMMLVTVWVFIGIEGASIYSKRARKRSDVGKATVGGFLFVLVLLI 286

Query: 248 LVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLCAE 307
            VN+LSMG+M + +LA L + SM  VL  VVG WG+VL+S G++ISLLGALL+W+LLC E
Sbjct: 287 GVNLLSMGIMHRAKLAGLPDASMGDVLSSVVGPWGSVLVSAGVIISLLGALLAWILLCGE 346

Query: 308 IMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKMLL 367
            M    +D TMP+   R N ++ PA ALW+TNI  Q+ LV+     G       Y  M  
Sbjct: 347 TMQVPGEDGTMPKLFGRINKHEAPAPALWITNIVSQICLVMTVLWDG------AYLAMAT 400

Query: 368 LATSMILIPYFWSAAYGLLLTLKGETYENDAR-ERSKDLVIAGIAVAYAVWLLYAGGLKY 426
           LA ++IL+PY  SAA+ L + +KGETYEN  R +R +D V+A +A  Y +WL+ A G   
Sbjct: 401 LAAALILVPYLLSAAFALKMVIKGETYENGPRSQRVRDAVVATVATLYGIWLVVAAGADA 460

Query: 427 LLLSALLYAPGAILFAKAKHEV-GQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           L+L+ALLY PGA +F  AK E+  + IF   E  +   + + ++V+   +  G L+L
Sbjct: 461 LMLAALLYLPGAAVFVWAKRELRAKRIFKPYEIGVLVLLALISVVSIISIVTGRLSL 517


>TR:E4G280_PROAA E4G280 Arginine/ornithine antiporter OS=Propionibacterium acnes
           HL050PA1 GN=HMPREF9598_00751 PE=4 SV=1
          Length = 518

 Score =  503 bits (1296), Expect = e-173
 Identities = 261/477 (54%), Positives = 340/477 (71%), Gaps = 9/477 (1%)

Query: 8   KLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLANR 67
           KL   A+ +LVVGSMIGGGIFSLPQN+AA+A  G ++IGW IT +GM+ LA V+Q LA R
Sbjct: 48  KLSFPAMLSLVVGSMIGGGIFSLPQNIAAAASPGPMVIGWTITGIGMICLAMVYQKLAIR 107

Query: 68  KPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDTV 127
           +P+LD G+YAYAKAGFGD++GF+SAWGYW+SA +GNVGY VLLFST+G F P F  G+TV
Sbjct: 108 RPDLDNGIYAYAKAGFGDFIGFNSAWGYWLSALIGNVGYLVLLFSTVGKFVPAFAGGNTV 167

Query: 128 AAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTADIW 187
            A++ ASVLLW  H LVL G++ AAF+NT+ T+AK+VPL  FI IC  AF + +FT D W
Sbjct: 168 WAVLAASVLLWLTHALVLAGVRTAAFVNTIATIAKIVPLITFIAICAVAFDVGVFTEDFW 227

Query: 188 GKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLLLV 247
           G S+  LGSV  Q ++MMLVTVWVFIGIEGASI+S RA KRSDVGKATV GF+ VL+LL+
Sbjct: 228 G-SHAGLGSVFAQTKSMMLVTVWVFIGIEGASIYSKRARKRSDVGKATVGGFLFVLVLLI 286

Query: 248 LVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLCAE 307
            VN+LSMG+M + +LA L + SM  VL  VVG WG+VL+S G++ISLLGALL+W+LLC E
Sbjct: 287 GVNLLSMGIMHRAKLAGLPDASMGDVLSSVVGPWGSVLVSAGVIISLLGALLAWILLCGE 346

Query: 308 IMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKMLL 367
            M    +D TMP+   R N ++ PA ALW+TNI  Q+ LV+     G       Y  M  
Sbjct: 347 TMQVPGEDGTMPKLFGRINKHEAPAPALWITNIVSQICLVMTVLWDG------AYLAMAT 400

Query: 368 LATSMILIPYFWSAAYGLLLTLKGETYENDAR-ERSKDLVIAGIAVAYAVWLLYAGGLKY 426
           LA ++IL+PY  SAA+ L + +KGETYEN  R +R +D V+A +A  Y +WL+ A G   
Sbjct: 401 LAAALILVPYLLSAAFALKMVIKGETYENGPRSQRVRDAVVATVATLYGIWLVVAAGADA 460

Query: 427 LLLSALLYAPGAILFAKAKHEV-GQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           L+L+ALLY PGA +F  AK E+  + IF   E  +   + + ++V+   +  G L+L
Sbjct: 461 LMLAALLYLPGAAVFVWAKRELRAKRIFKPYEIGVLVLLALISVVSIISIVTGRLSL 517


>TR:E4FX60_PROAA E4FX60 Arginine/ornithine antiporter OS=Propionibacterium acnes
           HL050PA3 GN=HMPREF9600_01440 PE=4 SV=1
          Length = 518

 Score =  503 bits (1296), Expect = e-173
 Identities = 261/477 (54%), Positives = 340/477 (71%), Gaps = 9/477 (1%)

Query: 8   KLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLANR 67
           KL   A+ +LVVGSMIGGGIFSLPQN+AA+A  G ++IGW IT +GM+ LA V+Q LA R
Sbjct: 48  KLSFPAMLSLVVGSMIGGGIFSLPQNIAAAASPGPMVIGWTITGIGMICLAMVYQKLAIR 107

Query: 68  KPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDTV 127
           +P+LD G+YAYAKAGFGD++GF+SAWGYW+SA +GNVGY VLLFST+G F P F  G+TV
Sbjct: 108 RPDLDNGIYAYAKAGFGDFIGFNSAWGYWLSALIGNVGYLVLLFSTVGKFVPAFAGGNTV 167

Query: 128 AAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTADIW 187
            A++ ASVLLW  H LVL G++ AAF+NT+ T+AK+VPL  FI IC  AF + +FT D W
Sbjct: 168 WAVLAASVLLWLTHALVLAGVRTAAFVNTIATIAKIVPLITFIAICAVAFDVGVFTEDFW 227

Query: 188 GKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLLLV 247
           G S+  LGSV  Q ++MMLVTVWVFIGIEGASI+S RA KRSDVGKATV GF+ VL+LL+
Sbjct: 228 G-SHAGLGSVFAQTKSMMLVTVWVFIGIEGASIYSKRARKRSDVGKATVGGFLFVLVLLI 286

Query: 248 LVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLCAE 307
            VN+LSMG+M + +LA L + SM  VL  VVG WG+VL+S G++ISLLGALL+W+LLC E
Sbjct: 287 GVNLLSMGIMHRAKLAGLPDASMGDVLSSVVGPWGSVLVSAGVIISLLGALLAWILLCGE 346

Query: 308 IMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKMLL 367
            M    +D TMP+   R N ++ PA ALW+TNI  Q+ LV+     G       Y  M  
Sbjct: 347 TMQVPGEDGTMPKLFGRINKHEAPAPALWITNIVSQICLVMTVLWDG------AYLAMAT 400

Query: 368 LATSMILIPYFWSAAYGLLLTLKGETYENDAR-ERSKDLVIAGIAVAYAVWLLYAGGLKY 426
           LA ++IL+PY  SAA+ L + +KGETYEN  R +R +D V+A +A  Y +WL+ A G   
Sbjct: 401 LAAALILVPYLLSAAFALKMVIKGETYENGPRSQRVRDAVVATVATLYGIWLVVAAGADA 460

Query: 427 LLLSALLYAPGAILFAKAKHEV-GQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           L+L+ALLY PGA +F  AK E+  + IF   E  +   + + ++V+   +  G L+L
Sbjct: 461 LMLAALLYLPGAAVFVWAKRELRAKRIFKPYEIGVLVLLALISVVSIISIVTGRLSL 517


>TR:E4FSW5_PROAA E4FSW5 Arginine/ornithine antiporter OS=Propionibacterium acnes
           HL082PA1 GN=HMPREF9618_02615 PE=4 SV=1
          Length = 518

 Score =  503 bits (1296), Expect = e-173
 Identities = 261/477 (54%), Positives = 340/477 (71%), Gaps = 9/477 (1%)

Query: 8   KLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLANR 67
           KL   A+ +LVVGSMIGGGIFSLPQN+AA+A  G ++IGW IT +GM+ LA V+Q LA R
Sbjct: 48  KLSFPAMLSLVVGSMIGGGIFSLPQNIAAAASPGPMVIGWTITGIGMICLAMVYQKLAIR 107

Query: 68  KPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDTV 127
           +P+LD G+YAYAKAGFGD++GF+SAWGYW+SA +GNVGY VLLFST+G F P F  G+TV
Sbjct: 108 RPDLDNGIYAYAKAGFGDFIGFNSAWGYWLSALIGNVGYLVLLFSTVGKFVPAFAGGNTV 167

Query: 128 AAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTADIW 187
            A++ ASVLLW  H LVL G++ AAF+NT+ T+AK+VPL  FI IC  AF + +FT D W
Sbjct: 168 WAVLAASVLLWLTHALVLAGVRTAAFVNTIATIAKIVPLITFIAICAVAFDVGVFTEDFW 227

Query: 188 GKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLLLV 247
           G S+  LGSV  Q ++MMLVTVWVFIGIEGASI+S RA KRSDVGKATV GF+ VL+LL+
Sbjct: 228 G-SHAGLGSVFAQTKSMMLVTVWVFIGIEGASIYSKRARKRSDVGKATVGGFLFVLVLLI 286

Query: 248 LVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLCAE 307
            VN+LSMG+M + +LA L + SM  VL  VVG WG+VL+S G++ISLLGALL+W+LLC E
Sbjct: 287 GVNLLSMGIMHRAKLAGLPDASMGDVLSSVVGPWGSVLVSAGVIISLLGALLAWILLCGE 346

Query: 308 IMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKMLL 367
            M    +D TMP+   R N ++ PA ALW+TNI  Q+ LV+     G       Y  M  
Sbjct: 347 TMQVPGEDGTMPKLFGRINKHEAPAPALWITNIVSQICLVMTVLWDG------AYLAMAT 400

Query: 368 LATSMILIPYFWSAAYGLLLTLKGETYENDAR-ERSKDLVIAGIAVAYAVWLLYAGGLKY 426
           LA ++IL+PY  SAA+ L + +KGETYEN  R +R +D V+A +A  Y +WL+ A G   
Sbjct: 401 LAAALILVPYLLSAAFALKMVIKGETYENGPRSQRVRDAVVATVATLYGIWLVVAAGADA 460

Query: 427 LLLSALLYAPGAILFAKAKHEV-GQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           L+L+ALLY PGA +F  AK E+  + IF   E  +   + + ++V+   +  G L+L
Sbjct: 461 LMLAALLYLPGAAVFVWAKRELRAKRIFKPYEIGVLVLLALISVVSIISIVTGRLSL 517


>TR:E4FHZ3_PROAA E4FHZ3 Arginine/ornithine antiporter OS=Propionibacterium acnes
           HL037PA1 GN=HMPREF9620_01682 PE=4 SV=1
          Length = 518

 Score =  503 bits (1296), Expect = e-173
 Identities = 261/477 (54%), Positives = 340/477 (71%), Gaps = 9/477 (1%)

Query: 8   KLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLANR 67
           KL   A+ +LVVGSMIGGGIFSLPQN+AA+A  G ++IGW IT +GM+ LA V+Q LA R
Sbjct: 48  KLSFPAMLSLVVGSMIGGGIFSLPQNIAAAASPGPMVIGWTITGIGMICLAMVYQKLAIR 107

Query: 68  KPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDTV 127
           +P+LD G+YAYAKAGFGD++GF+SAWGYW+SA +GNVGY VLLFST+G F P F  G+TV
Sbjct: 108 RPDLDNGIYAYAKAGFGDFIGFNSAWGYWLSALIGNVGYLVLLFSTVGKFVPAFAGGNTV 167

Query: 128 AAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTADIW 187
            A++ ASVLLW  H LVL G++ AAF+NT+ T+AK+VPL  FI IC  AF + +FT D W
Sbjct: 168 WAVLAASVLLWLTHALVLAGVRTAAFVNTIATIAKIVPLITFIAICAVAFDVGVFTEDFW 227

Query: 188 GKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLLLV 247
           G S+  LGSV  Q ++MMLVTVWVFIGIEGASI+S RA KRSDVGKATV GF+ VL+LL+
Sbjct: 228 G-SHAGLGSVFAQTKSMMLVTVWVFIGIEGASIYSKRARKRSDVGKATVGGFLFVLVLLI 286

Query: 248 LVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLCAE 307
            VN+LSMG+M + +LA L + SM  VL  VVG WG+VL+S G++ISLLGALL+W+LLC E
Sbjct: 287 GVNLLSMGIMHRAKLAGLPDASMGDVLSSVVGPWGSVLVSAGVIISLLGALLAWILLCGE 346

Query: 308 IMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKMLL 367
            M    +D TMP+   R N ++ PA ALW+TNI  Q+ LV+     G       Y  M  
Sbjct: 347 TMQVPGEDGTMPKLFGRINKHEAPAPALWITNIVSQICLVMTVLWDG------AYLAMAT 400

Query: 368 LATSMILIPYFWSAAYGLLLTLKGETYENDAR-ERSKDLVIAGIAVAYAVWLLYAGGLKY 426
           LA ++IL+PY  SAA+ L + +KGETYEN  R +R +D V+A +A  Y +WL+ A G   
Sbjct: 401 LAAALILVPYLLSAAFALKMVIKGETYENGPRSQRVRDAVVATVATLYGIWLVVAAGADA 460

Query: 427 LLLSALLYAPGAILFAKAKHEV-GQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           L+L+ALLY PGA +F  AK E+  + IF   E  +   + + ++V+   +  G L+L
Sbjct: 461 LMLAALLYLPGAAVFVWAKRELRAKRIFKPYEIGVLVLLALISVVSIISIVTGRLSL 517


>TR:E4FAY4_PROAA E4FAY4 Arginine/ornithine antiporter OS=Propionibacterium acnes
           HL013PA1 GN=HMPREF9567_01788 PE=4 SV=1
          Length = 518

 Score =  503 bits (1296), Expect = e-173
 Identities = 261/477 (54%), Positives = 340/477 (71%), Gaps = 9/477 (1%)

Query: 8   KLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLANR 67
           KL   A+ +LVVGSMIGGGIFSLPQN+AA+A  G ++IGW IT +GM+ LA V+Q LA R
Sbjct: 48  KLSFPAMLSLVVGSMIGGGIFSLPQNIAAAASPGPMVIGWTITGIGMICLAMVYQKLAIR 107

Query: 68  KPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDTV 127
           +P+LD G+YAYAKAGFGD++GF+SAWGYW+SA +GNVGY VLLFST+G F P F  G+TV
Sbjct: 108 RPDLDNGIYAYAKAGFGDFIGFNSAWGYWLSALIGNVGYLVLLFSTVGKFVPAFAGGNTV 167

Query: 128 AAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTADIW 187
            A++ ASVLLW  H LVL G++ AAF+NT+ T+AK+VPL  FI IC  AF + +FT D W
Sbjct: 168 WAVLAASVLLWLTHALVLAGVRTAAFVNTIATIAKIVPLITFIAICAVAFDVGVFTEDFW 227

Query: 188 GKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLLLV 247
           G S+  LGSV  Q ++MMLVTVWVFIGIEGASI+S RA KRSDVGKATV GF+ VL+LL+
Sbjct: 228 G-SHAGLGSVFAQTKSMMLVTVWVFIGIEGASIYSKRARKRSDVGKATVGGFLFVLVLLI 286

Query: 248 LVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLCAE 307
            VN+LSMG+M + +LA L + SM  VL  VVG WG+VL+S G++ISLLGALL+W+LLC E
Sbjct: 287 GVNLLSMGIMHRAKLAGLPDASMGDVLSSVVGPWGSVLVSAGVIISLLGALLAWILLCGE 346

Query: 308 IMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKMLL 367
            M    +D TMP+   R N ++ PA ALW+TNI  Q+ LV+     G       Y  M  
Sbjct: 347 TMQVPGEDGTMPKLFGRINKHEAPAPALWITNIVSQICLVMTVLWDG------AYLAMAT 400

Query: 368 LATSMILIPYFWSAAYGLLLTLKGETYENDAR-ERSKDLVIAGIAVAYAVWLLYAGGLKY 426
           LA ++IL+PY  SAA+ L + +KGETYEN  R +R +D V+A +A  Y +WL+ A G   
Sbjct: 401 LAAALILVPYLLSAAFALKMVIKGETYENGPRSQRVRDAVVATVATLYGIWLVVAAGADA 460

Query: 427 LLLSALLYAPGAILFAKAKHEV-GQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           L+L+ALLY PGA +F  AK E+  + IF   E  +   + + ++V+   +  G L+L
Sbjct: 461 LMLAALLYLPGAAVFVWAKRELRAKRIFKPYEIGVLVLLALISVVSIISIVTGRLSL 517


>TR:E4F5U3_PROAA E4F5U3 Arginine/ornithine antiporter OS=Propionibacterium acnes
           HL110PA1 GN=HMPREF9575_02617 PE=4 SV=1
          Length = 518

 Score =  503 bits (1296), Expect = e-173
 Identities = 261/477 (54%), Positives = 340/477 (71%), Gaps = 9/477 (1%)

Query: 8   KLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLANR 67
           KL   A+ +LVVGSMIGGGIFSLPQN+AA+A  G ++IGW IT +GM+ LA V+Q LA R
Sbjct: 48  KLSFPAMLSLVVGSMIGGGIFSLPQNIAAAASPGPMVIGWTITGIGMICLAMVYQKLAIR 107

Query: 68  KPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDTV 127
           +P+LD G+YAYAKAGFGD++GF+SAWGYW+SA +GNVGY VLLFST+G F P F  G+TV
Sbjct: 108 RPDLDNGIYAYAKAGFGDFIGFNSAWGYWLSALIGNVGYLVLLFSTVGKFVPAFAGGNTV 167

Query: 128 AAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTADIW 187
            A++ ASVLLW  H LVL G++ AAF+NT+ T+AK+VPL  FI IC  AF + +FT D W
Sbjct: 168 WAVLAASVLLWLTHALVLAGVRTAAFVNTIATIAKIVPLITFIAICAVAFDVGVFTEDFW 227

Query: 188 GKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLLLV 247
           G S+  LGSV  Q ++MMLVTVWVFIGIEGASI+S RA KRSDVGKATV GF+ VL+LL+
Sbjct: 228 G-SHAGLGSVFAQTKSMMLVTVWVFIGIEGASIYSKRARKRSDVGKATVGGFLFVLVLLI 286

Query: 248 LVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLCAE 307
            VN+LSMG+M + +LA L + SM  VL  VVG WG+VL+S G++ISLLGALL+W+LLC E
Sbjct: 287 GVNLLSMGIMHRAKLAGLPDASMGDVLSSVVGPWGSVLVSAGVIISLLGALLAWILLCGE 346

Query: 308 IMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKMLL 367
            M    +D TMP+   R N ++ PA ALW+TNI  Q+ LV+     G       Y  M  
Sbjct: 347 TMQVPGEDGTMPKLFGRINKHEAPAPALWITNIVSQICLVMTVLWDG------AYLAMAT 400

Query: 368 LATSMILIPYFWSAAYGLLLTLKGETYENDAR-ERSKDLVIAGIAVAYAVWLLYAGGLKY 426
           LA ++IL+PY  SAA+ L + +KGETYEN  R +R +D V+A +A  Y +WL+ A G   
Sbjct: 401 LAAALILVPYLLSAAFALKMVIKGETYENGPRSQRVRDAVVATVATLYGIWLVVAAGADA 460

Query: 427 LLLSALLYAPGAILFAKAKHEV-GQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           L+L+ALLY PGA +F  AK E+  + IF   E  +   + + ++V+   +  G L+L
Sbjct: 461 LMLAALLYLPGAAVFVWAKRELRAKRIFKPYEIGVLVLLALISVVSIISIVTGRLSL 517


>TR:E4EVK4_PROAA E4EVK4 Arginine/ornithine antiporter OS=Propionibacterium acnes
           HL053PA1 GN=HMPREF9564_01591 PE=4 SV=1
          Length = 518

 Score =  503 bits (1296), Expect = e-173
 Identities = 261/477 (54%), Positives = 340/477 (71%), Gaps = 9/477 (1%)

Query: 8   KLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLANR 67
           KL   A+ +LVVGSMIGGGIFSLPQN+AA+A  G ++IGW IT +GM+ LA V+Q LA R
Sbjct: 48  KLSFPAMLSLVVGSMIGGGIFSLPQNIAAAASPGPMVIGWTITGIGMICLAMVYQKLAIR 107

Query: 68  KPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDTV 127
           +P+LD G+YAYAKAGFGD++GF+SAWGYW+SA +GNVGY VLLFST+G F P F  G+TV
Sbjct: 108 RPDLDNGIYAYAKAGFGDFIGFNSAWGYWLSALIGNVGYLVLLFSTVGKFVPAFAGGNTV 167

Query: 128 AAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTADIW 187
            A++ ASVLLW  H LVL G++ AAF+NT+ T+AK+VPL  FI IC  AF + +FT D W
Sbjct: 168 WAVLAASVLLWLTHALVLAGVRTAAFVNTIATIAKIVPLITFIAICAVAFDVGVFTEDFW 227

Query: 188 GKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLLLV 247
           G S+  LGSV  Q ++MMLVTVWVFIGIEGASI+S RA KRSDVGKATV GF+ VL+LL+
Sbjct: 228 G-SHAGLGSVFAQTKSMMLVTVWVFIGIEGASIYSKRARKRSDVGKATVGGFLFVLVLLI 286

Query: 248 LVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLCAE 307
            VN+LSMG+M + +LA L + SM  VL  VVG WG+VL+S G++ISLLGALL+W+LLC E
Sbjct: 287 GVNLLSMGIMHRAKLAGLPDASMGDVLSSVVGPWGSVLVSAGVIISLLGALLAWILLCGE 346

Query: 308 IMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKMLL 367
            M    +D TMP+   R N ++ PA ALW+TNI  Q+ LV+     G       Y  M  
Sbjct: 347 TMQVPGEDGTMPKLFGRINKHEAPAPALWITNIVSQICLVMTVLWDG------AYLAMAT 400

Query: 368 LATSMILIPYFWSAAYGLLLTLKGETYENDAR-ERSKDLVIAGIAVAYAVWLLYAGGLKY 426
           LA ++IL+PY  SAA+ L + +KGETYEN  R +R +D V+A +A  Y +WL+ A G   
Sbjct: 401 LAAALILVPYLLSAAFALKMVIKGETYENGPRSQRVRDAVVATVATLYGIWLVVAAGADA 460

Query: 427 LLLSALLYAPGAILFAKAKHEV-GQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           L+L+ALLY PGA +F  AK E+  + IF   E  +   + + ++V+   +  G L+L
Sbjct: 461 LMLAALLYLPGAAVFVWAKRELRAKRIFKPYEIGVLVLLALISVVSIISIVTGRLSL 517


>TR:E4ELB4_PROAA E4ELB4 Arginine/ornithine antiporter OS=Propionibacterium acnes
           HL083PA1 GN=HMPREF9585_00856 PE=4 SV=1
          Length = 518

 Score =  503 bits (1296), Expect = e-173
 Identities = 261/477 (54%), Positives = 340/477 (71%), Gaps = 9/477 (1%)

Query: 8   KLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLANR 67
           KL   A+ +LVVGSMIGGGIFSLPQN+AA+A  G ++IGW IT +GM+ LA V+Q LA R
Sbjct: 48  KLSFPAMLSLVVGSMIGGGIFSLPQNIAAAASPGPMVIGWTITGIGMICLAMVYQKLAIR 107

Query: 68  KPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDTV 127
           +P+LD G+YAYAKAGFGD++GF+SAWGYW+SA +GNVGY VLLFST+G F P F  G+TV
Sbjct: 108 RPDLDNGIYAYAKAGFGDFIGFNSAWGYWLSALIGNVGYLVLLFSTVGKFVPAFAGGNTV 167

Query: 128 AAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTADIW 187
            A++ ASVLLW  H LVL G++ AAF+NT+ T+AK+VPL  FI IC  AF + +FT D W
Sbjct: 168 WAVLAASVLLWLTHALVLAGVRTAAFVNTIATIAKIVPLITFIAICAVAFDVGVFTEDFW 227

Query: 188 GKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLLLV 247
           G S+  LGSV  Q ++MMLVTVWVFIGIEGASI+S RA KRSDVGKATV GF+ VL+LL+
Sbjct: 228 G-SHAGLGSVFAQTKSMMLVTVWVFIGIEGASIYSKRARKRSDVGKATVGGFLFVLVLLI 286

Query: 248 LVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLCAE 307
            VN+LSMG+M + +LA L + SM  VL  VVG WG+VL+S G++ISLLGALL+W+LLC E
Sbjct: 287 GVNLLSMGIMHRAKLAGLPDASMGDVLSSVVGPWGSVLVSAGVIISLLGALLAWILLCGE 346

Query: 308 IMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKMLL 367
            M    +D TMP+   R N ++ PA ALW+TNI  Q+ LV+     G       Y  M  
Sbjct: 347 TMQVPGEDGTMPKLFGRINKHEAPAPALWITNIVSQICLVMTVLWDG------AYLAMAT 400

Query: 368 LATSMILIPYFWSAAYGLLLTLKGETYENDAR-ERSKDLVIAGIAVAYAVWLLYAGGLKY 426
           LA ++IL+PY  SAA+ L + +KGETYEN  R +R +D V+A +A  Y +WL+ A G   
Sbjct: 401 LAAALILVPYLLSAAFALKMVIKGETYENGPRSQRVRDAVVATVATLYGIWLVVAAGADA 460

Query: 427 LLLSALLYAPGAILFAKAKHEV-GQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           L+L+ALLY PGA +F  AK E+  + IF   E  +   + + ++V+   +  G L+L
Sbjct: 461 LMLAALLYLPGAAVFVWAKRELRAKRIFKPYEIGVLVLLALISVVSIISIVTGRLSL 517


>TR:E4EFS7_PROAA E4EFS7 Arginine/ornithine antiporter OS=Propionibacterium acnes
           HL045PA1 GN=HMPREF9566_01577 PE=4 SV=1
          Length = 518

 Score =  503 bits (1296), Expect = e-173
 Identities = 261/477 (54%), Positives = 340/477 (71%), Gaps = 9/477 (1%)

Query: 8   KLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLANR 67
           KL   A+ +LVVGSMIGGGIFSLPQN+AA+A  G ++IGW IT +GM+ LA V+Q LA R
Sbjct: 48  KLSFPAMLSLVVGSMIGGGIFSLPQNIAAAASPGPMVIGWTITGIGMICLAMVYQKLAIR 107

Query: 68  KPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDTV 127
           +P+LD G+YAYAKAGFGD++GF+SAWGYW+SA +GNVGY VLLFST+G F P F  G+TV
Sbjct: 108 RPDLDNGIYAYAKAGFGDFIGFNSAWGYWLSALIGNVGYLVLLFSTVGKFVPAFAGGNTV 167

Query: 128 AAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTADIW 187
            A++ ASVLLW  H LVL G++ AAF+NT+ T+AK+VPL  FI IC  AF + +FT D W
Sbjct: 168 WAVLAASVLLWLTHALVLAGVRTAAFVNTIATIAKIVPLITFIAICAVAFDVGVFTEDFW 227

Query: 188 GKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLLLV 247
           G S+  LGSV  Q ++MMLVTVWVFIGIEGASI+S RA KRSDVGKATV GF+ VL+LL+
Sbjct: 228 G-SHAGLGSVFAQTKSMMLVTVWVFIGIEGASIYSKRARKRSDVGKATVGGFLFVLVLLI 286

Query: 248 LVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLCAE 307
            VN+LSMG+M + +LA L + SM  VL  VVG WG+VL+S G++ISLLGALL+W+LLC E
Sbjct: 287 GVNLLSMGIMHRAKLAGLPDASMGDVLSSVVGPWGSVLVSAGVIISLLGALLAWILLCGE 346

Query: 308 IMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKMLL 367
            M    +D TMP+   R N ++ PA ALW+TNI  Q+ LV+     G       Y  M  
Sbjct: 347 TMQVPGEDGTMPKLFGRINKHEAPAPALWITNIVSQICLVMTVLWDG------AYLAMAT 400

Query: 368 LATSMILIPYFWSAAYGLLLTLKGETYENDAR-ERSKDLVIAGIAVAYAVWLLYAGGLKY 426
           LA ++IL+PY  SAA+ L + +KGETYEN  R +R +D V+A +A  Y +WL+ A G   
Sbjct: 401 LAAALILVPYLLSAAFALKMVIKGETYENGPRSQRVRDAVVATVATLYGIWLVVAAGADA 460

Query: 427 LLLSALLYAPGAILFAKAKHEV-GQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           L+L+ALLY PGA +F  AK E+  + IF   E  +   + + ++V+   +  G L+L
Sbjct: 461 LMLAALLYLPGAAVFVWAKRELRAKRIFKPYEIGVLVLLALISVVSIISIVTGRLSL 517


>TR:E4EA09_PROAA E4EA09 Arginine/ornithine antiporter OS=Propionibacterium acnes
           HL074PA1 GN=HMPREF9574_02196 PE=4 SV=1
          Length = 518

 Score =  503 bits (1296), Expect = e-173
 Identities = 261/477 (54%), Positives = 340/477 (71%), Gaps = 9/477 (1%)

Query: 8   KLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLANR 67
           KL   A+ +LVVGSMIGGGIFSLPQN+AA+A  G ++IGW IT +GM+ LA V+Q LA R
Sbjct: 48  KLSFPAMLSLVVGSMIGGGIFSLPQNIAAAASPGPMVIGWTITGIGMICLAMVYQKLAIR 107

Query: 68  KPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDTV 127
           +P+LD G+YAYAKAGFGD++GF+SAWGYW+SA +GNVGY VLLFST+G F P F  G+TV
Sbjct: 108 RPDLDNGIYAYAKAGFGDFIGFNSAWGYWLSALIGNVGYLVLLFSTVGKFVPAFAGGNTV 167

Query: 128 AAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTADIW 187
            A++ ASVLLW  H LVL G++ AAF+NT+ T+AK+VPL  FI IC  AF + +FT D W
Sbjct: 168 WAVLAASVLLWLTHALVLAGVRTAAFVNTIATIAKIVPLITFIAICAVAFDVGVFTEDFW 227

Query: 188 GKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLLLV 247
           G S+  LGSV  Q ++MMLVTVWVFIGIEGASI+S RA KRSDVGKATV GF+ VL+LL+
Sbjct: 228 G-SHAGLGSVFAQTKSMMLVTVWVFIGIEGASIYSKRARKRSDVGKATVGGFLFVLVLLI 286

Query: 248 LVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLCAE 307
            VN+LSMG+M + +LA L + SM  VL  VVG WG+VL+S G++ISLLGALL+W+LLC E
Sbjct: 287 GVNLLSMGIMHRAKLAGLPDASMGDVLSSVVGPWGSVLVSAGVIISLLGALLAWILLCGE 346

Query: 308 IMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKMLL 367
            M    +D TMP+   R N ++ PA ALW+TNI  Q+ LV+     G       Y  M  
Sbjct: 347 TMQVPGEDGTMPKLFGRINKHEAPAPALWITNIVSQICLVMTVLWDG------AYLAMAT 400

Query: 368 LATSMILIPYFWSAAYGLLLTLKGETYENDAR-ERSKDLVIAGIAVAYAVWLLYAGGLKY 426
           LA ++IL+PY  SAA+ L + +KGETYEN  R +R +D V+A +A  Y +WL+ A G   
Sbjct: 401 LAAALILVPYLLSAAFALKMVIKGETYENGPRSQRVRDAVVATVATLYGIWLVVAAGADA 460

Query: 427 LLLSALLYAPGAILFAKAKHEV-GQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           L+L+ALLY PGA +F  AK E+  + IF   E  +   + + ++V+   +  G L+L
Sbjct: 461 LMLAALLYLPGAAVFVWAKRELRAKRIFKPYEIGVLVLLALISVVSIISIVTGRLSL 517


>TR:E4DZY7_PROAA E4DZY7 Arginine/ornithine antiporter OS=Propionibacterium acnes
           HL110PA2 GN=HMPREF9576_01217 PE=4 SV=1
          Length = 518

 Score =  503 bits (1296), Expect = e-173
 Identities = 261/477 (54%), Positives = 340/477 (71%), Gaps = 9/477 (1%)

Query: 8   KLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLANR 67
           KL   A+ +LVVGSMIGGGIFSLPQN+AA+A  G ++IGW IT +GM+ LA V+Q LA R
Sbjct: 48  KLSFPAMLSLVVGSMIGGGIFSLPQNIAAAASPGPMVIGWTITGIGMICLAMVYQKLAIR 107

Query: 68  KPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDTV 127
           +P+LD G+YAYAKAGFGD++GF+SAWGYW+SA +GNVGY VLLFST+G F P F  G+TV
Sbjct: 108 RPDLDNGIYAYAKAGFGDFIGFNSAWGYWLSALIGNVGYLVLLFSTVGKFVPAFAGGNTV 167

Query: 128 AAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTADIW 187
            A++ ASVLLW  H LVL G++ AAF+NT+ T+AK+VPL  FI IC  AF + +FT D W
Sbjct: 168 WAVLAASVLLWLTHALVLAGVRTAAFVNTIATIAKIVPLITFIAICAVAFDVGVFTEDFW 227

Query: 188 GKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLLLV 247
           G S+  LGSV  Q ++MMLVTVWVFIGIEGASI+S RA KRSDVGKATV GF+ VL+LL+
Sbjct: 228 G-SHAGLGSVFAQTKSMMLVTVWVFIGIEGASIYSKRARKRSDVGKATVGGFLFVLVLLI 286

Query: 248 LVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLCAE 307
            VN+LSMG+M + +LA L + SM  VL  VVG WG+VL+S G++ISLLGALL+W+LLC E
Sbjct: 287 GVNLLSMGIMHRAKLAGLPDASMGDVLSSVVGPWGSVLVSAGVIISLLGALLAWILLCGE 346

Query: 308 IMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKMLL 367
            M    +D TMP+   R N ++ PA ALW+TNI  Q+ LV+     G       Y  M  
Sbjct: 347 TMQVPGEDGTMPKLFGRINKHEAPAPALWITNIVSQICLVMTVLWDG------AYLAMAT 400

Query: 368 LATSMILIPYFWSAAYGLLLTLKGETYENDAR-ERSKDLVIAGIAVAYAVWLLYAGGLKY 426
           LA ++IL+PY  SAA+ L + +KGETYEN  R +R +D V+A +A  Y +WL+ A G   
Sbjct: 401 LAAALILVPYLLSAAFALKMVIKGETYENGPRSQRVRDAVVATVATLYGIWLVVAAGADA 460

Query: 427 LLLSALLYAPGAILFAKAKHEV-GQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           L+L+ALLY PGA +F  AK E+  + IF   E  +   + + ++V+   +  G L+L
Sbjct: 461 LMLAALLYLPGAAVFVWAKRELRAKRIFKPYEIGVLVLLALISVVSIISIVTGRLSL 517


>TR:E4D010_PROAA E4D010 Arginine/ornithine antiporter OS=Propionibacterium acnes
           HL063PA2 GN=HMPREF9612_01731 PE=4 SV=1
          Length = 518

 Score =  503 bits (1296), Expect = e-173
 Identities = 261/477 (54%), Positives = 340/477 (71%), Gaps = 9/477 (1%)

Query: 8   KLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLANR 67
           KL   A+ +LVVGSMIGGGIFSLPQN+AA+A  G ++IGW IT +GM+ LA V+Q LA R
Sbjct: 48  KLSFPAMLSLVVGSMIGGGIFSLPQNIAAAASPGPMVIGWTITGIGMICLAMVYQKLAIR 107

Query: 68  KPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDTV 127
           +P+LD G+YAYAKAGFGD++GF+SAWGYW+SA +GNVGY VLLFST+G F P F  G+TV
Sbjct: 108 RPDLDNGIYAYAKAGFGDFIGFNSAWGYWLSALIGNVGYLVLLFSTVGKFVPAFAGGNTV 167

Query: 128 AAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTADIW 187
            A++ ASVLLW  H LVL G++ AAF+NT+ T+AK+VPL  FI IC  AF + +FT D W
Sbjct: 168 WAVLAASVLLWLTHALVLAGVRTAAFVNTIATIAKIVPLITFIAICAVAFDVGVFTEDFW 227

Query: 188 GKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLLLV 247
           G S+  LGSV  Q ++MMLVTVWVFIGIEGASI+S RA KRSDVGKATV GF+ VL+LL+
Sbjct: 228 G-SHAGLGSVFAQTKSMMLVTVWVFIGIEGASIYSKRARKRSDVGKATVGGFLFVLVLLI 286

Query: 248 LVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLCAE 307
            VN+LSMG+M + +LA L + SM  VL  VVG WG+VL+S G++ISLLGALL+W+LLC E
Sbjct: 287 GVNLLSMGIMHRAKLAGLPDASMGDVLSSVVGPWGSVLVSAGVIISLLGALLAWILLCGE 346

Query: 308 IMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKMLL 367
            M    +D TMP+   R N ++ PA ALW+TNI  Q+ LV+     G       Y  M  
Sbjct: 347 TMQVPGEDGTMPKLFGRINKHEAPAPALWITNIVSQICLVMTVLWDG------AYLAMAT 400

Query: 368 LATSMILIPYFWSAAYGLLLTLKGETYENDAR-ERSKDLVIAGIAVAYAVWLLYAGGLKY 426
           LA ++IL+PY  SAA+ L + +KGETYEN  R +R +D V+A +A  Y +WL+ A G   
Sbjct: 401 LAAALILVPYLLSAAFALKMVIKGETYENGPRSQRVRDAVVATVATLYGIWLVVAAGADA 460

Query: 427 LLLSALLYAPGAILFAKAKHEV-GQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           L+L+ALLY PGA +F  AK E+  + IF   E  +   + + ++V+   +  G L+L
Sbjct: 461 LMLAALLYLPGAAVFVWAKRELRAKRIFKPYEIGVLVLLALISVVSIISIVTGRLSL 517


>TR:E4BY80_PROAA E4BY80 Arginine/ornithine antiporter OS=Propionibacterium acnes
           HL007PA1 GN=HMPREF9616_01570 PE=4 SV=1
          Length = 518

 Score =  503 bits (1296), Expect = e-173
 Identities = 261/477 (54%), Positives = 340/477 (71%), Gaps = 9/477 (1%)

Query: 8   KLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLANR 67
           KL   A+ +LVVGSMIGGGIFSLPQN+AA+A  G ++IGW IT +GM+ LA V+Q LA R
Sbjct: 48  KLSFPAMLSLVVGSMIGGGIFSLPQNIAAAASPGPMVIGWTITGIGMICLAMVYQKLAIR 107

Query: 68  KPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDTV 127
           +P+LD G+YAYAKAGFGD++GF+SAWGYW+SA +GNVGY VLLFST+G F P F  G+TV
Sbjct: 108 RPDLDNGIYAYAKAGFGDFIGFNSAWGYWLSALIGNVGYLVLLFSTVGKFVPAFAGGNTV 167

Query: 128 AAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTADIW 187
            A++ ASVLLW  H LVL G++ AAF+NT+ T+AK+VPL  FI IC  AF + +FT D W
Sbjct: 168 WAVLAASVLLWLTHALVLAGVRTAAFVNTIATIAKIVPLITFIAICAVAFDVGVFTEDFW 227

Query: 188 GKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLLLV 247
           G S+  LGSV  Q ++MMLVTVWVFIGIEGASI+S RA KRSDVGKATV GF+ VL+LL+
Sbjct: 228 G-SHAGLGSVFAQTKSMMLVTVWVFIGIEGASIYSKRARKRSDVGKATVGGFLFVLVLLI 286

Query: 248 LVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLCAE 307
            VN+LSMG+M + +LA L + SM  VL  VVG WG+VL+S G++ISLLGALL+W+LLC E
Sbjct: 287 GVNLLSMGIMHRAKLAGLPDASMGDVLSSVVGPWGSVLVSAGVIISLLGALLAWILLCGE 346

Query: 308 IMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKMLL 367
            M    +D TMP+   R N ++ PA ALW+TNI  Q+ LV+     G       Y  M  
Sbjct: 347 TMQVPGEDGTMPKLFGRINKHEAPAPALWITNIVSQICLVMTVLWDG------AYLAMAT 400

Query: 368 LATSMILIPYFWSAAYGLLLTLKGETYENDAR-ERSKDLVIAGIAVAYAVWLLYAGGLKY 426
           LA ++IL+PY  SAA+ L + +KGETYEN  R +R +D V+A +A  Y +WL+ A G   
Sbjct: 401 LAAALILVPYLLSAAFALKMVIKGETYENGPRSQRVRDAVVATVATLYGIWLVVAAGADA 460

Query: 427 LLLSALLYAPGAILFAKAKHEV-GQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           L+L+ALLY PGA +F  AK E+  + IF   E  +   + + ++V+   +  G L+L
Sbjct: 461 LMLAALLYLPGAAVFVWAKRELRAKRIFKPYEIGVLVLLALISVVSIISIVTGRLSL 517


>TR:E4BRA5_PROAA E4BRA5 Arginine/ornithine antiporter OS=Propionibacterium acnes
           HL056PA1 GN=HMPREF9617_01672 PE=4 SV=1
          Length = 518

 Score =  503 bits (1296), Expect = e-173
 Identities = 261/477 (54%), Positives = 340/477 (71%), Gaps = 9/477 (1%)

Query: 8   KLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLANR 67
           KL   A+ +LVVGSMIGGGIFSLPQN+AA+A  G ++IGW IT +GM+ LA V+Q LA R
Sbjct: 48  KLSFPAMLSLVVGSMIGGGIFSLPQNIAAAASPGPMVIGWTITGIGMICLAMVYQKLAIR 107

Query: 68  KPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDTV 127
           +P+LD G+YAYAKAGFGD++GF+SAWGYW+SA +GNVGY VLLFST+G F P F  G+TV
Sbjct: 108 RPDLDNGIYAYAKAGFGDFIGFNSAWGYWLSALIGNVGYLVLLFSTVGKFVPAFAGGNTV 167

Query: 128 AAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTADIW 187
            A++ ASVLLW  H LVL G++ AAF+NT+ T+AK+VPL  FI IC  AF + +FT D W
Sbjct: 168 WAVLAASVLLWLTHALVLAGVRTAAFVNTIATIAKIVPLITFIAICAVAFDVGVFTEDFW 227

Query: 188 GKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLLLV 247
           G S+  LGSV  Q ++MMLVTVWVFIGIEGASI+S RA KRSDVGKATV GF+ VL+LL+
Sbjct: 228 G-SHAGLGSVFAQTKSMMLVTVWVFIGIEGASIYSKRARKRSDVGKATVGGFLFVLVLLI 286

Query: 248 LVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLCAE 307
            VN+LSMG+M + +LA L + SM  VL  VVG WG+VL+S G++ISLLGALL+W+LLC E
Sbjct: 287 GVNLLSMGIMHRAKLAGLPDASMGDVLSSVVGPWGSVLVSAGVIISLLGALLAWILLCGE 346

Query: 308 IMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKMLL 367
            M    +D TMP+   R N ++ PA ALW+TNI  Q+ LV+     G       Y  M  
Sbjct: 347 TMQVPGEDGTMPKLFGRINKHEAPAPALWITNIVSQICLVMTVLWDG------AYLAMAT 400

Query: 368 LATSMILIPYFWSAAYGLLLTLKGETYENDAR-ERSKDLVIAGIAVAYAVWLLYAGGLKY 426
           LA ++IL+PY  SAA+ L + +KGETYEN  R +R +D V+A +A  Y +WL+ A G   
Sbjct: 401 LAAALILVPYLLSAAFALKMVIKGETYENGPRSQRVRDAVVATVATLYGIWLVVAAGADA 460

Query: 427 LLLSALLYAPGAILFAKAKHEV-GQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           L+L+ALLY PGA +F  AK E+  + IF   E  +   + + ++V+   +  G L+L
Sbjct: 461 LMLAALLYLPGAAVFVWAKRELRAKRIFKPYEIGVLVLLALISVVSIISIVTGRLSL 517


>TR:E4AXW7_PROAA E4AXW7 Arginine/ornithine antiporter OS=Propionibacterium acnes
           HL027PA1 GN=HMPREF9609_02404 PE=4 SV=1
          Length = 518

 Score =  503 bits (1296), Expect = e-173
 Identities = 261/477 (54%), Positives = 340/477 (71%), Gaps = 9/477 (1%)

Query: 8   KLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLANR 67
           KL   A+ +LVVGSMIGGGIFSLPQN+AA+A  G ++IGW IT +GM+ LA V+Q LA R
Sbjct: 48  KLSFPAMLSLVVGSMIGGGIFSLPQNIAAAASPGPMVIGWTITGIGMICLAMVYQKLAIR 107

Query: 68  KPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDTV 127
           +P+LD G+YAYAKAGFGD++GF+SAWGYW+SA +GNVGY VLLFST+G F P F  G+TV
Sbjct: 108 RPDLDNGIYAYAKAGFGDFIGFNSAWGYWLSALIGNVGYLVLLFSTVGKFVPAFAGGNTV 167

Query: 128 AAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTADIW 187
            A++ ASVLLW  H LVL G++ AAF+NT+ T+AK+VPL  FI IC  AF + +FT D W
Sbjct: 168 WAVLAASVLLWLTHALVLAGVRTAAFVNTIATIAKIVPLITFIAICAVAFDVGVFTEDFW 227

Query: 188 GKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLLLV 247
           G S+  LGSV  Q ++MMLVTVWVFIGIEGASI+S RA KRSDVGKATV GF+ VL+LL+
Sbjct: 228 G-SHAGLGSVFAQTKSMMLVTVWVFIGIEGASIYSKRARKRSDVGKATVGGFLFVLVLLI 286

Query: 248 LVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLCAE 307
            VN+LSMG+M + +LA L + SM  VL  VVG WG+VL+S G++ISLLGALL+W+LLC E
Sbjct: 287 GVNLLSMGIMHRAKLAGLPDASMGDVLSSVVGPWGSVLVSAGVIISLLGALLAWILLCGE 346

Query: 308 IMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKMLL 367
            M    +D TMP+   R N ++ PA ALW+TNI  Q+ LV+     G       Y  M  
Sbjct: 347 TMQVPGEDGTMPKLFGRINKHEAPAPALWITNIVSQICLVMTVLWDG------AYLAMAT 400

Query: 368 LATSMILIPYFWSAAYGLLLTLKGETYENDAR-ERSKDLVIAGIAVAYAVWLLYAGGLKY 426
           LA ++IL+PY  SAA+ L + +KGETYEN  R +R +D V+A +A  Y +WL+ A G   
Sbjct: 401 LAAALILVPYLLSAAFALKMVIKGETYENGPRSQRVRDAVVATVATLYGIWLVVAAGADA 460

Query: 427 LLLSALLYAPGAILFAKAKHEV-GQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           L+L+ALLY PGA +F  AK E+  + IF   E  +   + + ++V+   +  G L+L
Sbjct: 461 LMLAALLYLPGAAVFVWAKRELRAKRIFKPYEIGVLVLLALISVVSIISIVTGRLSL 517


>TR:E4AM65_PROAA E4AM65 Arginine/ornithine antiporter OS=Propionibacterium acnes
           HL002PA1 GN=HMPREF9613_01127 PE=4 SV=1
          Length = 518

 Score =  503 bits (1296), Expect = e-173
 Identities = 261/477 (54%), Positives = 340/477 (71%), Gaps = 9/477 (1%)

Query: 8   KLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLANR 67
           KL   A+ +LVVGSMIGGGIFSLPQN+AA+A  G ++IGW IT +GM+ LA V+Q LA R
Sbjct: 48  KLSFPAMLSLVVGSMIGGGIFSLPQNIAAAASPGPMVIGWTITGIGMICLAMVYQKLAIR 107

Query: 68  KPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDTV 127
           +P+LD G+YAYAKAGFGD++GF+SAWGYW+SA +GNVGY VLLFST+G F P F  G+TV
Sbjct: 108 RPDLDNGIYAYAKAGFGDFIGFNSAWGYWLSALIGNVGYLVLLFSTVGKFVPAFAGGNTV 167

Query: 128 AAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTADIW 187
            A++ ASVLLW  H LVL G++ AAF+NT+ T+AK+VPL  FI IC  AF + +FT D W
Sbjct: 168 WAVLAASVLLWLTHALVLAGVRTAAFVNTIATIAKIVPLITFIAICAVAFDVGVFTEDFW 227

Query: 188 GKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLLLV 247
           G S+  LGSV  Q ++MMLVTVWVFIGIEGASI+S RA KRSDVGKATV GF+ VL+LL+
Sbjct: 228 G-SHAGLGSVFAQTKSMMLVTVWVFIGIEGASIYSKRARKRSDVGKATVGGFLFVLVLLI 286

Query: 248 LVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLCAE 307
            VN+LSMG+M + +LA L + SM  VL  VVG WG+VL+S G++ISLLGALL+W+LLC E
Sbjct: 287 GVNLLSMGIMHRAKLAGLPDASMGDVLSSVVGPWGSVLVSAGVIISLLGALLAWILLCGE 346

Query: 308 IMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKMLL 367
            M    +D TMP+   R N ++ PA ALW+TNI  Q+ LV+     G       Y  M  
Sbjct: 347 TMQVPGEDGTMPKLFGRINKHEAPAPALWITNIVSQICLVMTVLWDG------AYLAMAT 400

Query: 368 LATSMILIPYFWSAAYGLLLTLKGETYENDAR-ERSKDLVIAGIAVAYAVWLLYAGGLKY 426
           LA ++IL+PY  SAA+ L + +KGETYEN  R +R +D V+A +A  Y +WL+ A G   
Sbjct: 401 LAAALILVPYLLSAAFALKMVIKGETYENGPRSQRVRDAVVATVATLYGIWLVVAAGADA 460

Query: 427 LLLSALLYAPGAILFAKAKHEV-GQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           L+L+ALLY PGA +F  AK E+  + IF   E  +   + + ++V+   +  G L+L
Sbjct: 461 LMLAALLYLPGAAVFVWAKRELRAKRIFKPYEIGVLVLLALISVVSIISIVTGRLSL 517


>TR:D3MMD3_PROAA D3MMD3 Arginine/ornithine antiporter OS=Propionibacterium acnes
           SK187 GN=arcD PE=4 SV=1
          Length = 518

 Score =  503 bits (1296), Expect = e-173
 Identities = 261/477 (54%), Positives = 340/477 (71%), Gaps = 9/477 (1%)

Query: 8   KLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLANR 67
           KL   A+ +LVVGSMIGGGIFSLPQN+AA+A  G ++IGW IT +GM+ LA V+Q LA R
Sbjct: 48  KLSFPAMLSLVVGSMIGGGIFSLPQNIAAAASPGPMVIGWTITGIGMICLAMVYQKLAIR 107

Query: 68  KPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDTV 127
           +P+LD G+YAYAKAGFGD++GF+SAWGYW+SA +GNVGY VLLFST+G F P F  G+TV
Sbjct: 108 RPDLDNGIYAYAKAGFGDFIGFNSAWGYWLSALIGNVGYLVLLFSTVGKFVPAFAGGNTV 167

Query: 128 AAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTADIW 187
            A++ ASVLLW  H LVL G++ AAF+NT+ T+AK+VPL  FI IC  AF + +FT D W
Sbjct: 168 WAVLAASVLLWLTHALVLAGVRTAAFVNTIATIAKIVPLITFIAICAVAFDVGVFTEDFW 227

Query: 188 GKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLLLV 247
           G S+  LGSV  Q ++MMLVTVWVFIGIEGASI+S RA KRSDVGKATV GF+ VL+LL+
Sbjct: 228 G-SHAGLGSVFAQTKSMMLVTVWVFIGIEGASIYSKRARKRSDVGKATVGGFLFVLVLLI 286

Query: 248 LVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLCAE 307
            VN+LSMG+M + +LA L + SM  VL  VVG WG+VL+S G++ISLLGALL+W+LLC E
Sbjct: 287 GVNLLSMGIMHRAKLAGLPDASMGDVLSSVVGPWGSVLVSAGVIISLLGALLAWILLCGE 346

Query: 308 IMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKMLL 367
            M    +D TMP+   R N ++ PA ALW+TNI  Q+ LV+     G       Y  M  
Sbjct: 347 TMQVPGEDGTMPKLFGRINKHEAPAPALWITNIVSQICLVMTVLWDG------AYLAMAT 400

Query: 368 LATSMILIPYFWSAAYGLLLTLKGETYENDAR-ERSKDLVIAGIAVAYAVWLLYAGGLKY 426
           LA ++IL+PY  SAA+ L + +KGETYEN  R +R +D V+A +A  Y +WL+ A G   
Sbjct: 401 LAAALILVPYLLSAAFALKMVIKGETYENGPRSQRVRDAVVATVATLYGIWLVVAAGADA 460

Query: 427 LLLSALLYAPGAILFAKAKHEV-GQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           L+L+ALLY PGA +F  AK E+  + IF   E  +   + + ++V+   +  G L+L
Sbjct: 461 LMLAALLYLPGAAVFVWAKRELRAKRIFKPYEIGVLVLLALISVVSIISIVTGRLSL 517


>TR:F0KVZ9_YERE3 F0KVZ9 Amino acid permease OS=Yersinia enterocolitica subsp.
           palearctica serotype O:9 / biotype 3 (strain 105.5R(r))
           GN=YE105_C2415 PE=4 SV=1
          Length = 500

 Score =  503 bits (1294), Expect = e-173
 Identities = 264/506 (52%), Positives = 343/506 (67%), Gaps = 30/506 (5%)

Query: 1   MSQESSQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFV 60
           M+  S++KL L +LT+LVVGSMIG GIFSLP     +      LI W I   GMLTLAFV
Sbjct: 1   MAASSNKKLSLWSLTSLVVGSMIGAGIFSLPATFGRATGGFGALIAWVIAGGGMLTLAFV 60

Query: 61  FQTLANRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPI 120
           FQTLA RKPELD GVY YAK GFGDY GF+SA G+W  A +G+V YFVL+ STLG FFP+
Sbjct: 61  FQTLAQRKPELDSGVYIYAKTGFGDYAGFASAIGFWAGACIGSVSYFVLIKSTLGAFFPL 120

Query: 121 FGKGDTVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLD 180
           FG G+T++A++ AS +LW+ HF+VLRGIKEAA INT+ T AKV+P+F+FI++  FAF  D
Sbjct: 121 FGDGNTLSAVLIASFILWSFHFMVLRGIKEAAAINTIATFAKVIPIFIFIIVLAFAFHTD 180

Query: 181 IFTADIWGKSN----------PDLG--------------SVMNQVRNMMLVTVWVFIGIE 216
            F  + WG              D G              S+ +QVR+ MLVTV+VF+GIE
Sbjct: 181 TFALNFWGTQPLGAVGDLTHLDDYGYTGHAALEIGSGSESLFSQVRSTMLVTVFVFVGIE 240

Query: 217 GASIFSSRAEKRSDVGKATVIGFITVLLLLVLVNVLSMGVMTQPELAKLQNPSMALVLEH 276
           GAS++S  A++R  VG ATV+GFI VL LLVLV +LS GV+ +P+LA L+ PSMA VLEH
Sbjct: 241 GASVYSRYAKERKHVGIATVLGFIGVLCLLVLVTMLSYGVLLRPDLAALRQPSMAGVLEH 300

Query: 277 VVGHWGAVLISVGLLISLLGALLSWVLLCAEIMFAAAKDHTMPEFLRRENANQVPANALW 336
           +VG WGA+ IS+GL+IS++GA LSW LL AE ++ AAK + MP  L  EN + VP+ A+W
Sbjct: 301 IVGRWGAIFISIGLIISVMGAYLSWTLLAAEALYCAAKSNIMPSVLATENKHGVPSAAVW 360

Query: 337 LTNICVQVFLVVVFFTSGDPDGMDPYTKMLLLATSMILIPYFWSAAYGLLLTLKGETYEN 396
           ++NI +Q+FL+V  FT         +   L L +S++LIPY   AAYGL L    ETY  
Sbjct: 361 MSNIFIQLFLIVTLFTE------YAFQLALELTSSLVLIPYLLVAAYGLKLAWTRETYSV 414

Query: 397 DARERSKDLVIAGIAVAYAVWLLYAGGLKYLLLSALLYAPGAILFAKAKHEVGQPIFTGI 456
            A++  KD +IA IA  YAV ++YAGGLKY+LLSA++Y PG +LF  AK E  + +F+ I
Sbjct: 415 GAKDHKKDFIIASIATFYAVLMVYAGGLKYILLSAVIYGPGTLLFIIAKREQKKLVFSAI 474

Query: 457 EKLIFAAVVIGALVAAYGLYDGFLTL 482
           EK  FA  +I A+ A Y L  G +T+
Sbjct: 475 EKCAFAVALIAAVAALYSLATGIITV 500


>TR:Q6AA79_PROAC Q6AA79 Arginine/ornithine antiporter OS=Propionibacterium acnes
           (strain KPA171202 / DSM 16379) GN=PPA0582 PE=4 SV=1
          Length = 493

 Score =  502 bits (1293), Expect = e-173
 Identities = 261/477 (54%), Positives = 339/477 (71%), Gaps = 9/477 (1%)

Query: 8   KLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLANR 67
           KL   A+ +LVVGSMIGGGIFSLPQN+AA+A  G ++IGW IT +GM+ LA V+Q LA R
Sbjct: 23  KLSFPAMLSLVVGSMIGGGIFSLPQNIAAAASPGPMVIGWTITGIGMICLAMVYQKLAIR 82

Query: 68  KPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDTV 127
           +P+LD G+YAYAKAGFGD++GF+SAWGYW+SA +GNVGY VLLFST+G F P F  G+TV
Sbjct: 83  RPDLDNGIYAYAKAGFGDFIGFNSAWGYWLSALIGNVGYLVLLFSTVGKFVPAFAGGNTV 142

Query: 128 AAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTADIW 187
            A++ ASVLLW  H LVL G++ AAF+NT+ T+AK+VPL  FI IC  AF + +FT D W
Sbjct: 143 WAVLAASVLLWLTHALVLAGVRTAAFVNTIATIAKIVPLITFIAICAVAFDVGVFTEDFW 202

Query: 188 GKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLLLV 247
           G S+  LGSV  Q ++MMLVTVWVFIGIEGASI+S RA KRSDVGKATV GF+ VL+LL+
Sbjct: 203 G-SHAGLGSVFAQTKSMMLVTVWVFIGIEGASIYSKRARKRSDVGKATVGGFLFVLVLLI 261

Query: 248 LVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLCAE 307
            VN+LSMG+M + +LA L + SM  VL  VVG WG+VL+S G++ISLLGALL+W+LLC E
Sbjct: 262 GVNLLSMGIMHRAKLAGLPDASMGDVLSSVVGPWGSVLVSAGVIISLLGALLAWILLCGE 321

Query: 308 IMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKMLL 367
            M    +D TMP+   R N ++ PA ALW+TNI  Q+ LV+     G       Y  M  
Sbjct: 322 TMQVPGEDGTMPKLFGRINKHEAPAPALWITNIVSQICLVMTVLWDG------AYLAMAT 375

Query: 368 LATSMILIPYFWSAAYGLLLTLKGETYENDAR-ERSKDLVIAGIAVAYAVWLLYAGGLKY 426
           LA ++IL+PY  SAA+ L + +KGETYEN  R +R +D V+A +A  Y +WL+ A G   
Sbjct: 376 LAAALILVPYLLSAAFALKMVIKGETYENGPRSQRVRDAVVATVATLYGIWLVVAAGADA 435

Query: 427 LLLSALLYAPGAILFAKAKHEV-GQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           L+L+ALLY PGA +F  AK E   + IF   E  +   + + ++V+   +  G L+L
Sbjct: 436 LMLAALLYLPGAAVFVWAKREQRAKRIFKPYEIGVLVLLALISVVSIISIVTGRLSL 492


>TR:H7GBW8_PROAA H7GBW8 Arginine/ornithine antiporter OS=Propionibacterium acnes
           PRP-38 GN=TICEST70_06286 PE=4 SV=1
          Length = 493

 Score =  502 bits (1293), Expect = e-173
 Identities = 261/477 (54%), Positives = 339/477 (71%), Gaps = 9/477 (1%)

Query: 8   KLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLANR 67
           KL   A+ +LVVGSMIGGGIFSLPQN+AA+A  G ++IGW IT +GM+ LA V+Q LA R
Sbjct: 23  KLSFPAMLSLVVGSMIGGGIFSLPQNIAAAASPGPMVIGWTITGIGMICLAMVYQKLAIR 82

Query: 68  KPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDTV 127
           +P+LD G+YAYAKAGFGD++GF+SAWGYW+SA +GNVGY VLLFST+G F P F  G+TV
Sbjct: 83  RPDLDNGIYAYAKAGFGDFIGFNSAWGYWLSALIGNVGYLVLLFSTVGKFVPAFAGGNTV 142

Query: 128 AAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTADIW 187
            A++ ASVLLW  H LVL G++ AAF+NT+ T+AK+VPL  FI IC  AF + +FT D W
Sbjct: 143 WAVLAASVLLWLTHALVLAGVRTAAFVNTIATIAKIVPLITFIAICAVAFDVGVFTEDFW 202

Query: 188 GKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLLLV 247
           G S+  LGSV  Q ++MMLVTVWVFIGIEGASI+S RA KRSDVGKATV GF+ VL+LL+
Sbjct: 203 G-SHAGLGSVFAQTKSMMLVTVWVFIGIEGASIYSKRARKRSDVGKATVGGFLFVLVLLI 261

Query: 248 LVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLCAE 307
            VN+LSMG+M + +LA L + SM  VL  VVG WG+VL+S G++ISLLGALL+W+LLC E
Sbjct: 262 GVNLLSMGIMHRAKLAGLPDASMGDVLSSVVGPWGSVLVSAGVIISLLGALLAWILLCGE 321

Query: 308 IMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKMLL 367
            M    +D TMP+   R N ++ PA ALW+TNI  Q+ LV+     G       Y  M  
Sbjct: 322 TMQVPGEDGTMPKLFGRINKHEAPAPALWITNIVSQICLVMTVLWDG------AYLAMAT 375

Query: 368 LATSMILIPYFWSAAYGLLLTLKGETYENDAR-ERSKDLVIAGIAVAYAVWLLYAGGLKY 426
           LA ++IL+PY  SAA+ L + +KGETYEN  R +R +D V+A +A  Y +WL+ A G   
Sbjct: 376 LAAALILVPYLLSAAFALKMVIKGETYENGPRSQRVRDAVVATVATLYGIWLVVAAGADA 435

Query: 427 LLLSALLYAPGAILFAKAKHEV-GQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           L+L+ALLY PGA +F  AK E   + IF   E  +   + + ++V+   +  G L+L
Sbjct: 436 LMLAALLYLPGAAVFVWAKREQRAKRIFKPYEIGVLVLLALISVVSIISIVTGRLSL 492


>TR:G5EYG2_9ACTO G5EYG2 Putative uncharacterized protein OS=Propionibacterium sp.
           5_U_42AFAA GN=HMPREF1003_01090 PE=4 SV=1
          Length = 493

 Score =  502 bits (1293), Expect = e-173
 Identities = 261/477 (54%), Positives = 339/477 (71%), Gaps = 9/477 (1%)

Query: 8   KLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLANR 67
           KL   A+ +LVVGSMIGGGIFSLPQN+AA+A  G ++IGW IT +GM+ LA V+Q LA R
Sbjct: 23  KLSFPAMLSLVVGSMIGGGIFSLPQNIAAAASPGPMVIGWTITGIGMICLAMVYQKLAIR 82

Query: 68  KPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDTV 127
           +P+LD G+YAYAKAGFGD++GF+SAWGYW+SA +GNVGY VLLFST+G F P F  G+TV
Sbjct: 83  RPDLDNGIYAYAKAGFGDFIGFNSAWGYWLSALIGNVGYLVLLFSTVGKFVPAFAGGNTV 142

Query: 128 AAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTADIW 187
            A++ ASVLLW  H LVL G++ AAF+NT+ T+AK+VPL  FI IC  AF + +FT D W
Sbjct: 143 WAVLAASVLLWLTHALVLAGVRTAAFVNTIATIAKIVPLITFIAICAVAFDVGVFTEDFW 202

Query: 188 GKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLLLV 247
           G S+  LGSV  Q ++MMLVTVWVFIGIEGASI+S RA KRSDVGKATV GF+ VL+LL+
Sbjct: 203 G-SHAGLGSVFAQTKSMMLVTVWVFIGIEGASIYSKRARKRSDVGKATVGGFLFVLVLLI 261

Query: 248 LVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLCAE 307
            VN+LSMG+M + +LA L + SM  VL  VVG WG+VL+S G++ISLLGALL+W+LLC E
Sbjct: 262 GVNLLSMGIMHRAKLAGLPDASMGDVLSSVVGPWGSVLVSAGVIISLLGALLAWILLCGE 321

Query: 308 IMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKMLL 367
            M    +D TMP+   R N ++ PA ALW+TNI  Q+ LV+     G       Y  M  
Sbjct: 322 TMQVPGEDGTMPKLFGRINKHEAPAPALWITNIVSQICLVMTVLWDG------AYLAMAT 375

Query: 368 LATSMILIPYFWSAAYGLLLTLKGETYENDAR-ERSKDLVIAGIAVAYAVWLLYAGGLKY 426
           LA ++IL+PY  SAA+ L + +KGETYEN  R +R +D V+A +A  Y +WL+ A G   
Sbjct: 376 LAAALILVPYLLSAAFALKMVIKGETYENGPRSQRVRDAVVATVATLYGIWLVVAAGADA 435

Query: 427 LLLSALLYAPGAILFAKAKHEV-GQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           L+L+ALLY PGA +F  AK E   + IF   E  +   + + ++V+   +  G L+L
Sbjct: 436 LMLAALLYLPGAAVFVWAKREQRAKRIFKPYEIGVLVLLALISVVSIISIVTGRLSL 492


>TR:F1UQP7_PROAA F1UQP7 Arginine/ornithine antiporter OS=Propionibacterium acnes
           HL083PA2 GN=HMPREF9586_01344 PE=4 SV=1
          Length = 518

 Score =  503 bits (1295), Expect = e-173
 Identities = 261/477 (54%), Positives = 340/477 (71%), Gaps = 9/477 (1%)

Query: 8   KLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLANR 67
           KL   A+ +LVVGSMIGGGIFSLPQN+AA+A  G ++IGW IT +GM+ LA V+Q LA R
Sbjct: 48  KLSFPAMLSLVVGSMIGGGIFSLPQNIAAAASPGPMVIGWTITGIGMICLAMVYQKLAIR 107

Query: 68  KPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDTV 127
           +P+LD G+YAYAKAGFGD++GF+SAWGYW+SA +GNVGY VLLFST+G F P F  G+TV
Sbjct: 108 RPDLDNGIYAYAKAGFGDFIGFNSAWGYWLSALIGNVGYLVLLFSTVGKFVPAFAGGNTV 167

Query: 128 AAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTADIW 187
            A++ ASVLLW  H LVL G++ AAF+NT+ T+AK+VPL  FI IC  AF + +FT D W
Sbjct: 168 WAVLAASVLLWLTHALVLAGVRTAAFVNTIATIAKIVPLITFIAICAVAFDVGVFTEDFW 227

Query: 188 GKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLLLV 247
           G S+  LGSV  Q ++MMLVTVWVFIGIEGASI+S RA KRSDVGKATV GF+ VL+LL+
Sbjct: 228 G-SHAGLGSVFAQTKSMMLVTVWVFIGIEGASIYSKRARKRSDVGKATVGGFLFVLVLLI 286

Query: 248 LVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLCAE 307
            VN+LSMG+M + +LA L + SM  VL  VVG WG+VL+S G++ISLLGALL+W+LLC E
Sbjct: 287 GVNLLSMGIMHRAKLAGLPDASMGDVLSSVVGPWGSVLVSAGVIISLLGALLAWILLCGE 346

Query: 308 IMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKMLL 367
            M    +D TMP+   R N ++ PA ALW+TNI  Q+ LV+     G       Y  M  
Sbjct: 347 TMQVPGEDGTMPKLFGRINKHEAPAPALWITNIVSQICLVMTVLWDG------AYLAMAT 400

Query: 368 LATSMILIPYFWSAAYGLLLTLKGETYENDAR-ERSKDLVIAGIAVAYAVWLLYAGGLKY 426
           LA ++IL+PY  SAA+ L + +KGETYEN  R +R +D V+A +A  Y +WL+ A G   
Sbjct: 401 LAAALILVPYLLSAAFALKMVIKGETYENGPRSQRVRDAVVATVATLYGIWLVVAAGADA 460

Query: 427 LLLSALLYAPGAILFAKAKHEV-GQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           L+L+ALLY PGA +F  AK E+  + IF   E  +   + + ++V+   +  G L+L
Sbjct: 461 LMLAALLYLPGAAVFVWAKRELRAKRIFKPYEIGVLVLLALISVVSIISVVTGRLSL 517


>TR:E4CJG4_PROAA E4CJG4 Arginine/ornithine antiporter OS=Propionibacterium acnes
           HL086PA1 GN=HMPREF9591_01364 PE=4 SV=1
          Length = 518

 Score =  503 bits (1295), Expect = e-173
 Identities = 261/477 (54%), Positives = 340/477 (71%), Gaps = 9/477 (1%)

Query: 8   KLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLANR 67
           KL   A+ +LVVGSMIGGGIFSLPQN+AA+A  G ++IGW IT +GM+ LA V+Q LA R
Sbjct: 48  KLSFPAMLSLVVGSMIGGGIFSLPQNIAAAASPGPMVIGWTITGIGMICLAMVYQKLAIR 107

Query: 68  KPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDTV 127
           +P+LD G+YAYAKAGFGD++GF+SAWGYW+SA +GNVGY VLLFST+G F P F  G+TV
Sbjct: 108 RPDLDNGIYAYAKAGFGDFIGFNSAWGYWLSALIGNVGYLVLLFSTVGKFVPAFAGGNTV 167

Query: 128 AAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTADIW 187
            A++ ASVLLW  H LVL G++ AAF+NT+ T+AK+VPL  FI IC  AF + +FT D W
Sbjct: 168 WAVLAASVLLWLTHALVLAGVRTAAFVNTIATIAKIVPLITFIAICAVAFDVGVFTEDFW 227

Query: 188 GKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLLLV 247
           G S+  LGSV  Q ++MMLVTVWVFIGIEGASI+S RA KRSDVGKATV GF+ VL+LL+
Sbjct: 228 G-SHAGLGSVFAQTKSMMLVTVWVFIGIEGASIYSKRARKRSDVGKATVGGFLFVLVLLI 286

Query: 248 LVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLCAE 307
            VN+LSMG+M + +LA L + SM  VL  VVG WG+VL+S G++ISLLGALL+W+LLC E
Sbjct: 287 GVNLLSMGIMHRAKLAGLPDASMGDVLSSVVGPWGSVLVSAGVIISLLGALLAWILLCGE 346

Query: 308 IMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKMLL 367
            M    +D TMP+   R N ++ PA ALW+TNI  Q+ LV+     G       Y  M  
Sbjct: 347 TMQVPGEDGTMPKLFGRINKHEAPAPALWITNIVSQICLVMTVLWDG------AYLAMAS 400

Query: 368 LATSMILIPYFWSAAYGLLLTLKGETYENDAR-ERSKDLVIAGIAVAYAVWLLYAGGLKY 426
           LA ++IL+PY  SAA+ L + +KGETYEN  R +R +D V+A +A  Y +WL+ A G   
Sbjct: 401 LAAALILVPYLLSAAFALKMVIKGETYENGPRSQRVRDAVVATVATLYGIWLVVAAGADA 460

Query: 427 LLLSALLYAPGAILFAKAKHEV-GQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           L+L+ALLY PGA +F  AK E+  + IF   E  +   + + ++V+   +  G L+L
Sbjct: 461 LMLAALLYLPGAAVFVWAKRELRAKRIFKPYEIGVLVLLALISVVSIISIVTGRLSL 517


>TR:D8GPT8_CLOLD D8GPT8 Predicted arginine/ornithine antiporter OS=Clostridium
           ljungdahlii (strain ATCC 55383 / DSM 13528 / PETC)
           GN=CLJU_c09290 PE=4 SV=1
          Length = 487

 Score =  501 bits (1291), Expect = e-173
 Identities = 243/482 (50%), Positives = 340/482 (70%), Gaps = 15/482 (3%)

Query: 6   SQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLA 65
           + KL L +L ALV+GSMIGGG FSLP +MA  A  GA++IGW IT +GM+ LAFV+Q L+
Sbjct: 15  NNKLGLFSLIALVIGSMIGGGAFSLPGDMAKGASAGAIIIGWLITGIGMIALAFVYQNLS 74

Query: 66  NRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGD 125
            ++P+L+GG+Y+YAKAGFGDYMGF+SAWGYW+SA +GNV Y V++F  +GYFFP+FGKG+
Sbjct: 75  MKRPDLNGGIYSYAKAGFGDYMGFNSAWGYWLSALIGNVSYLVMMFGAVGYFFPVFGKGN 134

Query: 126 TVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTAD 185
            +A++VCAS++LW +  L+L+G+K+AA +N +TT+AK+VP+FLF++I +  FK++IFT D
Sbjct: 135 NLASVVCASIMLWLIQGLILKGVKQAAIVNVITTIAKLVPIFLFVIIAIIMFKVNIFTLD 194

Query: 186 IWGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLL 245
            WG S P LG V+ QV++ MLVT+WVFIGIEGA + S RA++RSDVGKATVIG +  L++
Sbjct: 195 FWGGSTPSLGGVVAQVKSTMLVTLWVFIGIEGAVVVSGRAKRRSDVGKATVIGLVGTLVI 254

Query: 246 LVLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLC 305
            +L+ +LS+G+M +  L+ L  PSMA VLE VVG WGA++I++GL+ISLLGA L W LL 
Sbjct: 255 YILITLLSLGIMNRARLSGLDTPSMAYVLESVVGKWGAIVINLGLVISLLGATLGWTLLA 314

Query: 306 AEIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKM 365
           AEI + AAKD   P+   +EN N    N+LW+TNI V++ L++  F+S        Y  +
Sbjct: 315 AEIPYIAAKDGMFPKVFAKENKNGSAVNSLWITNILVEISLILTLFSS------STYQIL 368

Query: 366 LLLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYAGGLK 425
             +A+  ILIPYF SA +G    LK E    +   R+K+++IA +A  Y  WL+YA GLK
Sbjct: 369 YSIASGAILIPYFLSALFG----LKFELMSKEENGRTKNIIIASVATIYTAWLVYAAGLK 424

Query: 426 YLLLSALLYAPGAILFAKAKHEVGQP-----IFTGIEKLIFAAVVIGALVAAYGLYDGFL 480
           Y+LL  +L+A G + F  A  E         IF   EK+I    ++  +VA   L  G L
Sbjct: 425 YVLLETILFAIGIVAFTIASKENNSNKKKNYIFLSYEKVIALIFLVAGIVAVVMLATGKL 484

Query: 481 TL 482
           ++
Sbjct: 485 SI 486


>TR:E4HUK2_PROAA E4HUK2 Arginine/ornithine antiporter OS=Propionibacterium acnes
           HL001PA1 GN=HMPREF9603_01739 PE=4 SV=1
          Length = 518

 Score =  503 bits (1294), Expect = e-173
 Identities = 262/477 (54%), Positives = 338/477 (70%), Gaps = 9/477 (1%)

Query: 8   KLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLANR 67
           KL   A+ +LVVGSMIGGGIFSLPQN+AA+A  G ++IGW IT +GM+ LA V+Q LA R
Sbjct: 48  KLSFPAMLSLVVGSMIGGGIFSLPQNIAAAASPGPMVIGWTITGIGMICLAMVYQKLAIR 107

Query: 68  KPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDTV 127
           +P+LD G+YAYAKAGFGD++GF+SAWGYW+SA +GNVGY VLLFST+G F P F  G+TV
Sbjct: 108 RPDLDNGIYAYAKAGFGDFIGFNSAWGYWLSALIGNVGYLVLLFSTVGKFVPAFAGGNTV 167

Query: 128 AAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTADIW 187
            A++ ASVLLW  H LVL G++ AAF+NT+ T+AK+VPL  FI IC  AF + +FT D W
Sbjct: 168 WAVLAASVLLWLTHALVLAGVRTAAFVNTIATIAKIVPLITFIAICAVAFDVGVFTEDFW 227

Query: 188 GKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLLLV 247
           G S+  LGSV  Q ++MMLVTVWVFIGIEGASI+S RA KRSDVGKATV GF+ VL+LL+
Sbjct: 228 G-SHAGLGSVFAQTKSMMLVTVWVFIGIEGASIYSKRARKRSDVGKATVGGFLFVLVLLI 286

Query: 248 LVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLCAE 307
            VN+LSMG+M + +LA L + SM  VL  VVG WG+VL+S G++ISLLGALL+W+LLC E
Sbjct: 287 GVNLLSMGIMRRAKLAGLPDASMGDVLSSVVGPWGSVLVSAGVIISLLGALLAWILLCGE 346

Query: 308 IMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKMLL 367
            M    +D TMP+   R N ++ PA ALW+TNI  Q+ LV+     G       Y  M  
Sbjct: 347 TMQVPGEDGTMPKLFGRINKHEAPAPALWITNIVSQICLVMTVLWDG------AYLAMAT 400

Query: 368 LATSMILIPYFWSAAYGLLLTLKGETYENDAR-ERSKDLVIAGIAVAYAVWLLYAGGLKY 426
           LA ++IL+PY  SAA+ L + +KGETYEN  R +R +D V+A IA  Y +WL+ A G   
Sbjct: 401 LAAALILVPYLLSAAFALKMVIKGETYENGPRSQRVRDAVVATIATLYGIWLVVAAGADA 460

Query: 427 LLLSALLYAPGAILFAKAKHEV-GQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           L+L+ LLY PGA +F  AK E   + IF   E  +   + + ++VA   +  G L+L
Sbjct: 461 LMLAVLLYLPGAAVFVWAKREQRAKRIFKPYEIGVLVLLALISVVAIISIVTGRLSL 517


>TR:A4SM71_AERS4 A4SM71 Arginine/ornithine antiporter OS=Aeromonas salmonicida
           (strain A449) GN=arcD PE=4 SV=1
          Length = 478

 Score =  501 bits (1290), Expect = e-173
 Identities = 244/481 (50%), Positives = 345/481 (71%), Gaps = 11/481 (2%)

Query: 7   QKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLAN 66
           +KL LGAL +LV+GSM+G G+FSLPQN+AA A  GAV +GWAIT +GM+ LA V+Q L+ 
Sbjct: 3   KKLGLGALISLVIGSMVGAGVFSLPQNIAAHASAGAVALGWAITGLGMICLALVYQNLSM 62

Query: 67  RKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFP-----IF 121
           R+P+LDGG+++YAKAGFGD++GF++AWGYW+   L NV Y +++FS L YFF      IF
Sbjct: 63  RRPDLDGGIFSYAKAGFGDFIGFNAAWGYWLCQLLANVSYAIVVFSALSYFFDTPDNVIF 122

Query: 122 GKGDTVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDI 181
           G G+T  AIV AS+L+W++H LVLRGI+ AA +N +TT+AK+VPL +F +  L AF +  
Sbjct: 123 GDGNTPVAIVLASILIWSVHALVLRGIQVAALVNIITTIAKMVPLIVFCIAILLAFNMQT 182

Query: 182 FTADIWGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFIT 241
           FT DIWG  N +LGSVM+QV++ M VT+WVFIGIEGA + S+RA  R DVG+ATV+  + 
Sbjct: 183 FTLDIWGHDNVELGSVMDQVKSTMKVTLWVFIGIEGAVVVSARARHRKDVGRATVLALLG 242

Query: 242 VLLLLVLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSW 301
            L L V+V + S+GVM+QPELA+L+NPS A++LE V+G WGA LI++GL+IS++GALLSW
Sbjct: 243 ALTLYVMVTLFSLGVMSQPELAQLKNPSTAMILEKVLGPWGAWLINIGLVISVMGALLSW 302

Query: 302 VLLCAEIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDP 361
            +L AE+ + A K    P +  +EN N  P  +LW +   VQ+FL++++F S        
Sbjct: 303 TVLAAEVPYIAGKTGVFPSWFAKENKNGSPQVSLWCSTCLVQIFLIIIYFQS------ST 356

Query: 362 YTKMLLLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYA 421
           Y  ++ +ATS  L+PY +S AYGL L +KGETYE  + +R +DL++A +A  Y  WL+YA
Sbjct: 357 YLALVNIATSAALVPYVFSGAYGLKLAMKGETYEGQSHQRKRDLLLALVATTYGCWLVYA 416

Query: 422 GGLKYLLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLT 481
            G++YLLL ALLY+PG  ++ KA+   G      +E+ + AA++  A++A Y + DG + 
Sbjct: 417 AGVEYLLLVALLYSPGIFIYWKARQHHGLRGLNRLEQGMTAALLGCAVLAFYKVMDGTIP 476

Query: 482 L 482
           L
Sbjct: 477 L 477


>TR:G7CV42_AERSA G7CV42 Arginine/ornithine antiporter OS=Aeromonas salmonicida
           subsp. salmonicida 01-B526 GN=IYQ_11813 PE=4 SV=1
          Length = 478

 Score =  501 bits (1290), Expect = e-173
 Identities = 244/481 (50%), Positives = 345/481 (71%), Gaps = 11/481 (2%)

Query: 7   QKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLAN 66
           +KL LGAL +LV+GSM+G G+FSLPQN+AA A  GAV +GWAIT +GM+ LA V+Q L+ 
Sbjct: 3   KKLGLGALISLVIGSMVGAGVFSLPQNIAAHASAGAVALGWAITGLGMICLALVYQNLSM 62

Query: 67  RKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFP-----IF 121
           R+P+LDGG+++YAKAGFGD++GF++AWGYW+   L NV Y +++FS L YFF      IF
Sbjct: 63  RRPDLDGGIFSYAKAGFGDFIGFNAAWGYWLCQLLANVSYAIVVFSALSYFFDTPDNVIF 122

Query: 122 GKGDTVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDI 181
           G G+T  AIV AS+L+W++H LVLRGI+ AA +N +TT+AK+VPL +F +  L AF +  
Sbjct: 123 GDGNTPVAIVLASILIWSVHALVLRGIQVAALVNIITTIAKMVPLIVFCIAILLAFNMQT 182

Query: 182 FTADIWGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFIT 241
           FT DIWG  N +LGSVM+QV++ M VT+WVFIGIEGA + S+RA  R DVG+ATV+  + 
Sbjct: 183 FTLDIWGHDNVELGSVMDQVKSTMKVTLWVFIGIEGAVVVSARARHRKDVGRATVLALLG 242

Query: 242 VLLLLVLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSW 301
            L L V+V + S+GVM+QPELA+L+NPS A++LE V+G WGA LI++GL+IS++GALLSW
Sbjct: 243 ALTLYVMVTLFSLGVMSQPELAQLKNPSTAMILEKVLGPWGAWLINIGLVISVMGALLSW 302

Query: 302 VLLCAEIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDP 361
            +L AE+ + A K    P +  +EN N  P  +LW +   VQ+FL++++F S        
Sbjct: 303 TVLAAEVPYIAGKTGVFPSWFAKENKNGSPQVSLWCSTCLVQIFLIIIYFQS------ST 356

Query: 362 YTKMLLLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYA 421
           Y  ++ +ATS  L+PY +S AYGL L +KGETYE  + +R +DL++A +A  Y  WL+YA
Sbjct: 357 YLALVNIATSAALVPYVFSGAYGLKLAMKGETYEGQSHQRKRDLLLALVATTYGCWLVYA 416

Query: 422 GGLKYLLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLT 481
            G++YLLL ALLY+PG  ++ KA+   G      +E+ + AA++  A++A Y + DG + 
Sbjct: 417 AGVEYLLLVALLYSPGIFIYWKARQHHGLRGLNRLEQGMTAALLGCAVLAFYKVMDGTIP 476

Query: 482 L 482
           L
Sbjct: 477 L 477


>TR:F0L0C7_YERE3 F0L0C7 Arginine/ornithine antiporter OS=Yersinia enterocolitica
           subsp. palearctica serotype O:9 / biotype 3 (strain
           105.5R(r)) GN=YE105_C0546 PE=4 SV=1
          Length = 502

 Score =  502 bits (1292), Expect = e-172
 Identities = 261/510 (51%), Positives = 342/510 (67%), Gaps = 36/510 (7%)

Query: 1   MSQESSQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFV 60
           M+  S+ KL L ALT+LVVGSMIG GIFSLP     +      LI W I   GML LAFV
Sbjct: 1   MANSSTNKLSLPALTSLVVGSMIGAGIFSLPATFGRATGGFGALIAWCIAGGGMLMLAFV 60

Query: 61  FQTLANRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPI 120
           FQTLA RKP LD GV+ YAK GFGDY+GF+SA G+W    +GNV YFVL+ STLG  FPI
Sbjct: 61  FQTLAQRKPNLDSGVFIYAKEGFGDYLGFASALGFWAGTCIGNVSYFVLIKSTLGALFPI 120

Query: 121 FGKGDTVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLD 180
           FG G+T+ A++ ASV+LW  H L+LRG+KEAA INT+ T AK++P+F+F+++ +FAFK D
Sbjct: 121 FGDGNTIPAVLVASVILWGFHILILRGVKEAAAINTIATFAKIIPIFIFVIVLIFAFKGD 180

Query: 181 IFTADIWGKSNPDL----------------------------GSVMNQVRNMMLVTVWVF 212
           +F  + WG   PD+                             S+ +QVR+ MLVTV+VF
Sbjct: 181 VFALNFWG--TPDVVKSVDLSHLNDYGYVGHAAAVMPVVAEPESLFSQVRSTMLVTVFVF 238

Query: 213 IGIEGASIFSSRAEKRSDVGKATVIGFITVLLLLVLVNVLSMGVMTQPELAKLQNPSMAL 272
           +GIEGAS++S  A++RS VG ATV+GFI VL LLVL+ +LS GV+ +P+LA L+ PSMA 
Sbjct: 239 LGIEGASVYSRYAKERSHVGIATVLGFIGVLCLLVLITMLSYGVLLRPDLAALRQPSMAG 298

Query: 273 VLEHVVGHWGAVLISVGLLISLLGALLSWVLLCAEIMFAAAKDHTMPEFLRRENANQVPA 332
           VLE +VG WGA+ ISVGL+IS+LGA LSW LL AE++F+AAK  +MP+    EN+N VP+
Sbjct: 299 VLEAIVGRWGAIFISVGLIISVLGAYLSWSLLAAEVLFSAAKSKSMPKIFGTENSNAVPS 358

Query: 333 NALWLTNICVQVFLVVVFFTSGDPDGMDPYTKMLLLATSMILIPYFWSAAYGLLLTLKGE 392
            A+WLTNI +QVFL++  FT         +   L L +S+ LIPY    AYGL L   GE
Sbjct: 359 AAVWLTNIFIQVFLILTLFTD------YAFQLALELTSSLTLIPYLLVGAYGLKLAWTGE 412

Query: 393 TYENDARERSKDLVIAGIAVAYAVWLLYAGGLKYLLLSALLYAPGAILFAKAKHEVGQPI 452
           TYE +AR   KDL+ A IA  Y+  ++YAGGLKYLLLSA++Y PG IL+  AK E  Q  
Sbjct: 413 TYETNARGHRKDLIFALIATFYSALMIYAGGLKYLLLSAIIYGPGTILYLIAKREQHQKA 472

Query: 453 FTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           F   E+++F  +++ A+ A Y +  G +T+
Sbjct: 473 FNTYERILFIVLIVAAVAAIYSIATGIITI 502


>TR:H0UNX0_9BACT H0UNX0 Arginine/ornithine antiporter (Precursor)
           OS=Thermanaerovibrio velox DSM 12556 GN=TheveDRAFT_0286
           PE=4 SV=1
          Length = 472

 Score =  501 bits (1289), Expect = e-172
 Identities = 242/478 (50%), Positives = 335/478 (70%), Gaps = 10/478 (2%)

Query: 5   SSQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTL 64
           S +KL L +L ALV+GSMIG G+FSLP ++A +A  GA+ +GW IT +GM+ LA  +Q+L
Sbjct: 2   SDKKLGLFSLVALVIGSMIGAGVFSLPSDIARNAGPGAIALGWLITGIGMIALALTYQSL 61

Query: 65  ANRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKG 124
           ANRKPELDGG+Y+YAKAGFGD++GF+SAWGYW+SAWLGNV + VLLF  + YF P FG  
Sbjct: 62  ANRKPELDGGIYSYAKAGFGDFIGFNSAWGYWLSAWLGNVAFLVLLFEAIAYFIPAFG-- 119

Query: 125 DTVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTA 184
           +   A+  ASV+LW +HFLVLRG+++AA +N +TTV K+VP+ LF L+ +  FK DIF A
Sbjct: 120 NKTMAVAGASVILWGIHFLVLRGVRDAAIVNLITTVGKLVPIILFALMAVLGFKADIFNA 179

Query: 185 DIWGKSNP-DLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVL 243
           D WG     D G V+ QVR+ M+VT+WVFIG+EGA + S RAEK+SDVGKATVIG +  L
Sbjct: 180 DFWGTGGALDWGKVLEQVRSTMMVTLWVFIGVEGAVVLSGRAEKKSDVGKATVIGLLGTL 239

Query: 244 LLLVLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVL 303
            L V++++ S+GVM + EL KLQNP+ A +LE +VG WGA +I++GL+ISL GA L W +
Sbjct: 240 ALYVVISLASLGVMPREELIKLQNPTTAYILERMVGSWGATIINLGLIISLSGATLGWTM 299

Query: 304 LCAEIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYT 363
           L AEI + AAKD  +P F  +EN N+ P N+LW+TN  +Q+FL++   +         Y 
Sbjct: 300 LAAEIPYVAAKDKVLPSFFAKENENKAPVNSLWITNGLIQLFLLITLVSE------STYQ 353

Query: 364 KMLLLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYAGG 423
            +  +A++ IL+PY +SA Y L L+  GE Y  D   +S +L+I+ +A  YA+WL+YA G
Sbjct: 354 ALYTIASAAILVPYLFSALYQLKLSSTGEGYSQD-ESKSFELLISLVASVYALWLIYAAG 412

Query: 424 LKYLLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLT 481
           L+YLL+ A+LYAPGA+ + KAK E     F  +E  +   +   A+ A Y +  G ++
Sbjct: 413 LEYLLMCAILYAPGAVFYWKAKRENNAKAFGAVETALLLGLCAAAVTAVYLMAKGVIS 470


>TR:Q92YG7_RHIME Q92YG7 ArcD1 arginine/ornithine antiporter OS=Rhizobium meliloti
           (strain 1021) GN=arcD1 PE=4 SV=1
          Length = 475

 Score =  501 bits (1289), Expect = e-172
 Identities = 248/478 (51%), Positives = 337/478 (70%), Gaps = 6/478 (1%)

Query: 5   SSQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTL 64
           ++QKL L +L ALVVGSM+G GIFSLP+    +      ++ W I   G+ TLA VF+ L
Sbjct: 4   TAQKLSLASLAALVVGSMVGAGIFSLPRTFGDATGPFGAIVAWCIAGAGIFTLAHVFRVL 63

Query: 65  ANRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKG 124
           A RK +LD GVYAYA AGFGDY GF S  GYW+   + +V Y+VL+ +TLG FFPIFG G
Sbjct: 64  AERKSDLDAGVYAYANAGFGDYAGFLSVLGYWLVGCIADVSYWVLIKATLGAFFPIFGDG 123

Query: 125 DTVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTA 184
           +T+AA++ +SV LW  HF++LRGIKEAA INTV TVAK+VP+ +FI+I L AF+ D+F +
Sbjct: 124 NTIAAVLVSSVALWGFHFMILRGIKEAAAINTVVTVAKIVPILIFIVILLGAFETDLFRS 183

Query: 185 DIWGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLL 244
           + WG ++    S+  Q+R  MLVTV+VFIG+EGAS++S  A KRSDVG AT +GF+ VL 
Sbjct: 184 NFWGGADMPEASLFEQIRATMLVTVFVFIGVEGASVYSRYARKRSDVGVATTLGFVVVLG 243

Query: 245 LLVLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLL 304
           L+VLV +L  G + +PE+A ++ PSMA VLE +VG WG+V +S GL++S+LGA L+W L+
Sbjct: 244 LMVLVTLLPYGALERPEIAAMRQPSMASVLESIVGPWGSVFVSAGLIVSVLGAYLAWSLI 303

Query: 305 CAEIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTK 364
           C E++F AAK+  MP  L REN+N VPA ALWL+N  +Q+FL+   F+       D +  
Sbjct: 304 CVEVLFCAAKNGDMPSVLARENSNSVPAAALWLSNGVIQLFLISTLFSE------DAFRL 357

Query: 365 MLLLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYAGGL 424
           M+ L ++M+LIPY   AAYG L+  +GETY    +ER +DL++AG A  Y  +++YAGGL
Sbjct: 358 MVNLTSAMVLIPYLLVAAYGFLVAKRGETYNIRPKERFRDLILAGAATVYTAFMIYAGGL 417

Query: 425 KYLLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           K+LLLSA+LYA G  LF  A+ E  +P+F+  E L+F AVV G LV  YGL  G +T+
Sbjct: 418 KFLLLSAILYALGTALFFYARREQKKPLFSPREWLVFIAVVAGCLVGIYGLVTGSITI 475


>TR:F6C0I1_SINMB F6C0I1 Arginine/ornithine antiporter (Precursor) OS=Sinorhizobium
           meliloti (strain BL225C) GN=SinmeB_6610 PE=4 SV=1
          Length = 475

 Score =  501 bits (1289), Expect = e-172
 Identities = 248/478 (51%), Positives = 337/478 (70%), Gaps = 6/478 (1%)

Query: 5   SSQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTL 64
           ++QKL L +L ALVVGSM+G GIFSLP+    +      ++ W I   G+ TLA VF+ L
Sbjct: 4   TAQKLSLASLAALVVGSMVGAGIFSLPRTFGDATGPFGAIVAWCIAGAGIFTLAHVFRVL 63

Query: 65  ANRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKG 124
           A RK +LD GVYAYA AGFGDY GF S  GYW+   + +V Y+VL+ +TLG FFPIFG G
Sbjct: 64  AERKSDLDAGVYAYANAGFGDYAGFLSVLGYWLVGCIADVSYWVLIKATLGAFFPIFGDG 123

Query: 125 DTVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTA 184
           +T+AA++ +SV LW  HF++LRGIKEAA INTV TVAK+VP+ +FI+I L AF+ D+F +
Sbjct: 124 NTIAAVLVSSVALWGFHFMILRGIKEAAAINTVVTVAKIVPILIFIVILLGAFETDLFRS 183

Query: 185 DIWGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLL 244
           + WG ++    S+  Q+R  MLVTV+VFIG+EGAS++S  A KRSDVG AT +GF+ VL 
Sbjct: 184 NFWGGADMPEASLFEQIRATMLVTVFVFIGVEGASVYSRYARKRSDVGVATTLGFVVVLG 243

Query: 245 LLVLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLL 304
           L+VLV +L  G + +PE+A ++ PSMA VLE +VG WG+V +S GL++S+LGA L+W L+
Sbjct: 244 LMVLVTLLPYGALERPEIAAMRQPSMASVLESIVGPWGSVFVSAGLIVSVLGAYLAWSLI 303

Query: 305 CAEIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTK 364
           C E++F AAK+  MP  L REN+N VPA ALWL+N  +Q+FL+   F+       D +  
Sbjct: 304 CVEVLFCAAKNGDMPSVLARENSNSVPAAALWLSNGVIQLFLISTLFSE------DAFRL 357

Query: 365 MLLLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYAGGL 424
           M+ L ++M+LIPY   AAYG L+  +GETY    +ER +DL++AG A  Y  +++YAGGL
Sbjct: 358 MVNLTSAMVLIPYLLVAAYGFLVAKRGETYNIRPKERFRDLILAGAATVYTAFMIYAGGL 417

Query: 425 KYLLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           K+LLLSA+LYA G  LF  A+ E  +P+F+  E L+F AVV G LV  YGL  G +T+
Sbjct: 418 KFLLLSAILYALGTALFFYARREQKKPLFSPREWLVFIAVVAGCLVGIYGLVTGSITI 475


>TR:G0DUY5_PROAA G0DUY5 Arginine/ornithine antiporter ArcD OS=Propionibacterium
           acnes 6609 GN=TIB1ST10_03005 PE=4 SV=1
          Length = 518

 Score =  502 bits (1293), Expect = e-172
 Identities = 261/477 (54%), Positives = 339/477 (71%), Gaps = 9/477 (1%)

Query: 8   KLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLANR 67
           KL   A+ +LVVGSMIGGGIFSLPQN+AA+A  G ++IGW IT +GM+ LA V+Q LA R
Sbjct: 48  KLSFPAMLSLVVGSMIGGGIFSLPQNIAAAASPGPMVIGWTITGIGMICLAMVYQKLAIR 107

Query: 68  KPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDTV 127
           +P+LD G+YAYAKAGFGD++GF+SAWGYW+SA +GNVGY VLLFST+G F P F  G+TV
Sbjct: 108 RPDLDNGIYAYAKAGFGDFIGFNSAWGYWLSALIGNVGYLVLLFSTVGKFVPAFAGGNTV 167

Query: 128 AAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTADIW 187
            A++ ASVLLW  H LVL G++ AAF+NT+ T+AK+VPL  FI IC  AF + +FT D W
Sbjct: 168 WAVLAASVLLWLTHALVLAGVRTAAFVNTIATIAKIVPLITFIAICAVAFDVGVFTEDFW 227

Query: 188 GKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLLLV 247
           G S+  LGSV  Q ++MMLVTVWVFIGIEGASI+S RA KRSDVGKATV GF+ VL+LL+
Sbjct: 228 G-SHAGLGSVFAQTKSMMLVTVWVFIGIEGASIYSKRARKRSDVGKATVGGFLFVLVLLI 286

Query: 248 LVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLCAE 307
            VN+LSMG+M + +LA L + SM  VL  VVG WG+VL+S G++ISLLGALL+W+LLC E
Sbjct: 287 GVNLLSMGIMHRAKLAGLPDASMGDVLSSVVGPWGSVLVSAGVIISLLGALLAWILLCGE 346

Query: 308 IMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKMLL 367
            M    +D TMP+   R N ++ PA ALW+TNI  Q+ LV+     G       Y  M  
Sbjct: 347 TMQVPGEDGTMPKLFGRINKHEAPAPALWITNIVSQICLVMTVLWDG------AYLAMAT 400

Query: 368 LATSMILIPYFWSAAYGLLLTLKGETYENDAR-ERSKDLVIAGIAVAYAVWLLYAGGLKY 426
           LA ++IL+PY  SAA+ L + +KGETYEN  R +R +D V+A +A  Y +WL+ A G   
Sbjct: 401 LAAALILVPYLLSAAFALKMVIKGETYENGPRSQRVRDAVVATVATLYGIWLVVAAGADA 460

Query: 427 LLLSALLYAPGAILFAKAKHEV-GQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           L+L+ALLY PGA +F  AK E   + IF   E  +   + + ++V+   +  G L+L
Sbjct: 461 LMLAALLYLPGAAVFVWAKREQRAKRIFKPYEIGVLVLLALISVVSIISIVTGRLSL 517


>TR:F9N928_9ACTO F9N928 Arginine/ornithine antiporter OS=Propionibacterium sp.
           CC003-HC2 GN=arcD PE=4 SV=1
          Length = 518

 Score =  502 bits (1293), Expect = e-172
 Identities = 261/477 (54%), Positives = 339/477 (71%), Gaps = 9/477 (1%)

Query: 8   KLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLANR 67
           KL   A+ +LVVGSMIGGGIFSLPQN+AA+A  G ++IGW IT +GM+ LA V+Q LA R
Sbjct: 48  KLSFPAMLSLVVGSMIGGGIFSLPQNIAAAASPGPMVIGWTITGIGMICLAMVYQKLAIR 107

Query: 68  KPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDTV 127
           +P+LD G+YAYAKAGFGD++GF+SAWGYW+SA +GNVGY VLLFST+G F P F  G+TV
Sbjct: 108 RPDLDNGIYAYAKAGFGDFIGFNSAWGYWLSALIGNVGYLVLLFSTVGKFVPAFAGGNTV 167

Query: 128 AAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTADIW 187
            A++ ASVLLW  H LVL G++ AAF+NT+ T+AK+VPL  FI IC  AF + +FT D W
Sbjct: 168 WAVLAASVLLWLTHALVLAGVRTAAFVNTIATIAKIVPLITFIAICAVAFDVGVFTEDFW 227

Query: 188 GKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLLLV 247
           G S+  LGSV  Q ++MMLVTVWVFIGIEGASI+S RA KRSDVGKATV GF+ VL+LL+
Sbjct: 228 G-SHAGLGSVFAQTKSMMLVTVWVFIGIEGASIYSKRARKRSDVGKATVGGFLFVLVLLI 286

Query: 248 LVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLCAE 307
            VN+LSMG+M + +LA L + SM  VL  VVG WG+VL+S G++ISLLGALL+W+LLC E
Sbjct: 287 GVNLLSMGIMHRAKLAGLPDASMGDVLSSVVGPWGSVLVSAGVIISLLGALLAWILLCGE 346

Query: 308 IMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKMLL 367
            M    +D TMP+   R N ++ PA ALW+TNI  Q+ LV+     G       Y  M  
Sbjct: 347 TMQVPGEDGTMPKLFGRINKHEAPAPALWITNIVSQICLVMTVLWDG------AYLAMAT 400

Query: 368 LATSMILIPYFWSAAYGLLLTLKGETYENDAR-ERSKDLVIAGIAVAYAVWLLYAGGLKY 426
           LA ++IL+PY  SAA+ L + +KGETYEN  R +R +D V+A +A  Y +WL+ A G   
Sbjct: 401 LAAALILVPYLLSAAFALKMVIKGETYENGPRSQRVRDAVVATVATLYGIWLVVAAGADA 460

Query: 427 LLLSALLYAPGAILFAKAKHEV-GQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           L+L+ALLY PGA +F  AK E   + IF   E  +   + + ++V+   +  G L+L
Sbjct: 461 LMLAALLYLPGAAVFVWAKREQRAKRIFKPYEIGVLVLLALISVVSIISIVTGRLSL 517


>TR:F5TXQ2_9ACTO F5TXQ2 Arginine/ornithine antiporter OS=Propionibacterium sp.
           434-HC2 GN=arcD PE=4 SV=1
          Length = 518

 Score =  502 bits (1293), Expect = e-172
 Identities = 261/477 (54%), Positives = 339/477 (71%), Gaps = 9/477 (1%)

Query: 8   KLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLANR 67
           KL   A+ +LVVGSMIGGGIFSLPQN+AA+A  G ++IGW IT +GM+ LA V+Q LA R
Sbjct: 48  KLSFPAMLSLVVGSMIGGGIFSLPQNIAAAASPGPMVIGWTITGIGMICLAMVYQKLAIR 107

Query: 68  KPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDTV 127
           +P+LD G+YAYAKAGFGD++GF+SAWGYW+SA +GNVGY VLLFST+G F P F  G+TV
Sbjct: 108 RPDLDNGIYAYAKAGFGDFIGFNSAWGYWLSALIGNVGYLVLLFSTVGKFVPAFAGGNTV 167

Query: 128 AAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTADIW 187
            A++ ASVLLW  H LVL G++ AAF+NT+ T+AK+VPL  FI IC  AF + +FT D W
Sbjct: 168 WAVLAASVLLWLTHALVLAGVRTAAFVNTIATIAKIVPLITFIAICAVAFDVGVFTEDFW 227

Query: 188 GKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLLLV 247
           G S+  LGSV  Q ++MMLVTVWVFIGIEGASI+S RA KRSDVGKATV GF+ VL+LL+
Sbjct: 228 G-SHAGLGSVFAQTKSMMLVTVWVFIGIEGASIYSKRARKRSDVGKATVGGFLFVLVLLI 286

Query: 248 LVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLCAE 307
            VN+LSMG+M + +LA L + SM  VL  VVG WG+VL+S G++ISLLGALL+W+LLC E
Sbjct: 287 GVNLLSMGIMHRAKLAGLPDASMGDVLSSVVGPWGSVLVSAGVIISLLGALLAWILLCGE 346

Query: 308 IMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKMLL 367
            M    +D TMP+   R N ++ PA ALW+TNI  Q+ LV+     G       Y  M  
Sbjct: 347 TMQVPGEDGTMPKLFGRINKHEAPAPALWITNIVSQICLVMTVLWDG------AYLAMAT 400

Query: 368 LATSMILIPYFWSAAYGLLLTLKGETYENDAR-ERSKDLVIAGIAVAYAVWLLYAGGLKY 426
           LA ++IL+PY  SAA+ L + +KGETYEN  R +R +D V+A +A  Y +WL+ A G   
Sbjct: 401 LAAALILVPYLLSAAFALKMVIKGETYENGPRSQRVRDAVVATVATLYGIWLVVAAGADA 460

Query: 427 LLLSALLYAPGAILFAKAKHEV-GQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           L+L+ALLY PGA +F  AK E   + IF   E  +   + + ++V+   +  G L+L
Sbjct: 461 LMLAALLYLPGAAVFVWAKREQRAKRIFKPYEIGVLVLLALISVVSIISIVTGRLSL 517


>TR:F5TNN7_9ACTO F5TNN7 Arginine/ornithine antiporter OS=Propionibacterium sp.
           409-HC1 GN=arcD PE=4 SV=1
          Length = 518

 Score =  502 bits (1293), Expect = e-172
 Identities = 261/477 (54%), Positives = 339/477 (71%), Gaps = 9/477 (1%)

Query: 8   KLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLANR 67
           KL   A+ +LVVGSMIGGGIFSLPQN+AA+A  G ++IGW IT +GM+ LA V+Q LA R
Sbjct: 48  KLSFPAMLSLVVGSMIGGGIFSLPQNIAAAASPGPMVIGWTITGIGMICLAMVYQKLAIR 107

Query: 68  KPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDTV 127
           +P+LD G+YAYAKAGFGD++GF+SAWGYW+SA +GNVGY VLLFST+G F P F  G+TV
Sbjct: 108 RPDLDNGIYAYAKAGFGDFIGFNSAWGYWLSALIGNVGYLVLLFSTVGKFVPAFAGGNTV 167

Query: 128 AAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTADIW 187
            A++ ASVLLW  H LVL G++ AAF+NT+ T+AK+VPL  FI IC  AF + +FT D W
Sbjct: 168 WAVLAASVLLWLTHALVLAGVRTAAFVNTIATIAKIVPLITFIAICAVAFDVGVFTEDFW 227

Query: 188 GKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLLLV 247
           G S+  LGSV  Q ++MMLVTVWVFIGIEGASI+S RA KRSDVGKATV GF+ VL+LL+
Sbjct: 228 G-SHAGLGSVFAQTKSMMLVTVWVFIGIEGASIYSKRARKRSDVGKATVGGFLFVLVLLI 286

Query: 248 LVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLCAE 307
            VN+LSMG+M + +LA L + SM  VL  VVG WG+VL+S G++ISLLGALL+W+LLC E
Sbjct: 287 GVNLLSMGIMHRAKLAGLPDASMGDVLSSVVGPWGSVLVSAGVIISLLGALLAWILLCGE 346

Query: 308 IMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKMLL 367
            M    +D TMP+   R N ++ PA ALW+TNI  Q+ LV+     G       Y  M  
Sbjct: 347 TMQVPGEDGTMPKLFGRINKHEAPAPALWITNIVSQICLVMTVLWDG------AYLAMAT 400

Query: 368 LATSMILIPYFWSAAYGLLLTLKGETYENDAR-ERSKDLVIAGIAVAYAVWLLYAGGLKY 426
           LA ++IL+PY  SAA+ L + +KGETYEN  R +R +D V+A +A  Y +WL+ A G   
Sbjct: 401 LAAALILVPYLLSAAFALKMVIKGETYENGPRSQRVRDAVVATVATLYGIWLVVAAGADA 460

Query: 427 LLLSALLYAPGAILFAKAKHEV-GQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           L+L+ALLY PGA +F  AK E   + IF   E  +   + + ++V+   +  G L+L
Sbjct: 461 LMLAALLYLPGAAVFVWAKREQRAKRIFKPYEIGVLVLLALISVVSIISIVTGRLSL 517


>TR:F1VIR5_PROAA F1VIR5 Arginine/ornithine antiporter OS=Propionibacterium acnes
           HL013PA2 GN=HMPREF9568_00831 PE=4 SV=1
          Length = 518

 Score =  502 bits (1293), Expect = e-172
 Identities = 261/477 (54%), Positives = 339/477 (71%), Gaps = 9/477 (1%)

Query: 8   KLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLANR 67
           KL   A+ +LVVGSMIGGGIFSLPQN+AA+A  G ++IGW IT +GM+ LA V+Q LA R
Sbjct: 48  KLSFPAMLSLVVGSMIGGGIFSLPQNIAAAASPGPMVIGWTITGIGMICLAMVYQKLAIR 107

Query: 68  KPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDTV 127
           +P+LD G+YAYAKAGFGD++GF+SAWGYW+SA +GNVGY VLLFST+G F P F  G+TV
Sbjct: 108 RPDLDNGIYAYAKAGFGDFIGFNSAWGYWLSALIGNVGYLVLLFSTVGKFVPAFAGGNTV 167

Query: 128 AAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTADIW 187
            A++ ASVLLW  H LVL G++ AAF+NT+ T+AK+VPL  FI IC  AF + +FT D W
Sbjct: 168 WAVLAASVLLWLTHALVLAGVRTAAFVNTIATIAKIVPLITFIAICAVAFDVGVFTEDFW 227

Query: 188 GKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLLLV 247
           G S+  LGSV  Q ++MMLVTVWVFIGIEGASI+S RA KRSDVGKATV GF+ VL+LL+
Sbjct: 228 G-SHAGLGSVFAQTKSMMLVTVWVFIGIEGASIYSKRARKRSDVGKATVGGFLFVLVLLI 286

Query: 248 LVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLCAE 307
            VN+LSMG+M + +LA L + SM  VL  VVG WG+VL+S G++ISLLGALL+W+LLC E
Sbjct: 287 GVNLLSMGIMHRAKLAGLPDASMGDVLSSVVGPWGSVLVSAGVIISLLGALLAWILLCGE 346

Query: 308 IMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKMLL 367
            M    +D TMP+   R N ++ PA ALW+TNI  Q+ LV+     G       Y  M  
Sbjct: 347 TMQVPGEDGTMPKLFGRINKHEAPAPALWITNIVSQICLVMTVLWDG------AYLAMAT 400

Query: 368 LATSMILIPYFWSAAYGLLLTLKGETYENDAR-ERSKDLVIAGIAVAYAVWLLYAGGLKY 426
           LA ++IL+PY  SAA+ L + +KGETYEN  R +R +D V+A +A  Y +WL+ A G   
Sbjct: 401 LAAALILVPYLLSAAFALKMVIKGETYENGPRSQRVRDAVVATVATLYGIWLVVAAGADA 460

Query: 427 LLLSALLYAPGAILFAKAKHEV-GQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           L+L+ALLY PGA +F  AK E   + IF   E  +   + + ++V+   +  G L+L
Sbjct: 461 LMLAALLYLPGAAVFVWAKREQRAKRIFKPYEIGVLVLLALISVVSIISIVTGRLSL 517


>TR:F1UBX7_PROAA F1UBX7 Arginine/ornithine antiporter OS=Propionibacterium acnes
           HL097PA1 GN=HMPREF9344_01746 PE=4 SV=1
          Length = 518

 Score =  502 bits (1293), Expect = e-172
 Identities = 261/477 (54%), Positives = 339/477 (71%), Gaps = 9/477 (1%)

Query: 8   KLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLANR 67
           KL   A+ +LVVGSMIGGGIFSLPQN+AA+A  G ++IGW IT +GM+ LA V+Q LA R
Sbjct: 48  KLSFPAMLSLVVGSMIGGGIFSLPQNIAAAASPGPMVIGWTITGIGMICLAMVYQKLAIR 107

Query: 68  KPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDTV 127
           +P+LD G+YAYAKAGFGD++GF+SAWGYW+SA +GNVGY VLLFST+G F P F  G+TV
Sbjct: 108 RPDLDNGIYAYAKAGFGDFIGFNSAWGYWLSALIGNVGYLVLLFSTVGKFVPAFAGGNTV 167

Query: 128 AAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTADIW 187
            A++ ASVLLW  H LVL G++ AAF+NT+ T+AK+VPL  FI IC  AF + +FT D W
Sbjct: 168 WAVLAASVLLWLTHALVLAGVRTAAFVNTIATIAKIVPLITFIAICAVAFDVGVFTEDFW 227

Query: 188 GKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLLLV 247
           G S+  LGSV  Q ++MMLVTVWVFIGIEGASI+S RA KRSDVGKATV GF+ VL+LL+
Sbjct: 228 G-SHAGLGSVFAQTKSMMLVTVWVFIGIEGASIYSKRARKRSDVGKATVGGFLFVLVLLI 286

Query: 248 LVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLCAE 307
            VN+LSMG+M + +LA L + SM  VL  VVG WG+VL+S G++ISLLGALL+W+LLC E
Sbjct: 287 GVNLLSMGIMHRAKLAGLPDASMGDVLSSVVGPWGSVLVSAGVIISLLGALLAWILLCGE 346

Query: 308 IMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKMLL 367
            M    +D TMP+   R N ++ PA ALW+TNI  Q+ LV+     G       Y  M  
Sbjct: 347 TMQVPGEDGTMPKLFGRINKHEAPAPALWITNIVSQICLVMTVLWDG------AYLAMAT 400

Query: 368 LATSMILIPYFWSAAYGLLLTLKGETYENDAR-ERSKDLVIAGIAVAYAVWLLYAGGLKY 426
           LA ++IL+PY  SAA+ L + +KGETYEN  R +R +D V+A +A  Y +WL+ A G   
Sbjct: 401 LAAALILVPYLLSAAFALKMVIKGETYENGPRSQRVRDAVVATVATLYGIWLVVAAGADA 460

Query: 427 LLLSALLYAPGAILFAKAKHEV-GQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           L+L+ALLY PGA +F  AK E   + IF   E  +   + + ++V+   +  G L+L
Sbjct: 461 LMLAALLYLPGAAVFVWAKREQRAKRIFKPYEIGVLVLLALISVVSIISIVTGRLSL 517


>TR:E6DX55_PROAA E6DX55 Arginine/ornithine antiporter OS=Propionibacterium acnes
           HL053PA2 GN=HMPREF9565_02398 PE=4 SV=1
          Length = 518

 Score =  502 bits (1293), Expect = e-172
 Identities = 260/477 (54%), Positives = 339/477 (71%), Gaps = 9/477 (1%)

Query: 8   KLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLANR 67
           KL   A+ +LV+GSMIGGGIFSLPQN+AA+A  G ++IGW IT +GM+ LA V+Q LA R
Sbjct: 48  KLSFPAMLSLVIGSMIGGGIFSLPQNIAAAASPGPMVIGWTITGIGMICLAMVYQKLAIR 107

Query: 68  KPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDTV 127
           +P+LD G+YAYAKAGFGD++GF+SAWGYW+SA +GNVGY VLLFST+G F P F  G+TV
Sbjct: 108 RPDLDNGIYAYAKAGFGDFIGFNSAWGYWLSALIGNVGYLVLLFSTVGKFVPAFAGGNTV 167

Query: 128 AAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTADIW 187
            A++ ASVLLW  H LVL G++ AAF+NT+ T+AK+VPL  FI IC  AF + +FT D W
Sbjct: 168 WAVLAASVLLWLTHALVLAGVRTAAFVNTIATIAKIVPLITFIAICAVAFDVGVFTEDFW 227

Query: 188 GKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLLLV 247
           G S+  LGSV  Q ++MMLVTVWVFIGIEGASI+S RA KRSDVGKATV GF+ VL+LL+
Sbjct: 228 G-SHAGLGSVFAQTKSMMLVTVWVFIGIEGASIYSKRARKRSDVGKATVGGFLFVLVLLI 286

Query: 248 LVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLCAE 307
            VN+LSMG+M + +LA L + SM  VL  VVG WG+VL+S G++ISLLGALL+W+LLC E
Sbjct: 287 GVNLLSMGIMHRAKLAGLPDASMGDVLSSVVGPWGSVLVSAGVIISLLGALLAWILLCGE 346

Query: 308 IMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKMLL 367
            M    +D TMP+   R N ++ PA ALW+TNI  Q+ LV+     G       Y  M  
Sbjct: 347 TMQVPGEDGTMPKLFGRINKHEAPAPALWITNIVSQICLVMTVLWDG------AYLAMAT 400

Query: 368 LATSMILIPYFWSAAYGLLLTLKGETYENDAR-ERSKDLVIAGIAVAYAVWLLYAGGLKY 426
           LA ++IL+PY  SAA+ L + +KGETYEN  R +R +D V+A +A  Y +WL+ A G   
Sbjct: 401 LAAALILVPYLLSAAFALKMVIKGETYENGPRSQRVRDAVVATVATLYGIWLVVAAGADA 460

Query: 427 LLLSALLYAPGAILFAKAKHEV-GQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           L+L+ALLY PGA +F  AK E+  + IF   E  +   +   ++V+   +  G L+L
Sbjct: 461 LMLAALLYLPGAAVFVWAKRELRAKRIFKPYEIGVLVLLAFISVVSIISIVTGRLSL 517


>TR:E6CB81_PROAA E6CB81 Arginine/ornithine antiporter OS=Propionibacterium acnes
           HL030PA1 GN=HMPREF9601_00506 PE=4 SV=1
          Length = 518

 Score =  502 bits (1293), Expect = e-172
 Identities = 261/477 (54%), Positives = 339/477 (71%), Gaps = 9/477 (1%)

Query: 8   KLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLANR 67
           KL   A+ +LVVGSMIGGGIFSLPQN+AA+A  G ++IGW IT +GM+ LA V+Q LA R
Sbjct: 48  KLSFPAMLSLVVGSMIGGGIFSLPQNIAAAASPGPMVIGWTITGIGMICLAMVYQKLAIR 107

Query: 68  KPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDTV 127
           +P+LD G+YAYAKAGFGD++GF+SAWGYW+SA +GNVGY VLLFST+G F P F  G+TV
Sbjct: 108 RPDLDNGIYAYAKAGFGDFIGFNSAWGYWLSALIGNVGYLVLLFSTVGKFVPAFAGGNTV 167

Query: 128 AAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTADIW 187
            A++ ASVLLW  H LVL G++ AAF+NT+ T+AK+VPL  FI IC  AF + +FT D W
Sbjct: 168 WAVLAASVLLWLTHALVLAGVRTAAFVNTIATIAKIVPLITFIAICAVAFDVGVFTEDFW 227

Query: 188 GKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLLLV 247
           G S+  LGSV  Q ++MMLVTVWVFIGIEGASI+S RA KRSDVGKATV GF+ VL+LL+
Sbjct: 228 G-SHAGLGSVFAQTKSMMLVTVWVFIGIEGASIYSKRARKRSDVGKATVGGFLFVLVLLI 286

Query: 248 LVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLCAE 307
            VN+LSMG+M + +LA L + SM  VL  VVG WG+VL+S G++ISLLGALL+W+LLC E
Sbjct: 287 GVNLLSMGIMHRAKLAGLPDASMGDVLSSVVGPWGSVLVSAGVIISLLGALLAWILLCGE 346

Query: 308 IMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKMLL 367
            M    +D TMP+   R N ++ PA ALW+TNI  Q+ LV+     G       Y  M  
Sbjct: 347 TMQVPGEDGTMPKLFGRINKHEAPAPALWITNIVSQICLVMTVLWDG------AYLAMAT 400

Query: 368 LATSMILIPYFWSAAYGLLLTLKGETYENDAR-ERSKDLVIAGIAVAYAVWLLYAGGLKY 426
           LA ++IL+PY  SAA+ L + +KGETYEN  R +R +D V+A +A  Y +WL+ A G   
Sbjct: 401 LAAALILVPYLLSAAFALKMVIKGETYENGPRSQRVRDAVVATVATLYGIWLVVAAGADA 460

Query: 427 LLLSALLYAPGAILFAKAKHEV-GQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           L+L+ALLY PGA +F  AK E   + IF   E  +   + + ++V+   +  G L+L
Sbjct: 461 LMLAALLYLPGAAVFVWAKREQRAKRIFKPYEIGVLVLLALISVVSIISIVTGRLSL 517


>TR:E4DR09_PROAA E4DR09 Arginine/ornithine antiporter OS=Propionibacterium acnes
           HL087PA2 GN=HMPREF9580_00589 PE=4 SV=1
          Length = 518

 Score =  502 bits (1293), Expect = e-172
 Identities = 261/477 (54%), Positives = 339/477 (71%), Gaps = 9/477 (1%)

Query: 8   KLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLANR 67
           KL   A+ +LVVGSMIGGGIFSLPQN+AA+A  G ++IGW IT +GM+ LA V+Q LA R
Sbjct: 48  KLSFPAMLSLVVGSMIGGGIFSLPQNIAAAASPGPMVIGWTITGIGMICLAMVYQKLAIR 107

Query: 68  KPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDTV 127
           +P+LD G+YAYAKAGFGD++GF+SAWGYW+SA +GNVGY VLLFST+G F P F  G+TV
Sbjct: 108 RPDLDNGIYAYAKAGFGDFIGFNSAWGYWLSALIGNVGYLVLLFSTVGKFVPAFAGGNTV 167

Query: 128 AAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTADIW 187
            A++ ASVLLW  H LVL G++ AAF+NT+ T+AK+VPL  FI IC  AF + +FT D W
Sbjct: 168 WAVLAASVLLWLTHALVLAGVRAAAFVNTIATIAKIVPLITFIAICAVAFDVGVFTEDFW 227

Query: 188 GKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLLLV 247
           G S+  LGSV  Q ++MMLVTVWVFIGIEGASI+S RA KRSDVGKATV GF+ VL+LL+
Sbjct: 228 G-SHAGLGSVFAQTKSMMLVTVWVFIGIEGASIYSKRARKRSDVGKATVGGFLFVLVLLI 286

Query: 248 LVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLCAE 307
            VN+LSMG+M + +LA L + SM  VL  VVG WG+VL+S G++ISLLGALL+W+LLC E
Sbjct: 287 GVNLLSMGIMHRAKLAGLPDASMGDVLSSVVGPWGSVLVSAGVIISLLGALLAWILLCGE 346

Query: 308 IMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKMLL 367
            M    +D TMP+   R N ++ PA ALW+TNI  Q+ LV+     G       Y  M  
Sbjct: 347 TMQVPGEDGTMPKLFGRINKHEAPAPALWITNIVSQICLVMTVLWDG------AYLAMAT 400

Query: 368 LATSMILIPYFWSAAYGLLLTLKGETYENDAR-ERSKDLVIAGIAVAYAVWLLYAGGLKY 426
           LA ++IL+PY  SAA+ L + +KGETYEN  R +R +D V+A +A  Y +WL+ A G   
Sbjct: 401 LAAALILVPYLLSAAFALKMVIKGETYENGPRSQRVRDAVVATVATLYGIWLVVAAGADA 460

Query: 427 LLLSALLYAPGAILFAKAKHEV-GQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           L+L+ALLY PGA +F  AK E   + IF   E  +   + + ++V+   +  G L+L
Sbjct: 461 LMLAALLYLPGAAVFVWAKREQRAKRIFKPYEIGVLVLLALISVVSIISIVTGRLSL 517


>TR:E4C5G8_PROAA E4C5G8 Arginine/ornithine antiporter OS=Propionibacterium acnes
           HL063PA1 GN=HMPREF9611_01468 PE=4 SV=1
          Length = 518

 Score =  502 bits (1293), Expect = e-172
 Identities = 261/477 (54%), Positives = 339/477 (71%), Gaps = 9/477 (1%)

Query: 8   KLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLANR 67
           KL   A+ +LVVGSMIGGGIFSLPQN+AA+A  G ++IGW IT +GM+ LA V+Q LA R
Sbjct: 48  KLSFPAMLSLVVGSMIGGGIFSLPQNIAAAASPGPMVIGWTITGIGMICLAMVYQKLAIR 107

Query: 68  KPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDTV 127
           +P+LD G+YAYAKAGFGD++GF+SAWGYW+SA +GNVGY VLLFST+G F P F  G+TV
Sbjct: 108 RPDLDNGIYAYAKAGFGDFIGFNSAWGYWLSALIGNVGYLVLLFSTVGKFVPAFAGGNTV 167

Query: 128 AAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTADIW 187
            A++ ASVLLW  H LVL G++ AAF+NT+ T+AK+VPL  FI IC  AF + +FT D W
Sbjct: 168 WAVLAASVLLWLTHALVLAGVRTAAFVNTIATIAKIVPLITFIAICAVAFDVGVFTEDFW 227

Query: 188 GKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLLLV 247
           G S+  LGSV  Q ++MMLVTVWVFIGIEGASI+S RA KRSDVGKATV GF+ VL+LL+
Sbjct: 228 G-SHAGLGSVFAQTKSMMLVTVWVFIGIEGASIYSKRARKRSDVGKATVGGFLFVLVLLI 286

Query: 248 LVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLCAE 307
            VN+LSMG+M + +LA L + SM  VL  VVG WG+VL+S G++ISLLGALL+W+LLC E
Sbjct: 287 GVNLLSMGIMHRAKLAGLPDASMGDVLSSVVGPWGSVLVSAGVIISLLGALLAWILLCGE 346

Query: 308 IMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKMLL 367
            M    +D TMP+   R N ++ PA ALW+TNI  Q+ LV+     G       Y  M  
Sbjct: 347 TMQVPGEDGTMPKLFGRINKHEAPAPALWITNIVSQICLVMTVLWDG------AYLAMAT 400

Query: 368 LATSMILIPYFWSAAYGLLLTLKGETYENDAR-ERSKDLVIAGIAVAYAVWLLYAGGLKY 426
           LA ++IL+PY  SAA+ L + +KGETYEN  R +R +D V+A +A  Y +WL+ A G   
Sbjct: 401 LAAALILVPYLLSAAFALKMVIKGETYENGPRSQRVRDAVVATVATLYGIWLVVAAGADA 460

Query: 427 LLLSALLYAPGAILFAKAKHEV-GQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           L+L+ALLY PGA +F  AK E   + IF   E  +   + + ++V+   +  G L+L
Sbjct: 461 LMLAALLYLPGAAVFVWAKREQRAKRIFKPYEIGVLVLLALISVVSIISIVTGRLSL 517


>TR:E7B9W5_YERE1 E7B9W5 Arginine/ornithine antiporter ArcD OS=Yersinia
           enterocolitica subsp. palearctica serotype O:3 (strain
           DSM 13030 / CIP 106945 / Y11) GN=Y11_06061 PE=4 SV=1
          Length = 500

 Score =  501 bits (1291), Expect = e-172
 Identities = 264/506 (52%), Positives = 343/506 (67%), Gaps = 30/506 (5%)

Query: 1   MSQESSQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFV 60
           M+  S++KL L +LT+LVVGSMIG GIFSLP     +      LI W I   GMLTLAFV
Sbjct: 1   MAASSNKKLSLWSLTSLVVGSMIGAGIFSLPATFGRATGGFGALIAWVIAGGGMLTLAFV 60

Query: 61  FQTLANRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPI 120
           FQTLA RKPELD GVY YAK GFGDY GF+SA G+W  A +G+V YFVL+ STLG FFP+
Sbjct: 61  FQTLAQRKPELDSGVYIYAKTGFGDYAGFASAIGFWAGACIGSVSYFVLIKSTLGAFFPL 120

Query: 121 FGKGDTVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLD 180
           FG G+T++A++ AS +LW+ HF+VLRGIKEAA INT+ T AKV+P+F+FI++  FAF  D
Sbjct: 121 FGDGNTLSAVLIASFILWSFHFMVLRGIKEAAAINTIATFAKVIPIFIFIIVLAFAFHTD 180

Query: 181 IFTADIWG----------KSNPDLG--------------SVMNQVRNMMLVTVWVFIGIE 216
            F  + WG              D G              S+ +QVR+ MLVTV+VF+GIE
Sbjct: 181 TFALNFWGIQPLGAVGDLTHLDDYGYTGHAALEIGSGSESLFSQVRSTMLVTVFVFVGIE 240

Query: 217 GASIFSSRAEKRSDVGKATVIGFITVLLLLVLVNVLSMGVMTQPELAKLQNPSMALVLEH 276
           GAS++S  A++R  VG ATV+GFI VL LLVLV +LS GV+ +P+LA L+ PSMA VLEH
Sbjct: 241 GASVYSRYAKERKHVGIATVLGFIGVLCLLVLVTMLSYGVLLRPDLAALRQPSMAGVLEH 300

Query: 277 VVGHWGAVLISVGLLISLLGALLSWVLLCAEIMFAAAKDHTMPEFLRRENANQVPANALW 336
           +VG WGA+ IS+GL+IS++GA LSW LL AE ++ AAK + MP  L  EN + VP+ A+W
Sbjct: 301 IVGRWGAIFISIGLIISVMGAYLSWTLLAAEALYCAAKSNIMPSVLATENKHGVPSAAVW 360

Query: 337 LTNICVQVFLVVVFFTSGDPDGMDPYTKMLLLATSMILIPYFWSAAYGLLLTLKGETYEN 396
           ++NI +Q+FL+V  FT         +   L L +S++LIPY   AAYGL L    ETY  
Sbjct: 361 MSNIFIQLFLIVTLFTE------YAFQLALELTSSLVLIPYLLVAAYGLKLAWTRETYTV 414

Query: 397 DARERSKDLVIAGIAVAYAVWLLYAGGLKYLLLSALLYAPGAILFAKAKHEVGQPIFTGI 456
            A++  KD +IA IA  YAV ++YAGGLKY+LLSA++Y PG +LF  AK E  + +F+ I
Sbjct: 415 GAKDHKKDFIIASIATFYAVLMVYAGGLKYILLSAVIYGPGTLLFIIAKREQKKLVFSAI 474

Query: 457 EKLIFAAVVIGALVAAYGLYDGFLTL 482
           EK  FA  +I A+ A Y L  G +T+
Sbjct: 475 EKCAFAVALIAAVAALYSLATGIITV 500


>TR:G4KAM6_YEREN G4KAM6 Amino acid permease OS=Yersinia enterocolitica subsp.
           palearctica PhRBD_Ye1 GN=IOK_03871 PE=4 SV=1
          Length = 500

 Score =  501 bits (1291), Expect = e-172
 Identities = 264/506 (52%), Positives = 343/506 (67%), Gaps = 30/506 (5%)

Query: 1   MSQESSQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFV 60
           M+  S++KL L +LT+LVVGSMIG GIFSLP     +      LI W I   GMLTLAFV
Sbjct: 1   MAASSNKKLSLWSLTSLVVGSMIGAGIFSLPATFGRATGGFGALIAWVIAGGGMLTLAFV 60

Query: 61  FQTLANRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPI 120
           FQTLA RKPELD GVY YAK GFGDY GF+SA G+W  A +G+V YFVL+ STLG FFP+
Sbjct: 61  FQTLAQRKPELDSGVYIYAKTGFGDYAGFASAIGFWAGACIGSVSYFVLIKSTLGAFFPL 120

Query: 121 FGKGDTVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLD 180
           FG G+T++A++ AS +LW+ HF+VLRGIKEAA INT+ T AKV+P+F+FI++  FAF  D
Sbjct: 121 FGDGNTLSAVLIASFILWSFHFMVLRGIKEAAAINTIATFAKVIPIFIFIIVLAFAFHTD 180

Query: 181 IFTADIWG----------KSNPDLG--------------SVMNQVRNMMLVTVWVFIGIE 216
            F  + WG              D G              S+ +QVR+ MLVTV+VF+GIE
Sbjct: 181 TFALNFWGIQPLGAVGDLTHLDDYGYTGHAALEIGSGSESLFSQVRSTMLVTVFVFVGIE 240

Query: 217 GASIFSSRAEKRSDVGKATVIGFITVLLLLVLVNVLSMGVMTQPELAKLQNPSMALVLEH 276
           GAS++S  A++R  VG ATV+GFI VL LLVLV +LS GV+ +P+LA L+ PSMA VLEH
Sbjct: 241 GASVYSRYAKERKHVGIATVLGFIGVLCLLVLVTMLSYGVLLRPDLAALRQPSMAGVLEH 300

Query: 277 VVGHWGAVLISVGLLISLLGALLSWVLLCAEIMFAAAKDHTMPEFLRRENANQVPANALW 336
           +VG WGA+ IS+GL+IS++GA LSW LL AE ++ AAK + MP  L  EN + VP+ A+W
Sbjct: 301 IVGRWGAIFISIGLIISVMGAYLSWTLLAAEALYCAAKSNIMPSVLATENKHGVPSAAVW 360

Query: 337 LTNICVQVFLVVVFFTSGDPDGMDPYTKMLLLATSMILIPYFWSAAYGLLLTLKGETYEN 396
           ++NI +Q+FL+V  FT         +   L L +S++LIPY   AAYGL L    ETY  
Sbjct: 361 MSNIFIQLFLIVTLFTE------YAFQLALELTSSLVLIPYLLVAAYGLKLAWTRETYTV 414

Query: 397 DARERSKDLVIAGIAVAYAVWLLYAGGLKYLLLSALLYAPGAILFAKAKHEVGQPIFTGI 456
            A++  KD +IA IA  YAV ++YAGGLKY+LLSA++Y PG +LF  AK E  + +F+ I
Sbjct: 415 GAKDHKKDFIIASIATFYAVLMVYAGGLKYILLSAVIYGPGTLLFIIAKREQKKLVFSAI 474

Query: 457 EKLIFAAVVIGALVAAYGLYDGFLTL 482
           EK  FA  +I A+ A Y L  G +T+
Sbjct: 475 EKCAFAVALIAAVAALYSLATGIITV 500


>TR:E4DNL1_PROAA E4DNL1 Arginine/ornithine antiporter OS=Propionibacterium acnes
           HL059PA1 GN=HMPREF9589_02285 PE=4 SV=1
          Length = 518

 Score =  502 bits (1292), Expect = e-172
 Identities = 261/477 (54%), Positives = 339/477 (71%), Gaps = 9/477 (1%)

Query: 8   KLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLANR 67
           KL   A+ +LVVGSMIGGGIFSLPQN+AA+A  G ++IGW IT +GM+ LA V+Q LA R
Sbjct: 48  KLSFPAMLSLVVGSMIGGGIFSLPQNIAAAASPGPMVIGWTITGIGMICLAMVYQKLAIR 107

Query: 68  KPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDTV 127
           +P+LD G+YAYAKAGFGD++GF+SAWGYW+SA +GNVGY VLLFST+G F P F  G+TV
Sbjct: 108 RPDLDNGIYAYAKAGFGDFIGFNSAWGYWLSALIGNVGYLVLLFSTVGKFVPAFAGGNTV 167

Query: 128 AAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTADIW 187
            A++ ASVLLW  H LVL G++ AAF+NT+ T+AK+VPL  FI IC  AF + +FT D W
Sbjct: 168 WAVLAASVLLWLTHALVLAGVRTAAFVNTIATIAKIVPLITFIAICAVAFDVGVFTEDFW 227

Query: 188 GKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLLLV 247
           G S+  LGSV  Q ++MMLVTVWVFIGIEGASI+S RA KRSDVGKATV GF+ VL+LL+
Sbjct: 228 G-SHAGLGSVFAQTKSMMLVTVWVFIGIEGASIYSKRARKRSDVGKATVGGFLFVLVLLI 286

Query: 248 LVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLCAE 307
            VN+LSMG+M + +LA L + SM  VL  VVG WG VL+S G++ISLLGALL+W+LLC E
Sbjct: 287 GVNLLSMGIMHRAKLAGLPDASMGDVLSSVVGPWGWVLVSAGVIISLLGALLAWILLCGE 346

Query: 308 IMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKMLL 367
            M    +D TMP+   R N ++ PA ALW+TNI  Q+ LV+     G       Y  M  
Sbjct: 347 TMQVPGEDGTMPKLFGRINKHEAPAPALWITNIVSQICLVMTVLWDG------AYLAMAT 400

Query: 368 LATSMILIPYFWSAAYGLLLTLKGETYENDAR-ERSKDLVIAGIAVAYAVWLLYAGGLKY 426
           LA ++IL+PY  SAA+ L + +KGETYEN  R +R +D V+A +A  Y +WL+ A G   
Sbjct: 401 LAAALILVPYLLSAAFALKMVIKGETYENGPRSQRVRDAVVATVATLYGIWLVVAAGADA 460

Query: 427 LLLSALLYAPGAILFAKAKHEV-GQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           L+L+ALLY PGA +F  AK E+  + IF   E  +   + + ++V+   +  G L+L
Sbjct: 461 LMLAALLYLPGAAVFVWAKRELRAKRIFKPYEIGVLVLLALISVVSIISIVTGRLSL 517


>TR:F9YZB2_PROAA F9YZB2 Arginine/ornithine antiporter OS=Propionibacterium acnes 266
           GN=arcD PE=4 SV=1
          Length = 493

 Score =  501 bits (1289), Expect = e-172
 Identities = 260/477 (54%), Positives = 338/477 (70%), Gaps = 9/477 (1%)

Query: 8   KLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLANR 67
           KL   A+ +LVVGSMIGGGIFSLPQN+AA+A  G ++IGW IT +GM+ LA V+Q LA R
Sbjct: 23  KLSFPAMLSLVVGSMIGGGIFSLPQNIAAAASPGPMVIGWTITGIGMICLAMVYQKLAIR 82

Query: 68  KPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDTV 127
           +P+LD G+YAYAKAGFGD++GF+SAWGYW+SA +GNVGY VLLFST+G F P F  G+TV
Sbjct: 83  RPDLDNGIYAYAKAGFGDFIGFNSAWGYWLSALIGNVGYLVLLFSTVGKFVPAFAGGNTV 142

Query: 128 AAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTADIW 187
            A++ ASVLLW  H LVL G++ AAF+NT+ T+ K+VPL  FI IC  AF + +FT D W
Sbjct: 143 WAVLAASVLLWLTHALVLAGVRTAAFVNTIATITKIVPLITFIAICAVAFDVGVFTEDFW 202

Query: 188 GKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLLLV 247
           G S+  LGSV  Q ++MMLVTVWVFIGIEGASI+S RA KRSDVGKATV GF+ VL+LL+
Sbjct: 203 G-SHAGLGSVFAQTKSMMLVTVWVFIGIEGASIYSKRARKRSDVGKATVGGFLFVLVLLI 261

Query: 248 LVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLCAE 307
            VN+LSMG+M + +LA L + SM  VL  VVG WG+VL+S G++ISLLGALL+W+LLC E
Sbjct: 262 GVNLLSMGIMHRAKLAGLPDASMGDVLSSVVGPWGSVLVSAGVIISLLGALLAWILLCGE 321

Query: 308 IMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKMLL 367
            M    +D TMP+   R N ++ PA ALW+TNI  Q+ LV+     G       Y  M  
Sbjct: 322 TMQVPGEDGTMPKLFGRINKHEAPAPALWITNIVSQICLVMTVLWDG------AYLAMAT 375

Query: 368 LATSMILIPYFWSAAYGLLLTLKGETYENDAR-ERSKDLVIAGIAVAYAVWLLYAGGLKY 426
           LA ++IL+PY  SAA+ L + +KGETYEN  R +R +D V+A +A  Y +WL+ A G   
Sbjct: 376 LAAALILVPYLLSAAFALKMVIKGETYENGPRSQRVRDAVVATVATLYGIWLVVAAGADA 435

Query: 427 LLLSALLYAPGAILFAKAKHEV-GQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           L+L+ALLY PGA +F  AK E   + IF   E  +   + + ++V+   +  G L+L
Sbjct: 436 LMLAALLYLPGAAVFVWAKREQRAKRIFKPYEIGVLVLLALISVVSIISIVTGRLSL 492


>TR:F1TPM2_PROAA F1TPM2 Arginine/ornithine antiporter OS=Propionibacterium acnes
           HL096PA3 GN=HMPREF9337_01607 PE=4 SV=1
          Length = 518

 Score =  501 bits (1291), Expect = e-172
 Identities = 261/477 (54%), Positives = 339/477 (71%), Gaps = 9/477 (1%)

Query: 8   KLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLANR 67
           KL   A+ +LVVGSMIGGGIFSLPQN+AA+A  G ++IGW IT +GM+ LA V+Q LA R
Sbjct: 48  KLSFPAMLSLVVGSMIGGGIFSLPQNIAAAASPGPMVIGWTITGIGMICLAMVYQKLAIR 107

Query: 68  KPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDTV 127
           +P+LD G+YAYAKAGFGD++GF+SAWGYW+SA +GNVGY VLLFST+G F P F  G+TV
Sbjct: 108 RPDLDNGIYAYAKAGFGDFIGFNSAWGYWLSALIGNVGYLVLLFSTVGKFVPAFAGGNTV 167

Query: 128 AAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTADIW 187
            A++ ASVLLW  H LVL G++ AAF+NT+ T+AK+VPL  FI IC  AF + +FT D W
Sbjct: 168 WAVLAASVLLWLTHALVLAGVRIAAFVNTIATIAKIVPLITFIAICAVAFDVGVFTEDFW 227

Query: 188 GKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLLLV 247
           G S+  LGSV  Q ++MMLVTVWVFIGIEGASI+S RA KRSDVGKATV GF+ VL+LL+
Sbjct: 228 G-SHAGLGSVFAQTKSMMLVTVWVFIGIEGASIYSKRARKRSDVGKATVGGFLFVLVLLI 286

Query: 248 LVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLCAE 307
            VN+LSMG+M + +LA L + SM  VL  VVG WG+VL+S G++ISLLGALL+W+LLC E
Sbjct: 287 GVNLLSMGIMHRAKLAGLPDASMGDVLSSVVGPWGSVLVSAGVIISLLGALLAWILLCGE 346

Query: 308 IMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKMLL 367
            M    +D TMP+   R N ++ PA ALW+TNI  Q+ LV+     G       Y  M  
Sbjct: 347 TMQVPGEDGTMPKLFGRINKHEAPAPALWITNIVSQICLVMTVLWDG------AYLAMAT 400

Query: 368 LATSMILIPYFWSAAYGLLLTLKGETYENDAR-ERSKDLVIAGIAVAYAVWLLYAGGLKY 426
           LA ++IL+PY  SAA+ L + +KGETYEN  R +R +D V+A +A  Y +WL+ A G   
Sbjct: 401 LAAALILVPYLLSAAFALKMVIKGETYENGPRSQRVRDAVVATVATLYGIWLVVAAGADA 460

Query: 427 LLLSALLYAPGAILFAKAKHEV-GQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           L+L+ALLY PGA +F  AK E   + IF   E  +   + + ++V+   +  G L+L
Sbjct: 461 LMLAALLYLPGAAVFVWAKREQRAKRIFKPYEIGVLVLLALISVVSIISIVTGRLSL 517


>TR:D7A1Q0_STAND D7A1Q0 Arginine/ornithine antiporter OS=Starkeya novella (strain
           ATCC 8093 / DSM 506 / CCM 1077 / IAM 12100 / NBRC 12443
           / NCIB 9113) GN=Snov_4206 PE=4 SV=1
          Length = 498

 Score =  501 bits (1289), Expect = e-172
 Identities = 251/474 (52%), Positives = 342/474 (72%), Gaps = 13/474 (2%)

Query: 8   KLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLANR 67
           KL L  L ALVVGSMIGGG+F+LP +M+  A   A++IGW +T VGMLTLAFV+Q L+ R
Sbjct: 23  KLTLLPLVALVVGSMIGGGVFNLPSDMSRGASPLAIIIGWLVTGVGMLTLAFVYQGLSLR 82

Query: 68  KPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDTV 127
           KP LD G YAYAKAGFGD++GF+SAWGYWISA+LGNV Y V +FS L YF P+FG G+ V
Sbjct: 83  KPNLDNGPYAYAKAGFGDFIGFNSAWGYWISAFLGNVAYAVAIFSALSYFAPVFGDGNNV 142

Query: 128 AAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTADI- 186
            +IV AS+ LW +H L+L+G+KEAAF+N +TTVAK+VP+ +FIL+ + AF  D+F +   
Sbjct: 143 ISIVGASLALWGIHGLILKGVKEAAFVNAITTVAKLVPILVFILVAIVAFNFDLFLSAFR 202

Query: 187 -----WGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFIT 241
                 G+    LGS+++QV++ MLVT+WVFIGIEGAS++S+RA KRSDVG+ATVIGF+ 
Sbjct: 203 NMGAGLGEGGAGLGSLLDQVKSTMLVTLWVFIGIEGASVYSARAAKRSDVGRATVIGFVG 262

Query: 242 VLLLLVLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSW 301
            L + VLV++L++G+M QPELA  + PSMA VLE+VVG WGA LI++GL+IS+ GA LSW
Sbjct: 263 ALAVYVLVSLLAVGIMNQPELAGQKVPSMAGVLEYVVGPWGAGLINLGLIISVGGAFLSW 322

Query: 302 VLLCAEIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDP 361
            LL AEI +   KD T P +   EN+   P N+LW+TN+CVQ FLV+ +F+       D 
Sbjct: 323 TLLSAEIPYTCGKDGTFPRWFSVENSRGTPVNSLWVTNLCVQAFLVLTYFSK------DA 376

Query: 362 YTKMLLLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYA 421
           Y     +A+  IL PY +S  Y L L L GE+Y+ + ++R +DL++  +A  Y +WL+YA
Sbjct: 377 YNFFYFIASVAILPPYVFSGGYALKLALTGESYKGEDKQRRRDLIVGLVATLYGLWLVYA 436

Query: 422 GGLKYLLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGL 475
            GL+YLL++ LL+ PG +++A A  + G   +TG + LI AAV++G  V A+ L
Sbjct: 437 AGLQYLLMATLLFLPGLVIYAIACRQRGVRAYTGSD-LIIAAVMVGLAVLAFYL 489


>TR:C4TU11_YERKR C4TU11 Arginine/ornithine antiporter OS=Yersinia kristensenii ATCC
           33638 GN=ykris0001_1780 PE=4 SV=1
          Length = 500

 Score =  501 bits (1289), Expect = e-172
 Identities = 260/506 (51%), Positives = 345/506 (68%), Gaps = 30/506 (5%)

Query: 1   MSQESSQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFV 60
           M+  +++KL L ALT+LVVGSMIG GIFSLP     +      LI W I   GMLTLAFV
Sbjct: 1   MAASANKKLSLWALTSLVVGSMIGAGIFSLPATFGRATGGFGALIAWVIAGGGMLTLAFV 60

Query: 61  FQTLANRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPI 120
           FQTLA RKP+LD GVY YAK GFGDY GF+SA G+W  A +G+V YFVL+ STLG FFP+
Sbjct: 61  FQTLAQRKPDLDSGVYIYAKTGFGDYAGFASAIGFWAGACIGSVSYFVLIKSTLGAFFPL 120

Query: 121 FGKGDTVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLD 180
           FG G+T++AI+ AS++LW+ HF+VLRGIKEAA INT+ T AKV+P+F+FI++  FAF  D
Sbjct: 121 FGDGNTLSAILIASLILWSFHFMVLRGIKEAATINTIATFAKVIPIFIFIIVLAFAFHTD 180

Query: 181 IFTADIWGKSN----------PDLG--------------SVMNQVRNMMLVTVWVFIGIE 216
            F  + WG              D G              ++ +QVR+ MLVTV+VF+GIE
Sbjct: 181 TFALNFWGTQPLGAVGDLSHLDDYGYAGHAALEISAGSETLFSQVRSTMLVTVFVFVGIE 240

Query: 217 GASIFSSRAEKRSDVGKATVIGFITVLLLLVLVNVLSMGVMTQPELAKLQNPSMALVLEH 276
           GAS++S  A++R  VG ATV+GFI VL LLVLV +LS GV+ +P+LA L+ PSMA VLEH
Sbjct: 241 GASVYSRYAKERKHVGIATVLGFIGVLCLLVLVTMLSYGVLLRPDLAALRQPSMAGVLEH 300

Query: 277 VVGHWGAVLISVGLLISLLGALLSWVLLCAEIMFAAAKDHTMPEFLRRENANQVPANALW 336
           +VG WGA+ IS+GL+IS+LGA LSW LL AE +++AAK + MP  L  EN + VP+ A+W
Sbjct: 301 IVGRWGAIFISIGLIISVLGAYLSWTLLAAEALYSAAKSNIMPSILATENKHGVPSAAVW 360

Query: 337 LTNICVQVFLVVVFFTSGDPDGMDPYTKMLLLATSMILIPYFWSAAYGLLLTLKGETYEN 396
           ++NI +Q+FL+V  FT         +   L L +S++LIPY   AAYGL L    ETY  
Sbjct: 361 MSNIFIQLFLIVTLFTE------YAFQLALELTSSLVLIPYLLVAAYGLKLVWTRETYSV 414

Query: 397 DARERSKDLVIAGIAVAYAVWLLYAGGLKYLLLSALLYAPGAILFAKAKHEVGQPIFTGI 456
            +R+  KD ++A IA  YA+ ++YAGG+KY+LLSA++Y PG +LF  AK E  + +F+ +
Sbjct: 415 GSRDHKKDFIVALIATVYAILMVYAGGVKYILLSAVIYGPGTLLFIIAKREQKKSVFSSL 474

Query: 457 EKLIFAAVVIGALVAAYGLYDGFLTL 482
           EK  FA  +I A+ A Y L  G +T+
Sbjct: 475 EKCFFAVALIAAVAALYSLATGIITV 500


>TR:C4SQN0_YERFR C4SQN0 Arginine/ornithine antiporter OS=Yersinia frederiksenii ATCC
           33641 GN=yfred0001_41860 PE=4 SV=1
          Length = 506

 Score =  501 bits (1289), Expect = e-172
 Identities = 260/506 (51%), Positives = 346/506 (68%), Gaps = 30/506 (5%)

Query: 1   MSQESSQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFV 60
           M+  S++KL L +LT+LVVGSM+G GIFSLP     +      LI W I   GMLTLAFV
Sbjct: 7   MAASSNKKLSLWSLTSLVVGSMVGAGIFSLPATFGRATGGFGALIAWIIAGGGMLTLAFV 66

Query: 61  FQTLANRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPI 120
           FQTLA RKP+LD GVY YAK GFGDY GF+SA G+W  A +G+V YFVL+ STLG FFP+
Sbjct: 67  FQTLAQRKPDLDSGVYIYAKTGFGDYAGFASAIGFWAGACIGSVSYFVLIKSTLGAFFPL 126

Query: 121 FGKGDTVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLD 180
           FG G+T++A+  AS++LW+ HF+VLRGIKEAA INT+ T AKV+P+F+FI++  FAF  D
Sbjct: 127 FGDGNTLSAVFIASLILWSFHFMVLRGIKEAAAINTIATFAKVIPIFIFIIVLAFAFHTD 186

Query: 181 IFTADIWGKSN----------PDLG--------------SVMNQVRNMMLVTVWVFIGIE 216
            F  + WG  +           D G              S+ +QVR+ MLVTV+VF+GIE
Sbjct: 187 TFALNFWGTQSLSAVGDLSHLDDYGYTGHAALEIAAGSDSLFSQVRSTMLVTVFVFVGIE 246

Query: 217 GASIFSSRAEKRSDVGKATVIGFITVLLLLVLVNVLSMGVMTQPELAKLQNPSMALVLEH 276
           GAS++S  A++R  VG ATV+GFI VL LLVLV +LS GV+ +P+LA L+ PSMA VLEH
Sbjct: 247 GASVYSRYAKERKHVGIATVLGFIGVLCLLVLVTMLSYGVLLRPDLAALRQPSMAGVLEH 306

Query: 277 VVGHWGAVLISVGLLISLLGALLSWVLLCAEIMFAAAKDHTMPEFLRRENANQVPANALW 336
           +VG WGA+ IS+GL+IS++GA LSW LL AE +++AA+ H MP+    EN + VP+ A+W
Sbjct: 307 IVGRWGAIFISIGLIISVMGAYLSWTLLAAEALYSAARSHIMPQIFTTENKHGVPSAAVW 366

Query: 337 LTNICVQVFLVVVFFTSGDPDGMDPYTKMLLLATSMILIPYFWSAAYGLLLTLKGETYEN 396
           ++NI +Q+FL+V  FT         +   L L +S++LIPY   AAYGL L    ETY  
Sbjct: 367 MSNIFIQLFLIVTLFTD------YAFQLALELTSSLVLIPYLLVAAYGLKLAWTRETYPV 420

Query: 397 DARERSKDLVIAGIAVAYAVWLLYAGGLKYLLLSALLYAPGAILFAKAKHEVGQPIFTGI 456
            + +  KDL+ A +A  YA+ ++YAGGLKY+LLSA++Y PG +LF  AK E  + IF+ I
Sbjct: 421 GSIDHKKDLIFALMATLYAILMVYAGGLKYILLSAVVYGPGTLLFIIAKREQKKTIFSSI 480

Query: 457 EKLIFAAVVIGALVAAYGLYDGFLTL 482
           EK +FA  +I A+VA Y L  G +T+
Sbjct: 481 EKCLFAVALIAAVVALYSLATGIITV 506


>TR:F4DCC0_AERVB F4DCC0 Arginine/ornithine antiporter OS=Aeromonas veronii (strain
           B565) GN=B565_2178 PE=4 SV=1
          Length = 478

 Score =  499 bits (1286), Expect = e-172
 Identities = 243/481 (50%), Positives = 346/481 (71%), Gaps = 11/481 (2%)

Query: 7   QKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLAN 66
           +KL LGAL +LV+GSM+G G+FSLPQN+AA A  GAV +GWAIT +GM+ LA V+Q L+ 
Sbjct: 3   KKLGLGALISLVIGSMVGAGVFSLPQNIAAHASAGAVALGWAITGLGMICLALVYQNLSM 62

Query: 67  RKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFP-----IF 121
           R+P+LDGG+++YAKAGFGD++GF++AWGYW+   L NV Y +++FS L YFF      IF
Sbjct: 63  RRPDLDGGIFSYAKAGFGDFIGFNAAWGYWLCQLLANVSYAIVVFSALSYFFDTPDNVIF 122

Query: 122 GKGDTVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDI 181
           G G+T  AI  AS+L+W++H LVLRG++ AA +N VTT+AK+VPL +F +  L AF +D 
Sbjct: 123 GDGNTPVAITLASILIWSVHALVLRGVQVAALVNIVTTIAKMVPLIVFCVAILLAFNMDT 182

Query: 182 FTADIWGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFIT 241
           FT DIWG++N +LGSVM+QV++ M VT+WVFIGIEGA + S+RA  R DVG+ATV+  + 
Sbjct: 183 FTLDIWGQNNMELGSVMDQVKSTMKVTLWVFIGIEGAVVVSARARHRKDVGRATVLALLG 242

Query: 242 VLLLLVLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSW 301
            L L V+V + S+GVM+QP+LA L+NPS A++LE VVG WGA LI++GL++S++GALLSW
Sbjct: 243 ALTLYVMVTLFSLGVMSQPQLAALKNPSTAMILEAVVGPWGAWLINIGLVVSVMGALLSW 302

Query: 302 VLLCAEIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDP 361
            +L AE+ + A K    P +  +EN N  P  +LW +   VQ+FL++++F S        
Sbjct: 303 TVLAAEVPYIAGKTGVFPGWFAKENKNGSPQVSLWCSTCLVQIFLIIIYFQS------ST 356

Query: 362 YTKMLLLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYA 421
           Y  ++ +ATS  L+PY +S AYGL L LKGETY++   +R +DL++A +A  Y  WL+YA
Sbjct: 357 YLALVNIATSAALVPYVFSGAYGLKLALKGETYQDQPHQRKRDLLLALVATVYGCWLVYA 416

Query: 422 GGLKYLLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLT 481
            G++YLLL ALLY+PG  ++ KA+   G      +E+ + AA++  A++A Y + DG + 
Sbjct: 417 AGVEYLLLVALLYSPGIFIYWKARQHHGLRGLNRLEQGMTAALLGCAVLAFYKVMDGTIP 476

Query: 482 L 482
           L
Sbjct: 477 L 477


>TR:F6EAH3_SINMK F6EAH3 Arginine/ornithine antiporter (Precursor) OS=Sinorhizobium
           meliloti (strain AK83) GN=Sinme_6102 PE=4 SV=1
          Length = 475

 Score =  499 bits (1285), Expect = e-172
 Identities = 247/478 (51%), Positives = 337/478 (70%), Gaps = 6/478 (1%)

Query: 5   SSQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTL 64
           ++QKL L +L ALVVGSM+G GIFSLP+    +      ++ W I   G+ TLA VF+ L
Sbjct: 4   TAQKLSLASLAALVVGSMVGAGIFSLPRTFGDATGPFGAIVAWCIAGAGIFTLAHVFRVL 63

Query: 65  ANRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKG 124
           A RK +LD GVYAYA AGFGDY GF S  GYW+   + +V Y+VL+ +TLG FFPIFG G
Sbjct: 64  AERKSDLDAGVYAYANAGFGDYAGFLSVLGYWLVGCIADVSYWVLIKATLGAFFPIFGDG 123

Query: 125 DTVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTA 184
           +T+AA++ +SV LW  HF++LRGIKEAA INTV TVAK+VP+ +FI+I L AF+ D+F +
Sbjct: 124 NTIAAVLVSSVALWGFHFMILRGIKEAAAINTVVTVAKIVPILIFIVILLGAFETDLFRS 183

Query: 185 DIWGKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLL 244
           + WG ++    S+  Q+R  MLVTV+VFIG+EGAS++S  A KRSDVG AT +GF+ VL 
Sbjct: 184 NFWGGADMPEASLFEQIRATMLVTVFVFIGVEGASVYSRYARKRSDVGVATTLGFVVVLG 243

Query: 245 LLVLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLL 304
           L+VLV +L  G + +PE+A ++ PSMA VLE +VG WG+V +S GL++S+LGA L+W L+
Sbjct: 244 LMVLVTLLPYGALERPEIAAMRQPSMASVLESIVGPWGSVFVSAGLIVSVLGAYLAWSLI 303

Query: 305 CAEIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTK 364
           C E++F AAK+  MP  L REN+N VPA ALWL+N  +Q+FL+   F+       D +  
Sbjct: 304 CVEVLFCAAKNGDMPSVLARENSNSVPAAALWLSNGVIQLFLISTLFSE------DAFRL 357

Query: 365 MLLLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYAGGL 424
           M+ L ++M+LIPY   AAYG L+  +GETY    +ER +DL++AG A  Y  +++YAGGL
Sbjct: 358 MVNLTSAMVLIPYLLVAAYGFLVAKRGETYNIRPKERFRDLILAGAATVYTAFMIYAGGL 417

Query: 425 KYLLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           K+LLLSA+LYA G  LF  A+ E  +P+F+  E L+F AVV G LV  YGL  G +++
Sbjct: 418 KFLLLSAILYALGTALFFYARREQKKPLFSPREWLVFIAVVAGCLVGIYGLVTGSISI 475


>TR:E4DBX4_PROAA E4DBX4 Arginine/ornithine antiporter OS=Propionibacterium acnes
           HL046PA2 GN=HMPREF9593_00771 PE=4 SV=1
          Length = 518

 Score =  501 bits (1289), Expect = e-172
 Identities = 260/477 (54%), Positives = 338/477 (70%), Gaps = 9/477 (1%)

Query: 8   KLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLANR 67
           KL   A+ +LVVGSMIGGGIFSLPQN+AA+A  G ++IGW IT +GM+ LA V+Q LA R
Sbjct: 48  KLSFPAMLSLVVGSMIGGGIFSLPQNIAAAASPGPMVIGWTITGIGMICLAMVYQKLAIR 107

Query: 68  KPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDTV 127
           +P+LD G+YAYAK GFGD++GF+SAWGYW+SA +GNVGY VLLFST+G F P F  G+TV
Sbjct: 108 RPDLDNGIYAYAKVGFGDFIGFNSAWGYWLSALIGNVGYLVLLFSTVGKFVPAFAGGNTV 167

Query: 128 AAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTADIW 187
            A++ ASVLLW  H LVL G++ AAF+NT+ T+AK+VPL  FI IC  AF + +FT D W
Sbjct: 168 WAVLAASVLLWLTHALVLAGVRTAAFVNTIATIAKIVPLITFIAICAVAFDVGVFTEDFW 227

Query: 188 GKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLLLV 247
           G S+  LGSV  Q ++MMLVTVWVFIGIEGASI+S RA KRSDVGKATV GF+ VL+LL+
Sbjct: 228 G-SHAGLGSVFAQTKSMMLVTVWVFIGIEGASIYSKRARKRSDVGKATVGGFLFVLVLLI 286

Query: 248 LVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLCAE 307
            VN+LSMG+M + +LA L + SM  VL  VVG WG+VL+S G++ISLLGALL+W+LLC E
Sbjct: 287 GVNLLSMGIMHRAKLAGLPDASMGDVLSSVVGPWGSVLVSAGVIISLLGALLAWILLCGE 346

Query: 308 IMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKMLL 367
            M    +D TMP+   R N ++ PA ALW+TNI  Q+ LV+     G       Y  M  
Sbjct: 347 TMQVPGEDGTMPKLFGRINKHEAPAPALWITNIVSQICLVMTVLWDG------AYLAMAT 400

Query: 368 LATSMILIPYFWSAAYGLLLTLKGETYENDAR-ERSKDLVIAGIAVAYAVWLLYAGGLKY 426
           LA ++IL+PY  SAA+ L + +KGETYEN  R +R +D V+A +A  Y +WL+ A G   
Sbjct: 401 LAAALILVPYLLSAAFALKMVIKGETYENGPRSQRVRDAVVATVATLYGIWLVVAAGADA 460

Query: 427 LLLSALLYAPGAILFAKAKHEV-GQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           L+L+ALLY PGA +F  AK E   + IF   E  +   + + ++V+   +  G L+L
Sbjct: 461 LMLAALLYLPGAAVFVWAKREQRAKRIFKPYEIGVLVLLALISVVSIISIVTGRLSL 517


>TR:E4D9G1_PROAA E4D9G1 Arginine/ornithine antiporter OS=Propionibacterium acnes
           HL036PA2 GN=HMPREF9605_02442 PE=4 SV=1
          Length = 518

 Score =  501 bits (1289), Expect = e-172
 Identities = 260/477 (54%), Positives = 338/477 (70%), Gaps = 9/477 (1%)

Query: 8   KLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLANR 67
           KL   A+ +LVVGSMIGGGIFSLPQN+AA+A  G ++IGW IT +GM+ LA V+Q LA R
Sbjct: 48  KLSFPAMLSLVVGSMIGGGIFSLPQNIAAAASPGPMVIGWTITGIGMICLAMVYQKLAIR 107

Query: 68  KPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDTV 127
           +P+LD G+YAYAK GFGD++GF+SAWGYW+SA +GNVGY VLLFST+G F P F  G+TV
Sbjct: 108 RPDLDNGIYAYAKVGFGDFIGFNSAWGYWLSALIGNVGYLVLLFSTVGKFVPAFAGGNTV 167

Query: 128 AAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTADIW 187
            A++ ASVLLW  H LVL G++ AAF+NT+ T+AK+VPL  FI IC  AF + +FT D W
Sbjct: 168 WAVLAASVLLWLTHALVLAGVRTAAFVNTIATIAKIVPLITFIAICAVAFDVGVFTEDFW 227

Query: 188 GKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLLLV 247
           G S+  LGSV  Q ++MMLVTVWVFIGIEGASI+S RA KRSDVGKATV GF+ VL+LL+
Sbjct: 228 G-SHAGLGSVFAQTKSMMLVTVWVFIGIEGASIYSKRARKRSDVGKATVGGFLFVLVLLI 286

Query: 248 LVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLCAE 307
            VN+LSMG+M + +LA L + SM  VL  VVG WG+VL+S G++ISLLGALL+W+LLC E
Sbjct: 287 GVNLLSMGIMHRAKLAGLPDASMGDVLSSVVGPWGSVLVSAGVIISLLGALLAWILLCGE 346

Query: 308 IMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKMLL 367
            M    +D TMP+   R N ++ PA ALW+TNI  Q+ LV+     G       Y  M  
Sbjct: 347 TMQVPGEDGTMPKLFGRINKHEAPAPALWITNIVSQICLVMTVLWDG------AYLAMAT 400

Query: 368 LATSMILIPYFWSAAYGLLLTLKGETYENDAR-ERSKDLVIAGIAVAYAVWLLYAGGLKY 426
           LA ++IL+PY  SAA+ L + +KGETYEN  R +R +D V+A +A  Y +WL+ A G   
Sbjct: 401 LAAALILVPYLLSAAFALKMVIKGETYENGPRSQRVRDAVVATVATLYGIWLVVAAGADA 460

Query: 427 LLLSALLYAPGAILFAKAKHEV-GQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           L+L+ALLY PGA +F  AK E   + IF   E  +   + + ++V+   +  G L+L
Sbjct: 461 LMLAALLYLPGAAVFVWAKREQRAKRIFKPYEIGVLVLLALISVVSIISIVTGRLSL 517


>TR:E4CCI9_PROAA E4CCI9 Arginine/ornithine antiporter OS=Propionibacterium acnes
           HL036PA1 GN=HMPREF9604_01467 PE=4 SV=1
          Length = 518

 Score =  501 bits (1289), Expect = e-172
 Identities = 260/477 (54%), Positives = 338/477 (70%), Gaps = 9/477 (1%)

Query: 8   KLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLANR 67
           KL   A+ +LVVGSMIGGGIFSLPQN+AA+A  G ++IGW IT +GM+ LA V+Q LA R
Sbjct: 48  KLSFPAMLSLVVGSMIGGGIFSLPQNIAAAASPGPMVIGWTITGIGMICLAMVYQKLAIR 107

Query: 68  KPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDTV 127
           +P+LD G+YAYAK GFGD++GF+SAWGYW+SA +GNVGY VLLFST+G F P F  G+TV
Sbjct: 108 RPDLDNGIYAYAKVGFGDFIGFNSAWGYWLSALIGNVGYLVLLFSTVGKFVPAFAGGNTV 167

Query: 128 AAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTADIW 187
            A++ ASVLLW  H LVL G++ AAF+NT+ T+AK+VPL  FI IC  AF + +FT D W
Sbjct: 168 WAVLAASVLLWLTHALVLAGVRTAAFVNTIATIAKIVPLITFIAICAVAFDVGVFTEDFW 227

Query: 188 GKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLLLV 247
           G S+  LGSV  Q ++MMLVTVWVFIGIEGASI+S RA KRSDVGKATV GF+ VL+LL+
Sbjct: 228 G-SHAGLGSVFAQTKSMMLVTVWVFIGIEGASIYSKRARKRSDVGKATVGGFLFVLVLLI 286

Query: 248 LVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLCAE 307
            VN+LSMG+M + +LA L + SM  VL  VVG WG+VL+S G++ISLLGALL+W+LLC E
Sbjct: 287 GVNLLSMGIMHRAKLAGLPDASMGDVLSSVVGPWGSVLVSAGVIISLLGALLAWILLCGE 346

Query: 308 IMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKMLL 367
            M    +D TMP+   R N ++ PA ALW+TNI  Q+ LV+     G       Y  M  
Sbjct: 347 TMQVPGEDGTMPKLFGRINKHEAPAPALWITNIVSQICLVMTVLWDG------AYLAMAT 400

Query: 368 LATSMILIPYFWSAAYGLLLTLKGETYENDAR-ERSKDLVIAGIAVAYAVWLLYAGGLKY 426
           LA ++IL+PY  SAA+ L + +KGETYEN  R +R +D V+A +A  Y +WL+ A G   
Sbjct: 401 LAAALILVPYLLSAAFALKMVIKGETYENGPRSQRVRDAVVATVATLYGIWLVVAAGADA 460

Query: 427 LLLSALLYAPGAILFAKAKHEV-GQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           L+L+ALLY PGA +F  AK E   + IF   E  +   + + ++V+   +  G L+L
Sbjct: 461 LMLAALLYLPGAAVFVWAKREQRAKRIFKPYEIGVLVLLALISVVSIISIVTGRLSL 517


>TR:E4B2R1_PROAA E4B2R1 Arginine/ornithine antiporter OS=Propionibacterium acnes
           HL036PA3 GN=HMPREF9606_01442 PE=4 SV=1
          Length = 518

 Score =  501 bits (1289), Expect = e-172
 Identities = 260/477 (54%), Positives = 338/477 (70%), Gaps = 9/477 (1%)

Query: 8   KLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLANR 67
           KL   A+ +LVVGSMIGGGIFSLPQN+AA+A  G ++IGW IT +GM+ LA V+Q LA R
Sbjct: 48  KLSFPAMLSLVVGSMIGGGIFSLPQNIAAAASPGPMVIGWTITGIGMICLAMVYQKLAIR 107

Query: 68  KPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDTV 127
           +P+LD G+YAYAK GFGD++GF+SAWGYW+SA +GNVGY VLLFST+G F P F  G+TV
Sbjct: 108 RPDLDNGIYAYAKVGFGDFIGFNSAWGYWLSALIGNVGYLVLLFSTVGKFVPAFAGGNTV 167

Query: 128 AAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTADIW 187
            A++ ASVLLW  H LVL G++ AAF+NT+ T+AK+VPL  FI IC  AF + +FT D W
Sbjct: 168 WAVLAASVLLWLTHALVLAGVRTAAFVNTIATIAKIVPLITFIAICAVAFDVGVFTEDFW 227

Query: 188 GKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLLLV 247
           G S+  LGSV  Q ++MMLVTVWVFIGIEGASI+S RA KRSDVGKATV GF+ VL+LL+
Sbjct: 228 G-SHAGLGSVFAQTKSMMLVTVWVFIGIEGASIYSKRARKRSDVGKATVGGFLFVLVLLI 286

Query: 248 LVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLCAE 307
            VN+LSMG+M + +LA L + SM  VL  VVG WG+VL+S G++ISLLGALL+W+LLC E
Sbjct: 287 GVNLLSMGIMHRAKLAGLPDASMGDVLSSVVGPWGSVLVSAGVIISLLGALLAWILLCGE 346

Query: 308 IMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKMLL 367
            M    +D TMP+   R N ++ PA ALW+TNI  Q+ LV+     G       Y  M  
Sbjct: 347 TMQVPGEDGTMPKLFGRINKHEAPAPALWITNIVSQICLVMTVLWDG------AYLAMAT 400

Query: 368 LATSMILIPYFWSAAYGLLLTLKGETYENDAR-ERSKDLVIAGIAVAYAVWLLYAGGLKY 426
           LA ++IL+PY  SAA+ L + +KGETYEN  R +R +D V+A +A  Y +WL+ A G   
Sbjct: 401 LAAALILVPYLLSAAFALKMVIKGETYENGPRSQRVRDAVVATVATLYGIWLVVAAGADA 460

Query: 427 LLLSALLYAPGAILFAKAKHEV-GQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           L+L+ALLY PGA +F  AK E   + IF   E  +   + + ++V+   +  G L+L
Sbjct: 461 LMLAALLYLPGAAVFVWAKREQRAKRIFKPYEIGVLVLLALISVVSIISIVTGRLSL 517


>TR:C4SGS2_YERMO C4SGS2 Arginine/ornithine antiporter OS=Yersinia mollaretii ATCC
           43969 GN=ymoll0001_6090 PE=4 SV=1
          Length = 502

 Score =  500 bits (1287), Expect = e-172
 Identities = 258/510 (50%), Positives = 342/510 (67%), Gaps = 36/510 (7%)

Query: 1   MSQESSQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFV 60
           M+  S+ KL L ALT+LVVGSMIG GIFSLP     +      LI W I   GML LAFV
Sbjct: 1   MANSSANKLSLPALTSLVVGSMIGAGIFSLPATFGRATGGFGALIAWCIAGGGMLMLAFV 60

Query: 61  FQTLANRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPI 120
           FQTLA RKP LD GV+ YAK GFGDY+GF+SA G+W    +GNV YFVL+ STLG FFPI
Sbjct: 61  FQTLAQRKPNLDSGVFIYAKEGFGDYLGFASALGFWAGTCIGNVSYFVLIKSTLGAFFPI 120

Query: 121 FGKGDTVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLD 180
           FG G+T+ A++ ASV+LW  H L+LRG+KEAA INT+ T AK++P+F+F+++ +FAFK D
Sbjct: 121 FGDGNTIPAVLVASVILWGFHILILRGVKEAAAINTIATFAKIIPIFIFVIVLIFAFKGD 180

Query: 181 IFTADIWGKSNPDL----------------------------GSVMNQVRNMMLVTVWVF 212
           +F  + WG   PD+                             S+ +QVR+ MLVTV+VF
Sbjct: 181 VFALNFWG--TPDVVKSVDLSHLNDYGYVGHAAAVMPVVAEPESLFSQVRSTMLVTVFVF 238

Query: 213 IGIEGASIFSSRAEKRSDVGKATVIGFITVLLLLVLVNVLSMGVMTQPELAKLQNPSMAL 272
           +GIEGAS++S  A++RS VG ATV+GFI VL LLVL+ +LS GV+ +P+LA L+ PSMA 
Sbjct: 239 LGIEGASVYSRYAKERSHVGIATVLGFIGVLCLLVLITMLSYGVLLRPDLAALRQPSMAG 298

Query: 273 VLEHVVGHWGAVLISVGLLISLLGALLSWVLLCAEIMFAAAKDHTMPEFLRRENANQVPA 332
           VLE +VG WGA+ IS+GL+IS+LGA LSW LL AE++F+AAK  +MP+    EN+N VP+
Sbjct: 299 VLEAIVGRWGAIFISIGLIISVLGAYLSWSLLAAEVLFSAAKSKSMPKVFGTENSNAVPS 358

Query: 333 NALWLTNICVQVFLVVVFFTSGDPDGMDPYTKMLLLATSMILIPYFWSAAYGLLLTLKGE 392
            A+WLTNI +QVFL++  FT         +   L L +S+ LIPY    AYGL L   GE
Sbjct: 359 AAVWLTNIFIQVFLILTLFTD------YAFQLALELTSSLTLIPYLLVGAYGLKLAWTGE 412

Query: 393 TYENDARERSKDLVIAGIAVAYAVWLLYAGGLKYLLLSALLYAPGAILFAKAKHEVGQPI 452
           TYE + +   KDL+ A IA  Y+  ++YAGG+KYLLLSA++Y PG IL+  AK E  Q  
Sbjct: 413 TYETNKQGHRKDLIFALIATFYSALMIYAGGMKYLLLSAIIYGPGTILYLIAKREQHQKA 472

Query: 453 FTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           F   E+++F  +++ A+ A Y +  G +T+
Sbjct: 473 FNSYERILFIVLIVAAVAAIYSIATGIITI 502


>TR:Q89DX6_BRAJA Q89DX6 Bll7311 protein OS=Bradyrhizobium japonicum (strain USDA
           110) GN=bll7311 PE=4 SV=1
          Length = 477

 Score =  499 bits (1284), Expect = e-172
 Identities = 250/479 (52%), Positives = 339/479 (70%), Gaps = 8/479 (1%)

Query: 5   SSQKLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTL 64
           S QKL L ALTA+VVGSM+G GIFSLP+    +      +  W I   GM TLA VFQ L
Sbjct: 6   SIQKLSLFALTAMVVGSMVGSGIFSLPRTFGIATGPFGAIFAWCIAGGGMYTLARVFQAL 65

Query: 65  ANRKPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKG 124
           A RKPELD GVYAYAK GFGDY GF SA+GYWI + +GNV Y+VL+ STLG FFP+FG G
Sbjct: 66  AERKPELDAGVYAYAKEGFGDYPGFLSAFGYWIGSCIGNVSYWVLIKSTLGAFFPVFGDG 125

Query: 125 DTVAAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTA 184
           +TV AI+ AS+ +W  HF++LRG+++AA INT+ TVAK+VP+ +FI+I +F+F  D+F  
Sbjct: 126 NTVTAIIVASIGIWLFHFMILRGVQQAAAINTIVTVAKIVPILVFIVILIFSFNADMFRG 185

Query: 185 DIW-GKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVL 243
           + W G+  PD G +  Q+R  MLVTV+VF+GIEGAS++S  A++R+ VG AT++GF  V 
Sbjct: 186 NFWGGEGMPDKG-LFEQIRATMLVTVFVFLGIEGASVYSRYAKERAHVGAATLLGFAIVT 244

Query: 244 LLLVLVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVL 303
            L+VLV +L   V+ + E+A ++ PSMA VLE VVGHWGA+ +S+GLL+S+LGA L+W L
Sbjct: 245 SLMVLVTMLPYAVLLRAEIAGMRQPSMATVLEAVVGHWGAIFVSIGLLVSVLGAYLAWSL 304

Query: 304 LCAEIMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYT 363
           +CAE++ AA +   MP     ENAN+VPA ALWLTN+ VQ+F++  +++       D + 
Sbjct: 305 ICAEVLSAAGRTRDMPALFGTENANKVPAAALWLTNVIVQLFVISTYWS------QDAFA 358

Query: 364 KMLLLATSMILIPYFWSAAYGLLLTLKGETYENDARERSKDLVIAGIAVAYAVWLLYAGG 423
            ML L + M LIP+F  AAYGLLL  +GETYE    ER++D + AGIAV Y ++L+Y+ G
Sbjct: 359 LMLNLTSVMSLIPFFLVAAYGLLLVRRGETYEKSGSERTRDTIFAGIAVIYTLFLIYSAG 418

Query: 424 LKYLLLSALLYAPGAILFAKAKHEVGQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           +K+LLLS +LYAPG  L+  A+ E    +FT +E  IF A  +GA V  +GL  G++T+
Sbjct: 419 MKFLLLSLILYAPGTALYFWARLEQKARVFTAVEWGIFIAAAVGAAVGIHGLATGYITI 477


>TR:E6E0J6_PROAA E6E0J6 Arginine/ornithine antiporter OS=Propionibacterium acnes
           HL072PA1 GN=HMPREF9572_00481 PE=4 SV=1
          Length = 518

 Score =  500 bits (1288), Expect = e-172
 Identities = 261/477 (54%), Positives = 338/477 (70%), Gaps = 9/477 (1%)

Query: 8   KLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLANR 67
           KL   A+ +LVVGSMIGGGIFSLPQN+AA+A  G ++IGW IT +GM+ LA V+Q LA R
Sbjct: 48  KLSFPAMLSLVVGSMIGGGIFSLPQNIAAAASPGPMVIGWTITGIGMICLAMVYQKLAIR 107

Query: 68  KPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDTV 127
           +P+LD G+YAYAKAGFGD++GF+SAWGYW+SA +GNVGY VLLFST+G F P F  G+TV
Sbjct: 108 RPDLDNGIYAYAKAGFGDFIGFNSAWGYWLSALIGNVGYLVLLFSTVGKFVPAFAGGNTV 167

Query: 128 AAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTADIW 187
            A++ ASVLLW  H LVL G+  AAF+NT+ T+AK+VPL  FI IC  AF + +FT D W
Sbjct: 168 WAVLAASVLLWLTHALVLAGVCTAAFVNTIATIAKIVPLITFIAICAVAFDVGVFTEDFW 227

Query: 188 GKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLLLV 247
           G S+  LGSV  Q ++MMLVTVWVFIGIEGASI+S RA KRSDVGKATV GF+ VL+LL+
Sbjct: 228 G-SHAGLGSVFAQTKSMMLVTVWVFIGIEGASIYSKRARKRSDVGKATVGGFLFVLVLLI 286

Query: 248 LVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLCAE 307
            VN+LSMG+M + +LA L + SM  VL  VVG WG+VL+S G++ISLLGALL+W+LLC E
Sbjct: 287 GVNLLSMGIMHRAKLAGLPDASMGDVLSSVVGPWGSVLVSAGVIISLLGALLAWILLCGE 346

Query: 308 IMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKMLL 367
            M    +D TMP+   R N ++ PA ALW+TNI  Q+ LV+     G       Y  M  
Sbjct: 347 TMQVPGEDGTMPKLFGRINKHEAPAPALWITNIVSQICLVMTVLWDG------AYLAMAT 400

Query: 368 LATSMILIPYFWSAAYGLLLTLKGETYENDAR-ERSKDLVIAGIAVAYAVWLLYAGGLKY 426
           LA ++IL+PY  SAA+ L + +KGETYEN  R +R +D V+A +A  Y +WL+ A G   
Sbjct: 401 LAAALILVPYLLSAAFALKMVIKGETYENGPRSQRVRDAVVATVATLYGIWLVVAAGADA 460

Query: 427 LLLSALLYAPGAILFAKAKHEV-GQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           L+L+ALLY PGA +F  AK E   + IF   E  +   + + ++V+   +  G L+L
Sbjct: 461 LMLAALLYLPGAAVFVWAKREQRAKRIFKPYEIGVLVLLALISVVSIISIVTGRLSL 517


>TR:E4A7P7_PROAA E4A7P7 Arginine/ornithine antiporter OS=Propionibacterium acnes
           HL072PA2 GN=HMPREF9573_01530 PE=4 SV=1
          Length = 518

 Score =  500 bits (1288), Expect = e-172
 Identities = 261/477 (54%), Positives = 338/477 (70%), Gaps = 9/477 (1%)

Query: 8   KLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLANR 67
           KL   A+ +LVVGSMIGGGIFSLPQN+AA+A  G ++IGW IT +GM+ LA V+Q LA R
Sbjct: 48  KLSFPAMLSLVVGSMIGGGIFSLPQNIAAAASPGPMVIGWTITGIGMICLAMVYQKLAIR 107

Query: 68  KPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDTV 127
           +P+LD G+YAYAKAGFGD++GF+SAWGYW+SA +GNVGY VLLFST+G F P F  G+TV
Sbjct: 108 RPDLDNGIYAYAKAGFGDFIGFNSAWGYWLSALIGNVGYLVLLFSTVGKFVPAFAGGNTV 167

Query: 128 AAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTADIW 187
            A++ ASVLLW  H LVL G+  AAF+NT+ T+AK+VPL  FI IC  AF + +FT D W
Sbjct: 168 WAVLAASVLLWLTHALVLAGVCTAAFVNTIATIAKIVPLITFIAICAVAFDVGVFTEDFW 227

Query: 188 GKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLLLV 247
           G S+  LGSV  Q ++MMLVTVWVFIGIEGASI+S RA KRSDVGKATV GF+ VL+LL+
Sbjct: 228 G-SHAGLGSVFAQTKSMMLVTVWVFIGIEGASIYSKRARKRSDVGKATVGGFLFVLVLLI 286

Query: 248 LVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLCAE 307
            VN+LSMG+M + +LA L + SM  VL  VVG WG+VL+S G++ISLLGALL+W+LLC E
Sbjct: 287 GVNLLSMGIMHRAKLAGLPDASMGDVLSSVVGPWGSVLVSAGVIISLLGALLAWILLCGE 346

Query: 308 IMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKMLL 367
            M    +D TMP+   R N ++ PA ALW+TNI  Q+ LV+     G       Y  M  
Sbjct: 347 TMQVPGEDGTMPKLFGRINKHEAPAPALWITNIVSQICLVMTVLWDG------AYLAMAT 400

Query: 368 LATSMILIPYFWSAAYGLLLTLKGETYENDAR-ERSKDLVIAGIAVAYAVWLLYAGGLKY 426
           LA ++IL+PY  SAA+ L + +KGETYEN  R +R +D V+A +A  Y +WL+ A G   
Sbjct: 401 LAAALILVPYLLSAAFALKMVIKGETYENGPRSQRVRDAVVATVATLYGIWLVVAAGADA 460

Query: 427 LLLSALLYAPGAILFAKAKHEV-GQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           L+L+ALLY PGA +F  AK E   + IF   E  +   + + ++V+   +  G L+L
Sbjct: 461 LMLAALLYLPGAAVFVWAKREQRAKRIFKPYEIGVLVLLALISVVSIISIVTGRLSL 517


>TR:D3MB46_PROAA D3MB46 Arginine/ornithine antiporter OS=Propionibacterium acnes
           J165 GN=arcD PE=4 SV=1
          Length = 518

 Score =  500 bits (1288), Expect = e-172
 Identities = 261/477 (54%), Positives = 338/477 (70%), Gaps = 9/477 (1%)

Query: 8   KLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLANR 67
           KL   A+ +LVVGSMIGGGIFSLPQN+AA+A  G ++IGW IT +GM+ LA V+Q LA R
Sbjct: 48  KLSFPAMLSLVVGSMIGGGIFSLPQNIAAAASPGPMVIGWTITGIGMICLAMVYQKLAIR 107

Query: 68  KPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDTV 127
           +P+LD G+YAYAKAGFGD++GF+SAWGYW+SA +GNVGY VLLFST+G F P F  G+TV
Sbjct: 108 RPDLDNGIYAYAKAGFGDFIGFNSAWGYWLSALIGNVGYLVLLFSTVGKFVPAFAGGNTV 167

Query: 128 AAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTADIW 187
            A++ ASVLLW  H LVL G+  AAF+NT+ T+AK+VPL  FI IC  AF + +FT D W
Sbjct: 168 WAVLAASVLLWLTHALVLAGVCTAAFVNTIATIAKIVPLITFIAICAVAFDVGVFTEDFW 227

Query: 188 GKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLLLV 247
           G S+  LGSV  Q ++MMLVTVWVFIGIEGASI+S RA KRSDVGKATV GF+ VL+LL+
Sbjct: 228 G-SHAGLGSVFAQTKSMMLVTVWVFIGIEGASIYSKRARKRSDVGKATVGGFLFVLVLLI 286

Query: 248 LVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLCAE 307
            VN+LSMG+M + +LA L + SM  VL  VVG WG+VL+S G++ISLLGALL+W+LLC E
Sbjct: 287 GVNLLSMGIMHRAKLAGLPDASMGDVLSSVVGPWGSVLVSAGVIISLLGALLAWILLCGE 346

Query: 308 IMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKMLL 367
            M    +D TMP+   R N ++ PA ALW+TNI  Q+ LV+     G       Y  M  
Sbjct: 347 TMQVPGEDGTMPKLFGRINKHEAPAPALWITNIVSQICLVMTVLWDG------AYLAMAT 400

Query: 368 LATSMILIPYFWSAAYGLLLTLKGETYENDAR-ERSKDLVIAGIAVAYAVWLLYAGGLKY 426
           LA ++IL+PY  SAA+ L + +KGETYEN  R +R +D V+A +A  Y +WL+ A G   
Sbjct: 401 LAAALILVPYLLSAAFALKMVIKGETYENGPRSQRVRDAVVATVATLYGIWLVVAAGADA 460

Query: 427 LLLSALLYAPGAILFAKAKHEV-GQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           L+L+ALLY PGA +F  AK E   + IF   E  +   + + ++V+   +  G L+L
Sbjct: 461 LMLAALLYLPGAAVFVWAKREQRAKRIFKPYEIGVLVLLALISVVSIISIVTGRLSL 517


>TR:F3CZM0_PROAA F3CZM0 Arginine/ornithine antiporter OS=Propionibacterium acnes
           HL020PA1 GN=HMPREF9563_02280 PE=4 SV=1
          Length = 518

 Score =  500 bits (1287), Expect = e-171
 Identities = 260/477 (54%), Positives = 338/477 (70%), Gaps = 9/477 (1%)

Query: 8   KLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLANR 67
           KL   A+ +LVVGSMIGGGIFSLPQN+AA+A  G ++IGW IT +GM+ LA V+Q LA R
Sbjct: 48  KLSFPAMLSLVVGSMIGGGIFSLPQNIAAAASPGPMVIGWTITGIGMICLAMVYQKLAIR 107

Query: 68  KPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDTV 127
           +P+LD G+YAYAKAGFGD++GF+SAWGYW+SA +GNVGY VLLFST+G F P F  G+TV
Sbjct: 108 RPDLDNGIYAYAKAGFGDFIGFNSAWGYWLSALIGNVGYLVLLFSTVGKFVPAFAGGNTV 167

Query: 128 AAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTADIW 187
            A++ ASVLLW  H LVL G++ AAF+NT+ T+AK+VPL  FI IC  AF + +FT D W
Sbjct: 168 WAVLAASVLLWLTHALVLAGVRTAAFVNTIATIAKIVPLITFIAICAVAFDVGVFTEDFW 227

Query: 188 GKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLLLV 247
           G S+  LGSV  Q ++MMLVTVWVFIGIEGASI+S RA KRSDVGKATV GF+ VL+LL+
Sbjct: 228 G-SHAGLGSVFAQTKSMMLVTVWVFIGIEGASIYSKRARKRSDVGKATVGGFLFVLVLLI 286

Query: 248 LVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLCAE 307
            VN+LSMG+M + +LA L + SM  VL  VVG WG+VL+S G++ISLLGALL+W+LLC E
Sbjct: 287 GVNLLSMGIMHRAKLAGLPDASMGDVLSSVVGPWGSVLVSAGVIISLLGALLAWILLCGE 346

Query: 308 IMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKMLL 367
            M    +D  MP+   R N ++ PA ALW+TNI  Q+ LV+     G       Y  M  
Sbjct: 347 TMQVPGEDGIMPKLFGRINKHEAPAPALWITNIVSQICLVMTVLWDG------AYLAMAT 400

Query: 368 LATSMILIPYFWSAAYGLLLTLKGETYENDAR-ERSKDLVIAGIAVAYAVWLLYAGGLKY 426
           LA ++IL+PY  SAA+ L + +KGETYEN  R +R +D V+A +A  Y +WL+ A G   
Sbjct: 401 LAAALILVPYLLSAAFALKMVIKGETYENGPRSQRVRDAVVATVATLYGIWLVVAAGADA 460

Query: 427 LLLSALLYAPGAILFAKAKHEV-GQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           L+L+ALLY PGA +F  AK E   + IF   E  +   + + ++V+   +  G L+L
Sbjct: 461 LMLAALLYLPGAAVFVWAKREQRAKRIFKPYEIGVLVLLALISVVSIISIVTGRLSL 517


>TR:E6DKQ0_PROAA E6DKQ0 Arginine/ornithine antiporter OS=Propionibacterium acnes
           HL027PA2 GN=HMPREF9610_01070 PE=4 SV=1
          Length = 518

 Score =  500 bits (1287), Expect = e-171
 Identities = 260/477 (54%), Positives = 338/477 (70%), Gaps = 9/477 (1%)

Query: 8   KLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLANR 67
           KL   A+ +LVVGSMIGGGIFSLPQN+AA+A  G ++IGW IT +GM+ LA V+Q LA R
Sbjct: 48  KLSFPAMLSLVVGSMIGGGIFSLPQNIAAAASPGPMVIGWTITGIGMICLAMVYQKLAIR 107

Query: 68  KPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDTV 127
           +P+LD G+YAYAKAGFGD++GF+SAWGYW+SA +GNVGY VLLFST+G F P F  G+TV
Sbjct: 108 RPDLDNGIYAYAKAGFGDFIGFNSAWGYWLSALIGNVGYLVLLFSTVGKFVPAFAGGNTV 167

Query: 128 AAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTADIW 187
            A++ ASVLLW  H LVL G++ AAF+NT+ T+AK+VPL  FI IC  AF + +FT D W
Sbjct: 168 WAVLAASVLLWLTHALVLAGVRTAAFVNTIATIAKIVPLITFIAICAVAFDVGVFTEDFW 227

Query: 188 GKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLLLV 247
           G S+  LGSV  Q ++MMLVTVWVFIGIEGASI+S RA KRSDVGKATV GF+ VL+LL+
Sbjct: 228 G-SHAGLGSVFAQTKSMMLVTVWVFIGIEGASIYSKRARKRSDVGKATVGGFLFVLVLLI 286

Query: 248 LVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLCAE 307
            VN+LSMG+M + +LA L + SM  VL  VVG WG+VL+S G++ISLLGALL+W+LLC E
Sbjct: 287 GVNLLSMGIMHRAKLAGLPDASMGDVLSSVVGPWGSVLVSAGVIISLLGALLAWILLCGE 346

Query: 308 IMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKMLL 367
            M    +D  MP+   R N ++ PA ALW+TNI  Q+ LV+     G       Y  M  
Sbjct: 347 TMQVPGEDGIMPKLFGRINKHEAPAPALWITNIVSQICLVMTVLWDG------AYLAMAT 400

Query: 368 LATSMILIPYFWSAAYGLLLTLKGETYENDAR-ERSKDLVIAGIAVAYAVWLLYAGGLKY 426
           LA ++IL+PY  SAA+ L + +KGETYEN  R +R +D V+A +A  Y +WL+ A G   
Sbjct: 401 LAAALILVPYLLSAAFALKMVIKGETYENGPRSQRVRDAVVATVATLYGIWLVVAAGADA 460

Query: 427 LLLSALLYAPGAILFAKAKHEV-GQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           L+L+ALLY PGA +F  AK E   + IF   E  +   + + ++V+   +  G L+L
Sbjct: 461 LMLAALLYLPGAAVFVWAKREQRAKRIFKPYEIGVLVLLALISVVSIISIVTGRLSL 517


>TR:E4GJT9_PROAA E4GJT9 Arginine/ornithine antiporter OS=Propionibacterium acnes
           HL005PA2 GN=HMPREF9595_01805 PE=4 SV=1
          Length = 518

 Score =  500 bits (1287), Expect = e-171
 Identities = 260/477 (54%), Positives = 338/477 (70%), Gaps = 9/477 (1%)

Query: 8   KLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLANR 67
           KL   A+ +LVVGSMIGGGIFSLPQN+AA+A  G ++IGW IT +GM+ LA V+Q LA R
Sbjct: 48  KLSFPAMLSLVVGSMIGGGIFSLPQNIAAAASPGPMVIGWTITGIGMICLAMVYQKLAIR 107

Query: 68  KPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDTV 127
           +P+LD G+YAYAKAGFGD++GF+SAWGYW+SA +GNVGY VLLFST+G F P F  G+TV
Sbjct: 108 RPDLDNGIYAYAKAGFGDFIGFNSAWGYWLSALIGNVGYLVLLFSTVGKFVPAFAGGNTV 167

Query: 128 AAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTADIW 187
            A++ ASVLLW  H LVL G++ AAF+NT+ T+AK+VPL  FI IC  AF + +FT D W
Sbjct: 168 WAVLAASVLLWLTHALVLAGVRTAAFVNTIATIAKIVPLITFIAICAVAFDVGVFTEDFW 227

Query: 188 GKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLLLV 247
           G S+  LGSV  Q ++MMLVTVWVFIGIEGASI+S RA KRSDVGKATV GF+ VL+LL+
Sbjct: 228 G-SHAGLGSVFAQTKSMMLVTVWVFIGIEGASIYSKRARKRSDVGKATVGGFLFVLVLLI 286

Query: 248 LVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLCAE 307
            VN+LSMG+M + +LA L + SM  VL  VVG WG+VL+S G++ISLLGALL+W+LLC E
Sbjct: 287 GVNLLSMGIMHRAKLAGLPDASMGDVLSSVVGPWGSVLVSAGVIISLLGALLAWILLCGE 346

Query: 308 IMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKMLL 367
            M    +D  MP+   R N ++ PA ALW+TNI  Q+ LV+     G       Y  M  
Sbjct: 347 TMQVPGEDGIMPKLFGRINKHEAPAPALWITNIVSQICLVMTVLWDG------AYLAMAT 400

Query: 368 LATSMILIPYFWSAAYGLLLTLKGETYENDAR-ERSKDLVIAGIAVAYAVWLLYAGGLKY 426
           LA ++IL+PY  SAA+ L + +KGETYEN  R +R +D V+A +A  Y +WL+ A G   
Sbjct: 401 LAAALILVPYLLSAAFALKMVIKGETYENGPRSQRVRDAVVATVATLYGIWLVVAAGADA 460

Query: 427 LLLSALLYAPGAILFAKAKHEV-GQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           L+L+ALLY PGA +F  AK E   + IF   E  +   + + ++V+   +  G L+L
Sbjct: 461 LMLAALLYLPGAAVFVWAKREQRAKRIFKPYEIGVLVLLALISVVSIISIVTGRLSL 517


>TR:E4GC86_PROAA E4GC86 Arginine/ornithine antiporter OS=Propionibacterium acnes
           HL005PA3 GN=HMPREF9596_01670 PE=4 SV=1
          Length = 518

 Score =  500 bits (1287), Expect = e-171
 Identities = 260/477 (54%), Positives = 338/477 (70%), Gaps = 9/477 (1%)

Query: 8   KLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLANR 67
           KL   A+ +LVVGSMIGGGIFSLPQN+AA+A  G ++IGW IT +GM+ LA V+Q LA R
Sbjct: 48  KLSFPAMLSLVVGSMIGGGIFSLPQNIAAAASPGPMVIGWTITGIGMICLAMVYQKLAIR 107

Query: 68  KPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDTV 127
           +P+LD G+YAYAKAGFGD++GF+SAWGYW+SA +GNVGY VLLFST+G F P F  G+TV
Sbjct: 108 RPDLDNGIYAYAKAGFGDFIGFNSAWGYWLSALIGNVGYLVLLFSTVGKFVPAFAGGNTV 167

Query: 128 AAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTADIW 187
            A++ ASVLLW  H LVL G++ AAF+NT+ T+AK+VPL  FI IC  AF + +FT D W
Sbjct: 168 WAVLAASVLLWLTHALVLAGVRTAAFVNTIATIAKIVPLITFIAICAVAFDVGVFTEDFW 227

Query: 188 GKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLLLV 247
           G S+  LGSV  Q ++MMLVTVWVFIGIEGASI+S RA KRSDVGKATV GF+ VL+LL+
Sbjct: 228 G-SHAGLGSVFAQTKSMMLVTVWVFIGIEGASIYSKRARKRSDVGKATVGGFLFVLVLLI 286

Query: 248 LVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLCAE 307
            VN+LSMG+M + +LA L + SM  VL  VVG WG+VL+S G++ISLLGALL+W+LLC E
Sbjct: 287 GVNLLSMGIMHRAKLAGLPDASMGDVLSSVVGPWGSVLVSAGVIISLLGALLAWILLCGE 346

Query: 308 IMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKMLL 367
            M    +D  MP+   R N ++ PA ALW+TNI  Q+ LV+     G       Y  M  
Sbjct: 347 TMQVPGEDGIMPKLFGRINKHEAPAPALWITNIVSQICLVMTVLWDG------AYLAMAT 400

Query: 368 LATSMILIPYFWSAAYGLLLTLKGETYENDAR-ERSKDLVIAGIAVAYAVWLLYAGGLKY 426
           LA ++IL+PY  SAA+ L + +KGETYEN  R +R +D V+A +A  Y +WL+ A G   
Sbjct: 401 LAAALILVPYLLSAAFALKMVIKGETYENGPRSQRVRDAVVATVATLYGIWLVVAAGADA 460

Query: 427 LLLSALLYAPGAILFAKAKHEV-GQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           L+L+ALLY PGA +F  AK E   + IF   E  +   + + ++V+   +  G L+L
Sbjct: 461 LMLAALLYLPGAAVFVWAKREQRAKRIFKPYEIGVLVLLALISVVSIISIVTGRLSL 517


>TR:E4CU58_PROAA E4CU58 Arginine/ornithine antiporter OS=Propionibacterium acnes
           HL025PA1 GN=HMPREF9587_02215 PE=4 SV=1
          Length = 518

 Score =  500 bits (1287), Expect = e-171
 Identities = 260/477 (54%), Positives = 338/477 (70%), Gaps = 9/477 (1%)

Query: 8   KLRLGALTALVVGSMIGGGIFSLPQNMAASADVGAVLIGWAITAVGMLTLAFVFQTLANR 67
           KL   A+ +LVVGSMIGGGIF LPQN+AA+A  G ++IGW IT +GM+ LA V+Q LA R
Sbjct: 48  KLSFPAMLSLVVGSMIGGGIFLLPQNIAAAASPGPMVIGWTITGIGMICLAMVYQKLAIR 107

Query: 68  KPELDGGVYAYAKAGFGDYMGFSSAWGYWISAWLGNVGYFVLLFSTLGYFFPIFGKGDTV 127
           +P+LD G+YAYAKAGFGD++GF+SAWGYW+SA +GNVGY VLLFST+G F P F  G+TV
Sbjct: 108 RPDLDNGIYAYAKAGFGDFIGFNSAWGYWLSALIGNVGYLVLLFSTVGKFVPAFAGGNTV 167

Query: 128 AAIVCASVLLWALHFLVLRGIKEAAFINTVTTVAKVVPLFLFILICLFAFKLDIFTADIW 187
            A++ ASVLLW  H LVL G++ AAF+NT+ T+AK+VPL  FI IC  AF + +FT D W
Sbjct: 168 WAVLAASVLLWLTHALVLAGVRTAAFVNTIATIAKIVPLITFIAICAVAFDVGVFTEDFW 227

Query: 188 GKSNPDLGSVMNQVRNMMLVTVWVFIGIEGASIFSSRAEKRSDVGKATVIGFITVLLLLV 247
           G S+  LGSV  Q ++MMLVTVWVFIGIEGASI+S RA KRSDVGKATV GF+ VL+LL+
Sbjct: 228 G-SHAGLGSVFAQTKSMMLVTVWVFIGIEGASIYSKRARKRSDVGKATVGGFLFVLVLLI 286

Query: 248 LVNVLSMGVMTQPELAKLQNPSMALVLEHVVGHWGAVLISVGLLISLLGALLSWVLLCAE 307
            VN+LSMG+M + +LA L + SM  VL  VVG WG+VL+S G++ISLLGALL+W+LLC E
Sbjct: 287 GVNLLSMGIMHRAKLAGLPDASMGDVLSSVVGPWGSVLVSAGVIISLLGALLAWILLCGE 346

Query: 308 IMFAAAKDHTMPEFLRRENANQVPANALWLTNICVQVFLVVVFFTSGDPDGMDPYTKMLL 367
            M    +D TMP+   R N ++ PA ALW+TNI  Q+ LV+     G       Y  M  
Sbjct: 347 TMQVPGEDGTMPKLFGRINKHEAPAPALWITNIVSQICLVMTVLWDG------AYLAMAT 400

Query: 368 LATSMILIPYFWSAAYGLLLTLKGETYENDAR-ERSKDLVIAGIAVAYAVWLLYAGGLKY 426
           LA ++IL+PY  SAA+ L + +KGETYEN  R +R +D V+A +A  Y +WL+ A G   
Sbjct: 401 LAAALILVPYLLSAAFALKMVIKGETYENGPRSQRVRDAVVATVATLYGIWLVVAAGADA 460

Query: 427 LLLSALLYAPGAILFAKAKHEV-GQPIFTGIEKLIFAAVVIGALVAAYGLYDGFLTL 482
           L+L+ALLY PGA +F  AK E   + IF   E  +   + + ++V+   +  G L+L
Sbjct: 461 LMLAALLYLPGAAVFVWAKREQRAKRIFKPYEIGVLVLLALISVVSIISIVTGRLSL 517


  Database: uniprotkb
    Posted date:  Jul 10, 2012  1:00 AM
  Number of letters in database: 7,785,494,668
  Number of sequences in database:  23,734,728
  
Lambda     K      H
   0.327    0.141    0.428 

Gapped
Lambda     K      H
   0.267   0.0410    0.140 


Matrix: BLOSUM62
Gap Penalties: Existence: 11, Extension: 1
Number of Sequences: 23734728
Number of Hits to DB: 7,153,300,352
Number of extensions: 296597191
Number of successful extensions: 1307867
Number of sequences better than 10.0: 25404
Number of HSP's gapped: 1284957
Number of HSP's successfully gapped: 25679
Length of query: 482
Length of database: 7,785,494,668
Length adjustment: 146
Effective length of query: 336
Effective length of database: 4,320,224,380
Effective search space: 1451595391680
Effective search space used: 1451595391680
Neighboring words threshold: 11
Window for multiple hits: 40
X1: 15 ( 7.1 bits)
X2: 38 (14.6 bits)
X3: 64 (24.7 bits)
S1: 40 (21.7 bits)
S2: 85 (37.4 bits)
</output></ns2:getResultResponse>